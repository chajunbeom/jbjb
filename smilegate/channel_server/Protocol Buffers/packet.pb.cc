// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace channel_server {

namespace {

const ::google::protobuf::Descriptor* freinds_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  freinds_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* freinds_req_F_REQ_descriptor_ = NULL;
const ::google::protobuf::Descriptor* freinds_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  freinds_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* freinds_ans_user_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  freinds_ans_user_status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* freinds_ans_user_status_RATING_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* freinds_ans_F_ANS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* play_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  play_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* play_req_P_REQ_descriptor_ = NULL;
const ::google::protobuf::Descriptor* play_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  play_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* play_ans_P_ANS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* join_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  join_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* logout_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logout_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  freinds_req_descriptor_ = file->message_type(0);
  static const int freinds_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_req, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_req, user_id_),
  };
  freinds_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      freinds_req_descriptor_,
      freinds_req::internal_default_instance(),
      freinds_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_req, _has_bits_),
      -1,
      -1,
      sizeof(freinds_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_req, _internal_metadata_));
  freinds_req_F_REQ_descriptor_ = freinds_req_descriptor_->enum_type(0);
  freinds_ans_descriptor_ = file->message_type(1);
  static const int freinds_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans, ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans, user_),
  };
  freinds_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      freinds_ans_descriptor_,
      freinds_ans::internal_default_instance(),
      freinds_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans, _has_bits_),
      -1,
      -1,
      sizeof(freinds_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans, _internal_metadata_));
  freinds_ans_user_status_descriptor_ = freinds_ans_descriptor_->nested_type(0);
  static const int freinds_ans_user_status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans_user_status, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans_user_status, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans_user_status, on_),
  };
  freinds_ans_user_status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      freinds_ans_user_status_descriptor_,
      freinds_ans_user_status::internal_default_instance(),
      freinds_ans_user_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans_user_status, _has_bits_),
      -1,
      -1,
      sizeof(freinds_ans_user_status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(freinds_ans_user_status, _internal_metadata_));
  freinds_ans_user_status_RATING_descriptor_ = freinds_ans_user_status_descriptor_->enum_type(0);
  freinds_ans_F_ANS_descriptor_ = freinds_ans_descriptor_->enum_type(0);
  play_req_descriptor_ = file->message_type(2);
  static const int play_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_req, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_req, user_id_),
  };
  play_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      play_req_descriptor_,
      play_req::internal_default_instance(),
      play_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_req, _has_bits_),
      -1,
      -1,
      sizeof(play_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_req, _internal_metadata_));
  play_req_P_REQ_descriptor_ = play_req_descriptor_->enum_type(0);
  play_ans_descriptor_ = file->message_type(3);
  static const int play_ans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, room_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, yes_),
  };
  play_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      play_ans_descriptor_,
      play_ans::internal_default_instance(),
      play_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, _has_bits_),
      -1,
      -1,
      sizeof(play_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_ans, _internal_metadata_));
  play_ans_P_ANS_descriptor_ = play_ans_descriptor_->enum_type(0);
  join_ntf_descriptor_ = file->message_type(4);
  static const int join_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ntf, token_),
  };
  join_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      join_ntf_descriptor_,
      join_ntf::internal_default_instance(),
      join_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ntf, _has_bits_),
      -1,
      -1,
      sizeof(join_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ntf, _internal_metadata_));
  logout_ntf_descriptor_ = file->message_type(5);
  static const int logout_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, token_),
  };
  logout_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      logout_ntf_descriptor_,
      logout_ntf::internal_default_instance(),
      logout_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, _has_bits_),
      -1,
      -1,
      sizeof(logout_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, _internal_metadata_));
  MESSAGE_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      freinds_req_descriptor_, freinds_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      freinds_ans_descriptor_, freinds_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      freinds_ans_user_status_descriptor_, freinds_ans_user_status::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      play_req_descriptor_, play_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      play_ans_descriptor_, play_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      join_ntf_descriptor_, join_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      logout_ntf_descriptor_, logout_ntf::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  freinds_req_default_instance_.Shutdown();
  delete freinds_req_reflection_;
  freinds_ans_default_instance_.Shutdown();
  delete freinds_ans_reflection_;
  freinds_ans_user_status_default_instance_.Shutdown();
  delete freinds_ans_user_status_reflection_;
  play_req_default_instance_.Shutdown();
  delete play_req_reflection_;
  play_ans_default_instance_.Shutdown();
  delete play_ans_reflection_;
  join_ntf_default_instance_.Shutdown();
  delete join_ntf_reflection_;
  logout_ntf_default_instance_.Shutdown();
  delete logout_ntf_reflection_;
}

void protobuf_InitDefaults_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  freinds_req_default_instance_.DefaultConstruct();
  freinds_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  freinds_ans_user_status_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  play_req_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  play_ans_default_instance_.DefaultConstruct();
  join_ntf_default_instance_.DefaultConstruct();
  logout_ntf_default_instance_.DefaultConstruct();
  freinds_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  freinds_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  freinds_ans_user_status_default_instance_.get_mutable()->InitAsDefaultInstance();
  play_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  play_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  join_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  logout_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_packet_2eproto_once_);
void protobuf_InitDefaults_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_packet_2eproto_once_,
                 &protobuf_InitDefaults_packet_2eproto_impl);
}
void protobuf_AddDesc_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_packet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\016channel_server\"\203\001\n\013frein"
    "ds_req\022.\n\003req\030\001 \002(\0162!.channel_server.fre"
    "inds_req.F_REQ\022\017\n\007user_id\030\002 \002(\t\"3\n\005F_REQ"
    "\022\014\n\010CUR_LIST\020\000\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\022\n\n\006SEAR"
    "CH\020\003\"\210\003\n\013freinds_ans\022.\n\003ans\030\001 \002(\0162!.chan"
    "nel_server.freinds_ans.F_ANS\0225\n\004user\030\002 \003"
    "(\0132\'.channel_server.freinds_ans.user_sta"
    "tus\032\307\001\n\013user_status\022\017\n\007user_id\030\001 \002(\t\022>\n\006"
    "rating\030\002 \002(\0162..channel_server.freinds_an"
    "s.user_status.RATING\022\n\n\002on\030\003 \002(\010\"[\n\006RATI"
    "NG\022\n\n\006BRONZE\020\000\022\n\n\006SLIVER\020\001\022\010\n\004GOLD\020\002\022\014\n\010"
    "PLATINUM\020\003\022\013\n\007DIAMOND\020\004\022\n\n\006MASTER\020\005\022\010\n\004C"
    "HAL\020\006\"H\n\005F_ANS\022\r\n\tUSER_LIST\020\000\022\r\n\tUSER_IN"
    "FO\020\001\022\006\n\002OK\020\002\022\n\n\006ERROR_\020\003\022\r\n\tNOT_FOUND\020\004\""
    "\177\n\010play_req\022+\n\003req\030\001 \002(\0162\036.channel_serve"
    "r.play_req.P_REQ\022\017\n\007user_id\030\002 \001(\t\"5\n\005P_R"
    "EQ\022\010\n\004AUTO\020\000\022\014\n\010USER_REQ\020\001\022\n\n\006ACCEPT\020\002\022\010"
    "\n\004DENY\020\003\"\240\001\n\010play_ans\022+\n\003ans\030\001 \002(\0162\036.cha"
    "nnel_server.play_ans.P_ANS\022\017\n\007user_id\030\002 "
    "\001(\t\022\020\n\010room_num\030\003 \001(\005\022\013\n\003yes\030\004 \001(\010\"7\n\005P_"
    "ANS\022\014\n\010MATCH_OK\020\000\022\n\n\006NO_MAN\020\001\022\n\n\006ACCEPT\020"
    "\002\022\010\n\004DENY\020\003\"\031\n\010join_ntf\022\r\n\005token\030\001 \002(\005\"\033"
    "\n\nlogout_ntf\022\r\n\005token\030\001 \002(\005*h\n\nMESSAGE_I"
    "D\022\017\n\013FREINDS_REQ\020\000\022\017\n\013FREINDS_ANS\020\001\022\014\n\010P"
    "LAY_REQ\020\002\022\014\n\010PLAY_ANS\020\003\022\014\n\010JOIN_NTF\020\004\022\016\n"
    "\nLOGOUT_NTF\020\005", 1013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_packet_2eproto_once_);
void protobuf_AddDesc_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_packet_2eproto_once_,
                 &protobuf_AddDesc_packet_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;
const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MESSAGE_ID_descriptor_;
}
bool MESSAGE_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* freinds_req_F_REQ_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_req_F_REQ_descriptor_;
}
bool freinds_req_F_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const freinds_req_F_REQ freinds_req::CUR_LIST;
const freinds_req_F_REQ freinds_req::ADD;
const freinds_req_F_REQ freinds_req::DEL;
const freinds_req_F_REQ freinds_req::SEARCH;
const freinds_req_F_REQ freinds_req::F_REQ_MIN;
const freinds_req_F_REQ freinds_req::F_REQ_MAX;
const int freinds_req::F_REQ_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int freinds_req::kReqFieldNumber;
const int freinds_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

freinds_req::freinds_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.freinds_req)
}

void freinds_req::InitAsDefaultInstance() {
}

freinds_req::freinds_req(const freinds_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.freinds_req)
}

void freinds_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_ = 0;
}

freinds_req::~freinds_req() {
  // @@protoc_insertion_point(destructor:channel_server.freinds_req)
  SharedDtor();
}

void freinds_req::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void freinds_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* freinds_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_req_descriptor_;
}

const freinds_req& freinds_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<freinds_req> freinds_req_default_instance_;

freinds_req* freinds_req::New(::google::protobuf::Arena* arena) const {
  freinds_req* n = new freinds_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void freinds_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.freinds_req)
  if (_has_bits_[0 / 32] & 3u) {
    req_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool freinds_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.freinds_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.freinds_req.F_REQ req = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::freinds_req_F_REQ_IsValid(value)) {
            set_req(static_cast< ::channel_server::freinds_req_F_REQ >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.freinds_req.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.freinds_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.freinds_req)
  return false;
#undef DO_
}

void freinds_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.freinds_req)
  // required .channel_server.freinds_req.F_REQ req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.freinds_req.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.freinds_req)
}

::google::protobuf::uint8* freinds_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.freinds_req)
  // required .channel_server.freinds_req.F_REQ req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req(), target);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.freinds_req.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.freinds_req)
  return target;
}

size_t freinds_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.freinds_req)
  size_t total_size = 0;

  if (has_req()) {
    // required .channel_server.freinds_req.F_REQ req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());
  }

  if (has_user_id()) {
    // required string user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  return total_size;
}
size_t freinds_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.freinds_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_server.freinds_req.F_REQ req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());

    // required string user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void freinds_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.freinds_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const freinds_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const freinds_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.freinds_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.freinds_req)
    UnsafeMergeFrom(*source);
  }
}

void freinds_req::MergeFrom(const freinds_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.freinds_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void freinds_req::UnsafeMergeFrom(const freinds_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void freinds_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.freinds_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void freinds_req::CopyFrom(const freinds_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.freinds_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool freinds_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void freinds_req::Swap(freinds_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void freinds_req::InternalSwap(freinds_req* other) {
  std::swap(req_, other->req_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata freinds_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = freinds_req_descriptor_;
  metadata.reflection = freinds_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// freinds_req

// required .channel_server.freinds_req.F_REQ req = 1;
bool freinds_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void freinds_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
void freinds_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
void freinds_req::clear_req() {
  req_ = 0;
  clear_has_req();
}
::channel_server::freinds_req_F_REQ freinds_req::req() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_req.req)
  return static_cast< ::channel_server::freinds_req_F_REQ >(req_);
}
void freinds_req::set_req(::channel_server::freinds_req_F_REQ value) {
  assert(::channel_server::freinds_req_F_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_req.req)
}

// required string user_id = 2;
bool freinds_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void freinds_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void freinds_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void freinds_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& freinds_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void freinds_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.freinds_req.user_id)
}
void freinds_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.freinds_req.user_id)
}
void freinds_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.freinds_req.user_id)
}
::std::string* freinds_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* freinds_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.freinds_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void freinds_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.freinds_req.user_id)
}

inline const freinds_req* freinds_req::internal_default_instance() {
  return &freinds_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* freinds_ans_F_ANS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_ans_F_ANS_descriptor_;
}
bool freinds_ans_F_ANS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const freinds_ans_F_ANS freinds_ans::USER_LIST;
const freinds_ans_F_ANS freinds_ans::USER_INFO;
const freinds_ans_F_ANS freinds_ans::OK;
const freinds_ans_F_ANS freinds_ans::ERROR_;
const freinds_ans_F_ANS freinds_ans::NOT_FOUND;
const freinds_ans_F_ANS freinds_ans::F_ANS_MIN;
const freinds_ans_F_ANS freinds_ans::F_ANS_MAX;
const int freinds_ans::F_ANS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* freinds_ans_user_status_RATING_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_ans_user_status_RATING_descriptor_;
}
bool freinds_ans_user_status_RATING_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const freinds_ans_user_status_RATING freinds_ans_user_status::BRONZE;
const freinds_ans_user_status_RATING freinds_ans_user_status::SLIVER;
const freinds_ans_user_status_RATING freinds_ans_user_status::GOLD;
const freinds_ans_user_status_RATING freinds_ans_user_status::PLATINUM;
const freinds_ans_user_status_RATING freinds_ans_user_status::DIAMOND;
const freinds_ans_user_status_RATING freinds_ans_user_status::MASTER;
const freinds_ans_user_status_RATING freinds_ans_user_status::CHAL;
const freinds_ans_user_status_RATING freinds_ans_user_status::RATING_MIN;
const freinds_ans_user_status_RATING freinds_ans_user_status::RATING_MAX;
const int freinds_ans_user_status::RATING_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int freinds_ans_user_status::kUserIdFieldNumber;
const int freinds_ans_user_status::kRatingFieldNumber;
const int freinds_ans_user_status::kOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

freinds_ans_user_status::freinds_ans_user_status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.freinds_ans.user_status)
}

void freinds_ans_user_status::InitAsDefaultInstance() {
}

freinds_ans_user_status::freinds_ans_user_status(const freinds_ans_user_status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.freinds_ans.user_status)
}

void freinds_ans_user_status::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rating_, 0, reinterpret_cast<char*>(&on_) -
    reinterpret_cast<char*>(&rating_) + sizeof(on_));
}

freinds_ans_user_status::~freinds_ans_user_status() {
  // @@protoc_insertion_point(destructor:channel_server.freinds_ans.user_status)
  SharedDtor();
}

void freinds_ans_user_status::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void freinds_ans_user_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* freinds_ans_user_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_ans_user_status_descriptor_;
}

const freinds_ans_user_status& freinds_ans_user_status::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<freinds_ans_user_status> freinds_ans_user_status_default_instance_;

freinds_ans_user_status* freinds_ans_user_status::New(::google::protobuf::Arena* arena) const {
  freinds_ans_user_status* n = new freinds_ans_user_status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void freinds_ans_user_status::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.freinds_ans.user_status)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(freinds_ans_user_status, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<freinds_ans_user_status*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(rating_, on_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool freinds_ans_user_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.freinds_ans.user_status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.freinds_ans.user_status.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rating;
        break;
      }

      // required .channel_server.freinds_ans.user_status.RATING rating = 2;
      case 2: {
        if (tag == 16) {
         parse_rating:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::freinds_ans_user_status_RATING_IsValid(value)) {
            set_rating(static_cast< ::channel_server::freinds_ans_user_status_RATING >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_on;
        break;
      }

      // required bool on = 3;
      case 3: {
        if (tag == 24) {
         parse_on:
          set_has_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.freinds_ans.user_status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.freinds_ans.user_status)
  return false;
#undef DO_
}

void freinds_ans_user_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.freinds_ans.user_status)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.freinds_ans.user_status.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required .channel_server.freinds_ans.user_status.RATING rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rating(), output);
  }

  // required bool on = 3;
  if (has_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.freinds_ans.user_status)
}

::google::protobuf::uint8* freinds_ans_user_status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.freinds_ans.user_status)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.freinds_ans.user_status.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required .channel_server.freinds_ans.user_status.RATING rating = 2;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rating(), target);
  }

  // required bool on = 3;
  if (has_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.freinds_ans.user_status)
  return target;
}

size_t freinds_ans_user_status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.freinds_ans.user_status)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_rating()) {
    // required .channel_server.freinds_ans.user_status.RATING rating = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rating());
  }

  if (has_on()) {
    // required bool on = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t freinds_ans_user_status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.freinds_ans.user_status)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required .channel_server.freinds_ans.user_status.RATING rating = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rating());

    // required bool on = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void freinds_ans_user_status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.freinds_ans.user_status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const freinds_ans_user_status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const freinds_ans_user_status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.freinds_ans.user_status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.freinds_ans.user_status)
    UnsafeMergeFrom(*source);
  }
}

void freinds_ans_user_status::MergeFrom(const freinds_ans_user_status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.freinds_ans.user_status)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void freinds_ans_user_status::UnsafeMergeFrom(const freinds_ans_user_status& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_on()) {
      set_on(from.on());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void freinds_ans_user_status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.freinds_ans.user_status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void freinds_ans_user_status::CopyFrom(const freinds_ans_user_status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.freinds_ans.user_status)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool freinds_ans_user_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void freinds_ans_user_status::Swap(freinds_ans_user_status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void freinds_ans_user_status::InternalSwap(freinds_ans_user_status* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(rating_, other->rating_);
  std::swap(on_, other->on_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata freinds_ans_user_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = freinds_ans_user_status_descriptor_;
  metadata.reflection = freinds_ans_user_status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int freinds_ans::kAnsFieldNumber;
const int freinds_ans::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

freinds_ans::freinds_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.freinds_ans)
}

void freinds_ans::InitAsDefaultInstance() {
}

freinds_ans::freinds_ans(const freinds_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.freinds_ans)
}

void freinds_ans::SharedCtor() {
  _cached_size_ = 0;
  ans_ = 0;
}

freinds_ans::~freinds_ans() {
  // @@protoc_insertion_point(destructor:channel_server.freinds_ans)
  SharedDtor();
}

void freinds_ans::SharedDtor() {
}

void freinds_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* freinds_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return freinds_ans_descriptor_;
}

const freinds_ans& freinds_ans::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<freinds_ans> freinds_ans_default_instance_;

freinds_ans* freinds_ans::New(::google::protobuf::Arena* arena) const {
  freinds_ans* n = new freinds_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void freinds_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.freinds_ans)
  ans_ = 0;
  user_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool freinds_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.freinds_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.freinds_ans.F_ANS ans = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::freinds_ans_F_ANS_IsValid(value)) {
            set_ans(static_cast< ::channel_server::freinds_ans_F_ANS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // repeated .channel_server.freinds_ans.user_status user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_user;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.freinds_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.freinds_ans)
  return false;
#undef DO_
}

void freinds_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.freinds_ans)
  // required .channel_server.freinds_ans.F_ANS ans = 1;
  if (has_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ans(), output);
  }

  // repeated .channel_server.freinds_ans.user_status user = 2;
  for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.freinds_ans)
}

::google::protobuf::uint8* freinds_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.freinds_ans)
  // required .channel_server.freinds_ans.F_ANS ans = 1;
  if (has_ans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ans(), target);
  }

  // repeated .channel_server.freinds_ans.user_status user = 2;
  for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->user(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.freinds_ans)
  return target;
}

size_t freinds_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.freinds_ans)
  size_t total_size = 0;

  // required .channel_server.freinds_ans.F_ANS ans = 1;
  if (has_ans()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ans());
  }
  // repeated .channel_server.freinds_ans.user_status user = 2;
  {
    unsigned int count = this->user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void freinds_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.freinds_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const freinds_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const freinds_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.freinds_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.freinds_ans)
    UnsafeMergeFrom(*source);
  }
}

void freinds_ans::MergeFrom(const freinds_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.freinds_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void freinds_ans::UnsafeMergeFrom(const freinds_ans& from) {
  GOOGLE_DCHECK(&from != this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ans()) {
      set_ans(from.ans());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void freinds_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.freinds_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void freinds_ans::CopyFrom(const freinds_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.freinds_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool freinds_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  return true;
}

void freinds_ans::Swap(freinds_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void freinds_ans::InternalSwap(freinds_ans* other) {
  std::swap(ans_, other->ans_);
  user_.UnsafeArenaSwap(&other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata freinds_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = freinds_ans_descriptor_;
  metadata.reflection = freinds_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// freinds_ans_user_status

// required string user_id = 1;
bool freinds_ans_user_status::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void freinds_ans_user_status::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void freinds_ans_user_status::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void freinds_ans_user_status::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& freinds_ans_user_status::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void freinds_ans_user_status::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.user_id)
}
void freinds_ans_user_status::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.freinds_ans.user_status.user_id)
}
void freinds_ans_user_status::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.freinds_ans.user_status.user_id)
}
::std::string* freinds_ans_user_status::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_ans.user_status.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* freinds_ans_user_status::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.freinds_ans.user_status.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void freinds_ans_user_status::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.freinds_ans.user_status.user_id)
}

// required .channel_server.freinds_ans.user_status.RATING rating = 2;
bool freinds_ans_user_status::has_rating() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void freinds_ans_user_status::set_has_rating() {
  _has_bits_[0] |= 0x00000002u;
}
void freinds_ans_user_status::clear_has_rating() {
  _has_bits_[0] &= ~0x00000002u;
}
void freinds_ans_user_status::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
::channel_server::freinds_ans_user_status_RATING freinds_ans_user_status::rating() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.rating)
  return static_cast< ::channel_server::freinds_ans_user_status_RATING >(rating_);
}
void freinds_ans_user_status::set_rating(::channel_server::freinds_ans_user_status_RATING value) {
  assert(::channel_server::freinds_ans_user_status_RATING_IsValid(value));
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.rating)
}

// required bool on = 3;
bool freinds_ans_user_status::has_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void freinds_ans_user_status::set_has_on() {
  _has_bits_[0] |= 0x00000004u;
}
void freinds_ans_user_status::clear_has_on() {
  _has_bits_[0] &= ~0x00000004u;
}
void freinds_ans_user_status::clear_on() {
  on_ = false;
  clear_has_on();
}
bool freinds_ans_user_status::on() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.on)
  return on_;
}
void freinds_ans_user_status::set_on(bool value) {
  set_has_on();
  on_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.on)
}

inline const freinds_ans_user_status* freinds_ans_user_status::internal_default_instance() {
  return &freinds_ans_user_status_default_instance_.get();
}
// -------------------------------------------------------------------

// freinds_ans

// required .channel_server.freinds_ans.F_ANS ans = 1;
bool freinds_ans::has_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void freinds_ans::set_has_ans() {
  _has_bits_[0] |= 0x00000001u;
}
void freinds_ans::clear_has_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
void freinds_ans::clear_ans() {
  ans_ = 0;
  clear_has_ans();
}
::channel_server::freinds_ans_F_ANS freinds_ans::ans() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.ans)
  return static_cast< ::channel_server::freinds_ans_F_ANS >(ans_);
}
void freinds_ans::set_ans(::channel_server::freinds_ans_F_ANS value) {
  assert(::channel_server::freinds_ans_F_ANS_IsValid(value));
  set_has_ans();
  ans_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.ans)
}

// repeated .channel_server.freinds_ans.user_status user = 2;
int freinds_ans::user_size() const {
  return user_.size();
}
void freinds_ans::clear_user() {
  user_.Clear();
}
const ::channel_server::freinds_ans_user_status& freinds_ans::user(int index) const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user)
  return user_.Get(index);
}
::channel_server::freinds_ans_user_status* freinds_ans::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_ans.user)
  return user_.Mutable(index);
}
::channel_server::freinds_ans_user_status* freinds_ans::add_user() {
  // @@protoc_insertion_point(field_add:channel_server.freinds_ans.user)
  return user_.Add();
}
::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >*
freinds_ans::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:channel_server.freinds_ans.user)
  return &user_;
}
const ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >&
freinds_ans::user() const {
  // @@protoc_insertion_point(field_list:channel_server.freinds_ans.user)
  return user_;
}

inline const freinds_ans* freinds_ans::internal_default_instance() {
  return &freinds_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* play_req_P_REQ_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_req_P_REQ_descriptor_;
}
bool play_req_P_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const play_req_P_REQ play_req::AUTO;
const play_req_P_REQ play_req::USER_REQ;
const play_req_P_REQ play_req::ACCEPT;
const play_req_P_REQ play_req::DENY;
const play_req_P_REQ play_req::P_REQ_MIN;
const play_req_P_REQ play_req::P_REQ_MAX;
const int play_req::P_REQ_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play_req::kReqFieldNumber;
const int play_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play_req::play_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.play_req)
}

void play_req::InitAsDefaultInstance() {
}

play_req::play_req(const play_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.play_req)
}

void play_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_ = 0;
}

play_req::~play_req() {
  // @@protoc_insertion_point(destructor:channel_server.play_req)
  SharedDtor();
}

void play_req::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void play_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* play_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_req_descriptor_;
}

const play_req& play_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<play_req> play_req_default_instance_;

play_req* play_req::New(::google::protobuf::Arena* arena) const {
  play_req* n = new play_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void play_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.play_req)
  if (_has_bits_[0 / 32] & 3u) {
    req_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool play_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.play_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.play_req.P_REQ req = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::play_req_P_REQ_IsValid(value)) {
            set_req(static_cast< ::channel_server::play_req_P_REQ >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.play_req.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.play_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.play_req)
  return false;
#undef DO_
}

void play_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.play_req)
  // required .channel_server.play_req.P_REQ req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.play_req.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.play_req)
}

::google::protobuf::uint8* play_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.play_req)
  // required .channel_server.play_req.P_REQ req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.play_req.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.play_req)
  return target;
}

size_t play_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.play_req)
  size_t total_size = 0;

  // required .channel_server.play_req.P_REQ req = 1;
  if (has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());
  }
  // optional string user_id = 2;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void play_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.play_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const play_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const play_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.play_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.play_req)
    UnsafeMergeFrom(*source);
  }
}

void play_req::MergeFrom(const play_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.play_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void play_req::UnsafeMergeFrom(const play_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void play_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.play_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_req::CopyFrom(const play_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.play_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool play_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void play_req::Swap(play_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play_req::InternalSwap(play_req* other) {
  std::swap(req_, other->req_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata play_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = play_req_descriptor_;
  metadata.reflection = play_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// play_req

// required .channel_server.play_req.P_REQ req = 1;
bool play_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void play_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
void play_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
void play_req::clear_req() {
  req_ = 0;
  clear_has_req();
}
::channel_server::play_req_P_REQ play_req::req() const {
  // @@protoc_insertion_point(field_get:channel_server.play_req.req)
  return static_cast< ::channel_server::play_req_P_REQ >(req_);
}
void play_req::set_req(::channel_server::play_req_P_REQ value) {
  assert(::channel_server::play_req_P_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_req.req)
}

// optional string user_id = 2;
bool play_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void play_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void play_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void play_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& play_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.play_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.play_req.user_id)
}
void play_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.play_req.user_id)
}
void play_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.play_req.user_id)
}
::std::string* play_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.play_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* play_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.play_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.play_req.user_id)
}

inline const play_req* play_req::internal_default_instance() {
  return &play_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* play_ans_P_ANS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_ans_P_ANS_descriptor_;
}
bool play_ans_P_ANS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const play_ans_P_ANS play_ans::MATCH_OK;
const play_ans_P_ANS play_ans::NO_MAN;
const play_ans_P_ANS play_ans::ACCEPT;
const play_ans_P_ANS play_ans::DENY;
const play_ans_P_ANS play_ans::P_ANS_MIN;
const play_ans_P_ANS play_ans::P_ANS_MAX;
const int play_ans::P_ANS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play_ans::kAnsFieldNumber;
const int play_ans::kUserIdFieldNumber;
const int play_ans::kRoomNumFieldNumber;
const int play_ans::kYesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play_ans::play_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.play_ans)
}

void play_ans::InitAsDefaultInstance() {
}

play_ans::play_ans(const play_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.play_ans)
}

void play_ans::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ans_, 0, reinterpret_cast<char*>(&yes_) -
    reinterpret_cast<char*>(&ans_) + sizeof(yes_));
}

play_ans::~play_ans() {
  // @@protoc_insertion_point(destructor:channel_server.play_ans)
  SharedDtor();
}

void play_ans::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void play_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* play_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_ans_descriptor_;
}

const play_ans& play_ans::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<play_ans> play_ans_default_instance_;

play_ans* play_ans::New(::google::protobuf::Arena* arena) const {
  play_ans* n = new play_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void play_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.play_ans)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(play_ans, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<play_ans*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(ans_, yes_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool play_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.play_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.play_ans.P_ANS ans = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::play_ans_P_ANS_IsValid(value)) {
            set_ans(static_cast< ::channel_server::play_ans_P_ANS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.play_ans.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_num;
        break;
      }

      // optional int32 room_num = 3;
      case 3: {
        if (tag == 24) {
         parse_room_num:
          set_has_room_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_yes;
        break;
      }

      // optional bool yes = 4;
      case 4: {
        if (tag == 32) {
         parse_yes:
          set_has_yes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.play_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.play_ans)
  return false;
#undef DO_
}

void play_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.play_ans)
  // required .channel_server.play_ans.P_ANS ans = 1;
  if (has_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ans(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.play_ans.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional int32 room_num = 3;
  if (has_room_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_num(), output);
  }

  // optional bool yes = 4;
  if (has_yes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->yes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.play_ans)
}

::google::protobuf::uint8* play_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.play_ans)
  // required .channel_server.play_ans.P_ANS ans = 1;
  if (has_ans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ans(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.play_ans.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional int32 room_num = 3;
  if (has_room_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_num(), target);
  }

  // optional bool yes = 4;
  if (has_yes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->yes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.play_ans)
  return target;
}

size_t play_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.play_ans)
  size_t total_size = 0;

  // required .channel_server.play_ans.P_ANS ans = 1;
  if (has_ans()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ans());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int32 room_num = 3;
    if (has_room_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_num());
    }

    // optional bool yes = 4;
    if (has_yes()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void play_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.play_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const play_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const play_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.play_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.play_ans)
    UnsafeMergeFrom(*source);
  }
}

void play_ans::MergeFrom(const play_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.play_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void play_ans::UnsafeMergeFrom(const play_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ans()) {
      set_ans(from.ans());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_room_num()) {
      set_room_num(from.room_num());
    }
    if (from.has_yes()) {
      set_yes(from.yes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void play_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.play_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_ans::CopyFrom(const play_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.play_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool play_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void play_ans::Swap(play_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play_ans::InternalSwap(play_ans* other) {
  std::swap(ans_, other->ans_);
  user_id_.Swap(&other->user_id_);
  std::swap(room_num_, other->room_num_);
  std::swap(yes_, other->yes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata play_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = play_ans_descriptor_;
  metadata.reflection = play_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// play_ans

// required .channel_server.play_ans.P_ANS ans = 1;
bool play_ans::has_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void play_ans::set_has_ans() {
  _has_bits_[0] |= 0x00000001u;
}
void play_ans::clear_has_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
void play_ans::clear_ans() {
  ans_ = 0;
  clear_has_ans();
}
::channel_server::play_ans_P_ANS play_ans::ans() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.ans)
  return static_cast< ::channel_server::play_ans_P_ANS >(ans_);
}
void play_ans::set_ans(::channel_server::play_ans_P_ANS value) {
  assert(::channel_server::play_ans_P_ANS_IsValid(value));
  set_has_ans();
  ans_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.ans)
}

// optional string user_id = 2;
bool play_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void play_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void play_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void play_ans::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& play_ans::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.play_ans.user_id)
}
void play_ans::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.play_ans.user_id)
}
void play_ans::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.play_ans.user_id)
}
::std::string* play_ans::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.play_ans.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* play_ans::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.play_ans.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.play_ans.user_id)
}

// optional int32 room_num = 3;
bool play_ans::has_room_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void play_ans::set_has_room_num() {
  _has_bits_[0] |= 0x00000004u;
}
void play_ans::clear_has_room_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void play_ans::clear_room_num() {
  room_num_ = 0;
  clear_has_room_num();
}
::google::protobuf::int32 play_ans::room_num() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.room_num)
  return room_num_;
}
void play_ans::set_room_num(::google::protobuf::int32 value) {
  set_has_room_num();
  room_num_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.room_num)
}

// optional bool yes = 4;
bool play_ans::has_yes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void play_ans::set_has_yes() {
  _has_bits_[0] |= 0x00000008u;
}
void play_ans::clear_has_yes() {
  _has_bits_[0] &= ~0x00000008u;
}
void play_ans::clear_yes() {
  yes_ = false;
  clear_has_yes();
}
bool play_ans::yes() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.yes)
  return yes_;
}
void play_ans::set_yes(bool value) {
  set_has_yes();
  yes_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.yes)
}

inline const play_ans* play_ans::internal_default_instance() {
  return &play_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int join_ntf::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

join_ntf::join_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.join_ntf)
}

void join_ntf::InitAsDefaultInstance() {
}

join_ntf::join_ntf(const join_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.join_ntf)
}

void join_ntf::SharedCtor() {
  _cached_size_ = 0;
  token_ = 0;
}

join_ntf::~join_ntf() {
  // @@protoc_insertion_point(destructor:channel_server.join_ntf)
  SharedDtor();
}

void join_ntf::SharedDtor() {
}

void join_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* join_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return join_ntf_descriptor_;
}

const join_ntf& join_ntf::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<join_ntf> join_ntf_default_instance_;

join_ntf* join_ntf::New(::google::protobuf::Arena* arena) const {
  join_ntf* n = new join_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void join_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.join_ntf)
  token_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool join_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.join_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 token = 1;
      case 1: {
        if (tag == 8) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.join_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.join_ntf)
  return false;
#undef DO_
}

void join_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.join_ntf)
  // required int32 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.join_ntf)
}

::google::protobuf::uint8* join_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.join_ntf)
  // required int32 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.join_ntf)
  return target;
}

size_t join_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.join_ntf)
  size_t total_size = 0;

  // required int32 token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void join_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.join_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const join_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const join_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.join_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.join_ntf)
    UnsafeMergeFrom(*source);
  }
}

void join_ntf::MergeFrom(const join_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.join_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void join_ntf::UnsafeMergeFrom(const join_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void join_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.join_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_ntf::CopyFrom(const join_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.join_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool join_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void join_ntf::Swap(join_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void join_ntf::InternalSwap(join_ntf* other) {
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata join_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = join_ntf_descriptor_;
  metadata.reflection = join_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// join_ntf

// required int32 token = 1;
bool join_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void join_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void join_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void join_ntf::clear_token() {
  token_ = 0;
  clear_has_token();
}
::google::protobuf::int32 join_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_server.join_ntf.token)
  return token_;
}
void join_ntf::set_token(::google::protobuf::int32 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:channel_server.join_ntf.token)
}

inline const join_ntf* join_ntf::internal_default_instance() {
  return &join_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logout_ntf::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout_ntf::logout_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.logout_ntf)
}

void logout_ntf::InitAsDefaultInstance() {
}

logout_ntf::logout_ntf(const logout_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.logout_ntf)
}

void logout_ntf::SharedCtor() {
  _cached_size_ = 0;
  token_ = 0;
}

logout_ntf::~logout_ntf() {
  // @@protoc_insertion_point(destructor:channel_server.logout_ntf)
  SharedDtor();
}

void logout_ntf::SharedDtor() {
}

void logout_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logout_ntf_descriptor_;
}

const logout_ntf& logout_ntf::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<logout_ntf> logout_ntf_default_instance_;

logout_ntf* logout_ntf::New(::google::protobuf::Arena* arena) const {
  logout_ntf* n = new logout_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void logout_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.logout_ntf)
  token_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool logout_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.logout_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 token = 1;
      case 1: {
        if (tag == 8) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.logout_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.logout_ntf)
  return false;
#undef DO_
}

void logout_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.logout_ntf)
  // required int32 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.logout_ntf)
}

::google::protobuf::uint8* logout_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.logout_ntf)
  // required int32 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.logout_ntf)
  return target;
}

size_t logout_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.logout_ntf)
  size_t total_size = 0;

  // required int32 token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.logout_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const logout_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logout_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.logout_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.logout_ntf)
    UnsafeMergeFrom(*source);
  }
}

void logout_ntf::MergeFrom(const logout_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.logout_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void logout_ntf::UnsafeMergeFrom(const logout_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void logout_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.logout_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_ntf::CopyFrom(const logout_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.logout_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool logout_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void logout_ntf::Swap(logout_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout_ntf::InternalSwap(logout_ntf* other) {
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata logout_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logout_ntf_descriptor_;
  metadata.reflection = logout_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// logout_ntf

// required int32 token = 1;
bool logout_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void logout_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void logout_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void logout_ntf::clear_token() {
  token_ = 0;
  clear_has_token();
}
::google::protobuf::int32 logout_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_server.logout_ntf.token)
  return token_;
}
void logout_ntf::set_token(::google::protobuf::int32 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:channel_server.logout_ntf.token)
}

inline const logout_ntf* logout_ntf::internal_default_instance() {
  return &logout_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_server

// @@protoc_insertion_point(global_scope)
