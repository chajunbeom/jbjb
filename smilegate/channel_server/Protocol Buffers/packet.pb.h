// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace channel_server {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_packet_2eproto();
void protobuf_InitDefaults_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class freinds_ans;
class freinds_ans_user_status;
class freinds_req;
class join_ntf;
class logout_ntf;
class play_ans;
class play_req;

enum freinds_req_F_REQ {
  freinds_req_F_REQ_CUR_LIST = 0,
  freinds_req_F_REQ_ADD = 1,
  freinds_req_F_REQ_DEL = 2,
  freinds_req_F_REQ_SEARCH = 3
};
bool freinds_req_F_REQ_IsValid(int value);
const freinds_req_F_REQ freinds_req_F_REQ_F_REQ_MIN = freinds_req_F_REQ_CUR_LIST;
const freinds_req_F_REQ freinds_req_F_REQ_F_REQ_MAX = freinds_req_F_REQ_SEARCH;
const int freinds_req_F_REQ_F_REQ_ARRAYSIZE = freinds_req_F_REQ_F_REQ_MAX + 1;

const ::google::protobuf::EnumDescriptor* freinds_req_F_REQ_descriptor();
inline const ::std::string& freinds_req_F_REQ_Name(freinds_req_F_REQ value) {
  return ::google::protobuf::internal::NameOfEnum(
    freinds_req_F_REQ_descriptor(), value);
}
inline bool freinds_req_F_REQ_Parse(
    const ::std::string& name, freinds_req_F_REQ* value) {
  return ::google::protobuf::internal::ParseNamedEnum<freinds_req_F_REQ>(
    freinds_req_F_REQ_descriptor(), name, value);
}
enum freinds_ans_user_status_RATING {
  freinds_ans_user_status_RATING_BRONZE = 0,
  freinds_ans_user_status_RATING_SLIVER = 1,
  freinds_ans_user_status_RATING_GOLD = 2,
  freinds_ans_user_status_RATING_PLATINUM = 3,
  freinds_ans_user_status_RATING_DIAMOND = 4,
  freinds_ans_user_status_RATING_MASTER = 5,
  freinds_ans_user_status_RATING_CHAL = 6
};
bool freinds_ans_user_status_RATING_IsValid(int value);
const freinds_ans_user_status_RATING freinds_ans_user_status_RATING_RATING_MIN = freinds_ans_user_status_RATING_BRONZE;
const freinds_ans_user_status_RATING freinds_ans_user_status_RATING_RATING_MAX = freinds_ans_user_status_RATING_CHAL;
const int freinds_ans_user_status_RATING_RATING_ARRAYSIZE = freinds_ans_user_status_RATING_RATING_MAX + 1;

const ::google::protobuf::EnumDescriptor* freinds_ans_user_status_RATING_descriptor();
inline const ::std::string& freinds_ans_user_status_RATING_Name(freinds_ans_user_status_RATING value) {
  return ::google::protobuf::internal::NameOfEnum(
    freinds_ans_user_status_RATING_descriptor(), value);
}
inline bool freinds_ans_user_status_RATING_Parse(
    const ::std::string& name, freinds_ans_user_status_RATING* value) {
  return ::google::protobuf::internal::ParseNamedEnum<freinds_ans_user_status_RATING>(
    freinds_ans_user_status_RATING_descriptor(), name, value);
}
enum freinds_ans_F_ANS {
  freinds_ans_F_ANS_USER_LIST = 0,
  freinds_ans_F_ANS_USER_INFO = 1,
  freinds_ans_F_ANS_OK = 2,
  freinds_ans_F_ANS_ERROR_ = 3,
  freinds_ans_F_ANS_NOT_FOUND = 4
};
bool freinds_ans_F_ANS_IsValid(int value);
const freinds_ans_F_ANS freinds_ans_F_ANS_F_ANS_MIN = freinds_ans_F_ANS_USER_LIST;
const freinds_ans_F_ANS freinds_ans_F_ANS_F_ANS_MAX = freinds_ans_F_ANS_NOT_FOUND;
const int freinds_ans_F_ANS_F_ANS_ARRAYSIZE = freinds_ans_F_ANS_F_ANS_MAX + 1;

const ::google::protobuf::EnumDescriptor* freinds_ans_F_ANS_descriptor();
inline const ::std::string& freinds_ans_F_ANS_Name(freinds_ans_F_ANS value) {
  return ::google::protobuf::internal::NameOfEnum(
    freinds_ans_F_ANS_descriptor(), value);
}
inline bool freinds_ans_F_ANS_Parse(
    const ::std::string& name, freinds_ans_F_ANS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<freinds_ans_F_ANS>(
    freinds_ans_F_ANS_descriptor(), name, value);
}
enum play_req_P_REQ {
  play_req_P_REQ_AUTO = 0,
  play_req_P_REQ_USER_REQ = 1,
  play_req_P_REQ_ACCEPT = 2,
  play_req_P_REQ_DENY = 3
};
bool play_req_P_REQ_IsValid(int value);
const play_req_P_REQ play_req_P_REQ_P_REQ_MIN = play_req_P_REQ_AUTO;
const play_req_P_REQ play_req_P_REQ_P_REQ_MAX = play_req_P_REQ_DENY;
const int play_req_P_REQ_P_REQ_ARRAYSIZE = play_req_P_REQ_P_REQ_MAX + 1;

const ::google::protobuf::EnumDescriptor* play_req_P_REQ_descriptor();
inline const ::std::string& play_req_P_REQ_Name(play_req_P_REQ value) {
  return ::google::protobuf::internal::NameOfEnum(
    play_req_P_REQ_descriptor(), value);
}
inline bool play_req_P_REQ_Parse(
    const ::std::string& name, play_req_P_REQ* value) {
  return ::google::protobuf::internal::ParseNamedEnum<play_req_P_REQ>(
    play_req_P_REQ_descriptor(), name, value);
}
enum play_ans_P_ANS {
  play_ans_P_ANS_MATCH_OK = 0,
  play_ans_P_ANS_NO_MAN = 1,
  play_ans_P_ANS_ACCEPT = 2,
  play_ans_P_ANS_DENY = 3
};
bool play_ans_P_ANS_IsValid(int value);
const play_ans_P_ANS play_ans_P_ANS_P_ANS_MIN = play_ans_P_ANS_MATCH_OK;
const play_ans_P_ANS play_ans_P_ANS_P_ANS_MAX = play_ans_P_ANS_DENY;
const int play_ans_P_ANS_P_ANS_ARRAYSIZE = play_ans_P_ANS_P_ANS_MAX + 1;

const ::google::protobuf::EnumDescriptor* play_ans_P_ANS_descriptor();
inline const ::std::string& play_ans_P_ANS_Name(play_ans_P_ANS value) {
  return ::google::protobuf::internal::NameOfEnum(
    play_ans_P_ANS_descriptor(), value);
}
inline bool play_ans_P_ANS_Parse(
    const ::std::string& name, play_ans_P_ANS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<play_ans_P_ANS>(
    play_ans_P_ANS_descriptor(), name, value);
}
enum MESSAGE_ID {
  FREINDS_REQ = 0,
  FREINDS_ANS = 1,
  PLAY_REQ = 2,
  PLAY_ANS = 3,
  JOIN_NTF = 4,
  LOGOUT_NTF = 5
};
bool MESSAGE_ID_IsValid(int value);
const MESSAGE_ID MESSAGE_ID_MIN = FREINDS_REQ;
const MESSAGE_ID MESSAGE_ID_MAX = LOGOUT_NTF;
const int MESSAGE_ID_ARRAYSIZE = MESSAGE_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor();
inline const ::std::string& MESSAGE_ID_Name(MESSAGE_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_ID_descriptor(), value);
}
inline bool MESSAGE_ID_Parse(
    const ::std::string& name, MESSAGE_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_ID>(
    MESSAGE_ID_descriptor(), name, value);
}
// ===================================================================

class freinds_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.freinds_req) */ {
 public:
  freinds_req();
  virtual ~freinds_req();

  freinds_req(const freinds_req& from);

  inline freinds_req& operator=(const freinds_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const freinds_req& default_instance();

  static const freinds_req* internal_default_instance();

  void Swap(freinds_req* other);

  // implements Message ----------------------------------------------

  inline freinds_req* New() const { return New(NULL); }

  freinds_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const freinds_req& from);
  void MergeFrom(const freinds_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(freinds_req* other);
  void UnsafeMergeFrom(const freinds_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef freinds_req_F_REQ F_REQ;
  static const F_REQ CUR_LIST =
    freinds_req_F_REQ_CUR_LIST;
  static const F_REQ ADD =
    freinds_req_F_REQ_ADD;
  static const F_REQ DEL =
    freinds_req_F_REQ_DEL;
  static const F_REQ SEARCH =
    freinds_req_F_REQ_SEARCH;
  static inline bool F_REQ_IsValid(int value) {
    return freinds_req_F_REQ_IsValid(value);
  }
  static const F_REQ F_REQ_MIN =
    freinds_req_F_REQ_F_REQ_MIN;
  static const F_REQ F_REQ_MAX =
    freinds_req_F_REQ_F_REQ_MAX;
  static const int F_REQ_ARRAYSIZE =
    freinds_req_F_REQ_F_REQ_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  F_REQ_descriptor() {
    return freinds_req_F_REQ_descriptor();
  }
  static inline const ::std::string& F_REQ_Name(F_REQ value) {
    return freinds_req_F_REQ_Name(value);
  }
  static inline bool F_REQ_Parse(const ::std::string& name,
      F_REQ* value) {
    return freinds_req_F_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.freinds_req.F_REQ req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  ::channel_server::freinds_req_F_REQ req() const;
  void set_req(::channel_server::freinds_req_F_REQ value);

  // required string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:channel_server.freinds_req)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  int req_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<freinds_req> freinds_req_default_instance_;

// -------------------------------------------------------------------

class freinds_ans_user_status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.freinds_ans.user_status) */ {
 public:
  freinds_ans_user_status();
  virtual ~freinds_ans_user_status();

  freinds_ans_user_status(const freinds_ans_user_status& from);

  inline freinds_ans_user_status& operator=(const freinds_ans_user_status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const freinds_ans_user_status& default_instance();

  static const freinds_ans_user_status* internal_default_instance();

  void Swap(freinds_ans_user_status* other);

  // implements Message ----------------------------------------------

  inline freinds_ans_user_status* New() const { return New(NULL); }

  freinds_ans_user_status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const freinds_ans_user_status& from);
  void MergeFrom(const freinds_ans_user_status& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(freinds_ans_user_status* other);
  void UnsafeMergeFrom(const freinds_ans_user_status& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef freinds_ans_user_status_RATING RATING;
  static const RATING BRONZE =
    freinds_ans_user_status_RATING_BRONZE;
  static const RATING SLIVER =
    freinds_ans_user_status_RATING_SLIVER;
  static const RATING GOLD =
    freinds_ans_user_status_RATING_GOLD;
  static const RATING PLATINUM =
    freinds_ans_user_status_RATING_PLATINUM;
  static const RATING DIAMOND =
    freinds_ans_user_status_RATING_DIAMOND;
  static const RATING MASTER =
    freinds_ans_user_status_RATING_MASTER;
  static const RATING CHAL =
    freinds_ans_user_status_RATING_CHAL;
  static inline bool RATING_IsValid(int value) {
    return freinds_ans_user_status_RATING_IsValid(value);
  }
  static const RATING RATING_MIN =
    freinds_ans_user_status_RATING_RATING_MIN;
  static const RATING RATING_MAX =
    freinds_ans_user_status_RATING_RATING_MAX;
  static const int RATING_ARRAYSIZE =
    freinds_ans_user_status_RATING_RATING_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RATING_descriptor() {
    return freinds_ans_user_status_RATING_descriptor();
  }
  static inline const ::std::string& RATING_Name(RATING value) {
    return freinds_ans_user_status_RATING_Name(value);
  }
  static inline bool RATING_Parse(const ::std::string& name,
      RATING* value) {
    return freinds_ans_user_status_RATING_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required .channel_server.freinds_ans.user_status.RATING rating = 2;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 2;
  ::channel_server::freinds_ans_user_status_RATING rating() const;
  void set_rating(::channel_server::freinds_ans_user_status_RATING value);

  // required bool on = 3;
  bool has_on() const;
  void clear_on();
  static const int kOnFieldNumber = 3;
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.freinds_ans.user_status)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_rating();
  inline void clear_has_rating();
  inline void set_has_on();
  inline void clear_has_on();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  int rating_;
  bool on_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<freinds_ans_user_status> freinds_ans_user_status_default_instance_;

// -------------------------------------------------------------------

class freinds_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.freinds_ans) */ {
 public:
  freinds_ans();
  virtual ~freinds_ans();

  freinds_ans(const freinds_ans& from);

  inline freinds_ans& operator=(const freinds_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const freinds_ans& default_instance();

  static const freinds_ans* internal_default_instance();

  void Swap(freinds_ans* other);

  // implements Message ----------------------------------------------

  inline freinds_ans* New() const { return New(NULL); }

  freinds_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const freinds_ans& from);
  void MergeFrom(const freinds_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(freinds_ans* other);
  void UnsafeMergeFrom(const freinds_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef freinds_ans_user_status user_status;

  typedef freinds_ans_F_ANS F_ANS;
  static const F_ANS USER_LIST =
    freinds_ans_F_ANS_USER_LIST;
  static const F_ANS USER_INFO =
    freinds_ans_F_ANS_USER_INFO;
  static const F_ANS OK =
    freinds_ans_F_ANS_OK;
  static const F_ANS ERROR_ =
    freinds_ans_F_ANS_ERROR_;
  static const F_ANS NOT_FOUND =
    freinds_ans_F_ANS_NOT_FOUND;
  static inline bool F_ANS_IsValid(int value) {
    return freinds_ans_F_ANS_IsValid(value);
  }
  static const F_ANS F_ANS_MIN =
    freinds_ans_F_ANS_F_ANS_MIN;
  static const F_ANS F_ANS_MAX =
    freinds_ans_F_ANS_F_ANS_MAX;
  static const int F_ANS_ARRAYSIZE =
    freinds_ans_F_ANS_F_ANS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  F_ANS_descriptor() {
    return freinds_ans_F_ANS_descriptor();
  }
  static inline const ::std::string& F_ANS_Name(F_ANS value) {
    return freinds_ans_F_ANS_Name(value);
  }
  static inline bool F_ANS_Parse(const ::std::string& name,
      F_ANS* value) {
    return freinds_ans_F_ANS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.freinds_ans.F_ANS ans = 1;
  bool has_ans() const;
  void clear_ans();
  static const int kAnsFieldNumber = 1;
  ::channel_server::freinds_ans_F_ANS ans() const;
  void set_ans(::channel_server::freinds_ans_F_ANS value);

  // repeated .channel_server.freinds_ans.user_status user = 2;
  int user_size() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::channel_server::freinds_ans_user_status& user(int index) const;
  ::channel_server::freinds_ans_user_status* mutable_user(int index);
  ::channel_server::freinds_ans_user_status* add_user();
  ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >*
      mutable_user();
  const ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >&
      user() const;

  // @@protoc_insertion_point(class_scope:channel_server.freinds_ans)
 private:
  inline void set_has_ans();
  inline void clear_has_ans();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status > user_;
  int ans_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<freinds_ans> freinds_ans_default_instance_;

// -------------------------------------------------------------------

class play_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.play_req) */ {
 public:
  play_req();
  virtual ~play_req();

  play_req(const play_req& from);

  inline play_req& operator=(const play_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const play_req& default_instance();

  static const play_req* internal_default_instance();

  void Swap(play_req* other);

  // implements Message ----------------------------------------------

  inline play_req* New() const { return New(NULL); }

  play_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const play_req& from);
  void MergeFrom(const play_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(play_req* other);
  void UnsafeMergeFrom(const play_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef play_req_P_REQ P_REQ;
  static const P_REQ AUTO =
    play_req_P_REQ_AUTO;
  static const P_REQ USER_REQ =
    play_req_P_REQ_USER_REQ;
  static const P_REQ ACCEPT =
    play_req_P_REQ_ACCEPT;
  static const P_REQ DENY =
    play_req_P_REQ_DENY;
  static inline bool P_REQ_IsValid(int value) {
    return play_req_P_REQ_IsValid(value);
  }
  static const P_REQ P_REQ_MIN =
    play_req_P_REQ_P_REQ_MIN;
  static const P_REQ P_REQ_MAX =
    play_req_P_REQ_P_REQ_MAX;
  static const int P_REQ_ARRAYSIZE =
    play_req_P_REQ_P_REQ_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  P_REQ_descriptor() {
    return play_req_P_REQ_descriptor();
  }
  static inline const ::std::string& P_REQ_Name(P_REQ value) {
    return play_req_P_REQ_Name(value);
  }
  static inline bool P_REQ_Parse(const ::std::string& name,
      P_REQ* value) {
    return play_req_P_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.play_req.P_REQ req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  ::channel_server::play_req_P_REQ req() const;
  void set_req(::channel_server::play_req_P_REQ value);

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:channel_server.play_req)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  int req_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<play_req> play_req_default_instance_;

// -------------------------------------------------------------------

class play_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.play_ans) */ {
 public:
  play_ans();
  virtual ~play_ans();

  play_ans(const play_ans& from);

  inline play_ans& operator=(const play_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const play_ans& default_instance();

  static const play_ans* internal_default_instance();

  void Swap(play_ans* other);

  // implements Message ----------------------------------------------

  inline play_ans* New() const { return New(NULL); }

  play_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const play_ans& from);
  void MergeFrom(const play_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(play_ans* other);
  void UnsafeMergeFrom(const play_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef play_ans_P_ANS P_ANS;
  static const P_ANS MATCH_OK =
    play_ans_P_ANS_MATCH_OK;
  static const P_ANS NO_MAN =
    play_ans_P_ANS_NO_MAN;
  static const P_ANS ACCEPT =
    play_ans_P_ANS_ACCEPT;
  static const P_ANS DENY =
    play_ans_P_ANS_DENY;
  static inline bool P_ANS_IsValid(int value) {
    return play_ans_P_ANS_IsValid(value);
  }
  static const P_ANS P_ANS_MIN =
    play_ans_P_ANS_P_ANS_MIN;
  static const P_ANS P_ANS_MAX =
    play_ans_P_ANS_P_ANS_MAX;
  static const int P_ANS_ARRAYSIZE =
    play_ans_P_ANS_P_ANS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  P_ANS_descriptor() {
    return play_ans_P_ANS_descriptor();
  }
  static inline const ::std::string& P_ANS_Name(P_ANS value) {
    return play_ans_P_ANS_Name(value);
  }
  static inline bool P_ANS_Parse(const ::std::string& name,
      P_ANS* value) {
    return play_ans_P_ANS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.play_ans.P_ANS ans = 1;
  bool has_ans() const;
  void clear_ans();
  static const int kAnsFieldNumber = 1;
  ::channel_server::play_ans_P_ANS ans() const;
  void set_ans(::channel_server::play_ans_P_ANS value);

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 room_num = 3;
  bool has_room_num() const;
  void clear_room_num();
  static const int kRoomNumFieldNumber = 3;
  ::google::protobuf::int32 room_num() const;
  void set_room_num(::google::protobuf::int32 value);

  // optional bool yes = 4;
  bool has_yes() const;
  void clear_yes();
  static const int kYesFieldNumber = 4;
  bool yes() const;
  void set_yes(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.play_ans)
 private:
  inline void set_has_ans();
  inline void clear_has_ans();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_room_num();
  inline void clear_has_room_num();
  inline void set_has_yes();
  inline void clear_has_yes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  int ans_;
  ::google::protobuf::int32 room_num_;
  bool yes_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<play_ans> play_ans_default_instance_;

// -------------------------------------------------------------------

class join_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.join_ntf) */ {
 public:
  join_ntf();
  virtual ~join_ntf();

  join_ntf(const join_ntf& from);

  inline join_ntf& operator=(const join_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join_ntf& default_instance();

  static const join_ntf* internal_default_instance();

  void Swap(join_ntf* other);

  // implements Message ----------------------------------------------

  inline join_ntf* New() const { return New(NULL); }

  join_ntf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join_ntf& from);
  void MergeFrom(const join_ntf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(join_ntf* other);
  void UnsafeMergeFrom(const join_ntf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::int32 token() const;
  void set_token(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:channel_server.join_ntf)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 token_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<join_ntf> join_ntf_default_instance_;

// -------------------------------------------------------------------

class logout_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.logout_ntf) */ {
 public:
  logout_ntf();
  virtual ~logout_ntf();

  logout_ntf(const logout_ntf& from);

  inline logout_ntf& operator=(const logout_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_ntf& default_instance();

  static const logout_ntf* internal_default_instance();

  void Swap(logout_ntf* other);

  // implements Message ----------------------------------------------

  inline logout_ntf* New() const { return New(NULL); }

  logout_ntf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logout_ntf& from);
  void MergeFrom(const logout_ntf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(logout_ntf* other);
  void UnsafeMergeFrom(const logout_ntf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::int32 token() const;
  void set_token(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:channel_server.logout_ntf)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 token_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<logout_ntf> logout_ntf_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// freinds_req

// required .channel_server.freinds_req.F_REQ req = 1;
inline bool freinds_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void freinds_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void freinds_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void freinds_req::clear_req() {
  req_ = 0;
  clear_has_req();
}
inline ::channel_server::freinds_req_F_REQ freinds_req::req() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_req.req)
  return static_cast< ::channel_server::freinds_req_F_REQ >(req_);
}
inline void freinds_req::set_req(::channel_server::freinds_req_F_REQ value) {
  assert(::channel_server::freinds_req_F_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_req.req)
}

// required string user_id = 2;
inline bool freinds_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void freinds_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void freinds_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void freinds_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& freinds_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void freinds_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.freinds_req.user_id)
}
inline void freinds_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.freinds_req.user_id)
}
inline void freinds_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.freinds_req.user_id)
}
inline ::std::string* freinds_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* freinds_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.freinds_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void freinds_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.freinds_req.user_id)
}

inline const freinds_req* freinds_req::internal_default_instance() {
  return &freinds_req_default_instance_.get();
}
// -------------------------------------------------------------------

// freinds_ans_user_status

// required string user_id = 1;
inline bool freinds_ans_user_status::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void freinds_ans_user_status::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void freinds_ans_user_status::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void freinds_ans_user_status::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& freinds_ans_user_status::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void freinds_ans_user_status::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.user_id)
}
inline void freinds_ans_user_status::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.freinds_ans.user_status.user_id)
}
inline void freinds_ans_user_status::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.freinds_ans.user_status.user_id)
}
inline ::std::string* freinds_ans_user_status::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_ans.user_status.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* freinds_ans_user_status::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.freinds_ans.user_status.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void freinds_ans_user_status::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.freinds_ans.user_status.user_id)
}

// required .channel_server.freinds_ans.user_status.RATING rating = 2;
inline bool freinds_ans_user_status::has_rating() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void freinds_ans_user_status::set_has_rating() {
  _has_bits_[0] |= 0x00000002u;
}
inline void freinds_ans_user_status::clear_has_rating() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void freinds_ans_user_status::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline ::channel_server::freinds_ans_user_status_RATING freinds_ans_user_status::rating() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.rating)
  return static_cast< ::channel_server::freinds_ans_user_status_RATING >(rating_);
}
inline void freinds_ans_user_status::set_rating(::channel_server::freinds_ans_user_status_RATING value) {
  assert(::channel_server::freinds_ans_user_status_RATING_IsValid(value));
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.rating)
}

// required bool on = 3;
inline bool freinds_ans_user_status::has_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void freinds_ans_user_status::set_has_on() {
  _has_bits_[0] |= 0x00000004u;
}
inline void freinds_ans_user_status::clear_has_on() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void freinds_ans_user_status::clear_on() {
  on_ = false;
  clear_has_on();
}
inline bool freinds_ans_user_status::on() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user_status.on)
  return on_;
}
inline void freinds_ans_user_status::set_on(bool value) {
  set_has_on();
  on_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.user_status.on)
}

inline const freinds_ans_user_status* freinds_ans_user_status::internal_default_instance() {
  return &freinds_ans_user_status_default_instance_.get();
}
// -------------------------------------------------------------------

// freinds_ans

// required .channel_server.freinds_ans.F_ANS ans = 1;
inline bool freinds_ans::has_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void freinds_ans::set_has_ans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void freinds_ans::clear_has_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void freinds_ans::clear_ans() {
  ans_ = 0;
  clear_has_ans();
}
inline ::channel_server::freinds_ans_F_ANS freinds_ans::ans() const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.ans)
  return static_cast< ::channel_server::freinds_ans_F_ANS >(ans_);
}
inline void freinds_ans::set_ans(::channel_server::freinds_ans_F_ANS value) {
  assert(::channel_server::freinds_ans_F_ANS_IsValid(value));
  set_has_ans();
  ans_ = value;
  // @@protoc_insertion_point(field_set:channel_server.freinds_ans.ans)
}

// repeated .channel_server.freinds_ans.user_status user = 2;
inline int freinds_ans::user_size() const {
  return user_.size();
}
inline void freinds_ans::clear_user() {
  user_.Clear();
}
inline const ::channel_server::freinds_ans_user_status& freinds_ans::user(int index) const {
  // @@protoc_insertion_point(field_get:channel_server.freinds_ans.user)
  return user_.Get(index);
}
inline ::channel_server::freinds_ans_user_status* freinds_ans::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:channel_server.freinds_ans.user)
  return user_.Mutable(index);
}
inline ::channel_server::freinds_ans_user_status* freinds_ans::add_user() {
  // @@protoc_insertion_point(field_add:channel_server.freinds_ans.user)
  return user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >*
freinds_ans::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:channel_server.freinds_ans.user)
  return &user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channel_server::freinds_ans_user_status >&
freinds_ans::user() const {
  // @@protoc_insertion_point(field_list:channel_server.freinds_ans.user)
  return user_;
}

inline const freinds_ans* freinds_ans::internal_default_instance() {
  return &freinds_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// play_req

// required .channel_server.play_req.P_REQ req = 1;
inline bool play_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void play_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void play_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void play_req::clear_req() {
  req_ = 0;
  clear_has_req();
}
inline ::channel_server::play_req_P_REQ play_req::req() const {
  // @@protoc_insertion_point(field_get:channel_server.play_req.req)
  return static_cast< ::channel_server::play_req_P_REQ >(req_);
}
inline void play_req::set_req(::channel_server::play_req_P_REQ value) {
  assert(::channel_server::play_req_P_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_req.req)
}

// optional string user_id = 2;
inline bool play_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void play_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void play_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void play_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& play_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.play_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.play_req.user_id)
}
inline void play_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.play_req.user_id)
}
inline void play_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.play_req.user_id)
}
inline ::std::string* play_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.play_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* play_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.play_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.play_req.user_id)
}

inline const play_req* play_req::internal_default_instance() {
  return &play_req_default_instance_.get();
}
// -------------------------------------------------------------------

// play_ans

// required .channel_server.play_ans.P_ANS ans = 1;
inline bool play_ans::has_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void play_ans::set_has_ans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void play_ans::clear_has_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void play_ans::clear_ans() {
  ans_ = 0;
  clear_has_ans();
}
inline ::channel_server::play_ans_P_ANS play_ans::ans() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.ans)
  return static_cast< ::channel_server::play_ans_P_ANS >(ans_);
}
inline void play_ans::set_ans(::channel_server::play_ans_P_ANS value) {
  assert(::channel_server::play_ans_P_ANS_IsValid(value));
  set_has_ans();
  ans_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.ans)
}

// optional string user_id = 2;
inline bool play_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void play_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void play_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void play_ans::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& play_ans::user_id() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.play_ans.user_id)
}
inline void play_ans::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.play_ans.user_id)
}
inline void play_ans::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.play_ans.user_id)
}
inline ::std::string* play_ans::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_server.play_ans.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* play_ans::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_server.play_ans.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.play_ans.user_id)
}

// optional int32 room_num = 3;
inline bool play_ans::has_room_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void play_ans::set_has_room_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void play_ans::clear_has_room_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void play_ans::clear_room_num() {
  room_num_ = 0;
  clear_has_room_num();
}
inline ::google::protobuf::int32 play_ans::room_num() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.room_num)
  return room_num_;
}
inline void play_ans::set_room_num(::google::protobuf::int32 value) {
  set_has_room_num();
  room_num_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.room_num)
}

// optional bool yes = 4;
inline bool play_ans::has_yes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void play_ans::set_has_yes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void play_ans::clear_has_yes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void play_ans::clear_yes() {
  yes_ = false;
  clear_has_yes();
}
inline bool play_ans::yes() const {
  // @@protoc_insertion_point(field_get:channel_server.play_ans.yes)
  return yes_;
}
inline void play_ans::set_yes(bool value) {
  set_has_yes();
  yes_ = value;
  // @@protoc_insertion_point(field_set:channel_server.play_ans.yes)
}

inline const play_ans* play_ans::internal_default_instance() {
  return &play_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// join_ntf

// required int32 token = 1;
inline bool join_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join_ntf::clear_token() {
  token_ = 0;
  clear_has_token();
}
inline ::google::protobuf::int32 join_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_server.join_ntf.token)
  return token_;
}
inline void join_ntf::set_token(::google::protobuf::int32 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:channel_server.join_ntf.token)
}

inline const join_ntf* join_ntf::internal_default_instance() {
  return &join_ntf_default_instance_.get();
}
// -------------------------------------------------------------------

// logout_ntf

// required int32 token = 1;
inline bool logout_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logout_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logout_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logout_ntf::clear_token() {
  token_ = 0;
  clear_has_token();
}
inline ::google::protobuf::int32 logout_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_server.logout_ntf.token)
  return token_;
}
inline void logout_ntf::set_token(::google::protobuf::int32 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:channel_server.logout_ntf.token)
}

inline const logout_ntf* logout_ntf::internal_default_instance() {
  return &logout_ntf_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::channel_server::freinds_req_F_REQ> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::freinds_req_F_REQ>() {
  return ::channel_server::freinds_req_F_REQ_descriptor();
}
template <> struct is_proto_enum< ::channel_server::freinds_ans_user_status_RATING> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::freinds_ans_user_status_RATING>() {
  return ::channel_server::freinds_ans_user_status_RATING_descriptor();
}
template <> struct is_proto_enum< ::channel_server::freinds_ans_F_ANS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::freinds_ans_F_ANS>() {
  return ::channel_server::freinds_ans_F_ANS_descriptor();
}
template <> struct is_proto_enum< ::channel_server::play_req_P_REQ> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::play_req_P_REQ>() {
  return ::channel_server::play_req_P_REQ_descriptor();
}
template <> struct is_proto_enum< ::channel_server::play_ans_P_ANS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::play_ans_P_ANS>() {
  return ::channel_server::play_ans_P_ANS_descriptor();
}
template <> struct is_proto_enum< ::channel_server::MESSAGE_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::MESSAGE_ID>() {
  return ::channel_server::MESSAGE_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
