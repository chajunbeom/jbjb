// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace channel_serv {

namespace {

const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* join_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  join_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* join_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  join_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* logout_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logout_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* friends_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friends_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* friends_req_F_REQ_descriptor_ = NULL;
const ::google::protobuf::Descriptor* friends_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friends_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* play_rank_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  play_rank_game_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* play_friends_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  play_friends_game_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* play_friends_game_req_FLAG_descriptor_ = NULL;
const ::google::protobuf::Descriptor* matching_complete_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matching_complete_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* error_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  error_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RATING_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  user_info_descriptor_ = file->message_type(0);
  static const int user_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, battle_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_id_),
  };
  user_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_info_descriptor_,
      user_info::internal_default_instance(),
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_),
      -1,
      -1,
      sizeof(user_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _internal_metadata_));
  join_ans_descriptor_ = file->message_type(1);
  static const int join_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ans, my_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ans, friends_id_list_),
  };
  join_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      join_ans_descriptor_,
      join_ans::internal_default_instance(),
      join_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ans, _has_bits_),
      -1,
      -1,
      sizeof(join_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_ans, _internal_metadata_));
  join_req_descriptor_ = file->message_type(2);
  static const int join_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_req, token_),
  };
  join_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      join_req_descriptor_,
      join_req::internal_default_instance(),
      join_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_req, _has_bits_),
      -1,
      -1,
      sizeof(join_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_req, _internal_metadata_));
  logout_ntf_descriptor_ = file->message_type(3);
  static const int logout_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, token_),
  };
  logout_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      logout_ntf_descriptor_,
      logout_ntf::internal_default_instance(),
      logout_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, _has_bits_),
      -1,
      -1,
      sizeof(logout_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_ntf, _internal_metadata_));
  friends_req_descriptor_ = file->message_type(4);
  static const int friends_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_req, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_req, user_id_),
  };
  friends_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      friends_req_descriptor_,
      friends_req::internal_default_instance(),
      friends_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_req, _has_bits_),
      -1,
      -1,
      sizeof(friends_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_req, _internal_metadata_));
  friends_req_F_REQ_descriptor_ = friends_req_descriptor_->enum_type(0);
  friends_ans_descriptor_ = file->message_type(5);
  static const int friends_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_ans, user_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_ans, online_),
  };
  friends_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      friends_ans_descriptor_,
      friends_ans::internal_default_instance(),
      friends_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_ans, _has_bits_),
      -1,
      -1,
      sizeof(friends_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friends_ans, _internal_metadata_));
  play_rank_game_req_descriptor_ = file->message_type(6);
  static const int play_rank_game_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_rank_game_req, my_info_),
  };
  play_rank_game_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      play_rank_game_req_descriptor_,
      play_rank_game_req::internal_default_instance(),
      play_rank_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_rank_game_req, _has_bits_),
      -1,
      -1,
      sizeof(play_rank_game_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_rank_game_req, _internal_metadata_));
  play_friends_game_req_descriptor_ = file->message_type(7);
  static const int play_friends_game_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_friends_game_req, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_friends_game_req, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_friends_game_req, recv_id_),
  };
  play_friends_game_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      play_friends_game_req_descriptor_,
      play_friends_game_req::internal_default_instance(),
      play_friends_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_friends_game_req, _has_bits_),
      -1,
      -1,
      sizeof(play_friends_game_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(play_friends_game_req, _internal_metadata_));
  play_friends_game_req_FLAG_descriptor_ = play_friends_game_req_descriptor_->enum_type(0);
  matching_complete_ans_descriptor_ = file->message_type(8);
  static const int matching_complete_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matching_complete_ans, room_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matching_complete_ans, opponent_player_),
  };
  matching_complete_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      matching_complete_ans_descriptor_,
      matching_complete_ans::internal_default_instance(),
      matching_complete_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matching_complete_ans, _has_bits_),
      -1,
      -1,
      sizeof(matching_complete_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matching_complete_ans, _internal_metadata_));
  error_msg_descriptor_ = file->message_type(9);
  static const int error_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_msg, error_message_),
  };
  error_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      error_msg_descriptor_,
      error_msg::internal_default_instance(),
      error_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_msg, _has_bits_),
      -1,
      -1,
      sizeof(error_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_msg, _internal_metadata_));
  MESSAGE_ID_descriptor_ = file->enum_type(0);
  RATING_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_info_descriptor_, user_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      join_ans_descriptor_, join_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      join_req_descriptor_, join_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      logout_ntf_descriptor_, logout_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      friends_req_descriptor_, friends_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      friends_ans_descriptor_, friends_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      play_rank_game_req_descriptor_, play_rank_game_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      play_friends_game_req_descriptor_, play_friends_game_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      matching_complete_ans_descriptor_, matching_complete_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      error_msg_descriptor_, error_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  user_info_default_instance_.Shutdown();
  delete user_info_reflection_;
  join_ans_default_instance_.Shutdown();
  delete join_ans_reflection_;
  join_req_default_instance_.Shutdown();
  delete join_req_reflection_;
  logout_ntf_default_instance_.Shutdown();
  delete logout_ntf_reflection_;
  friends_req_default_instance_.Shutdown();
  delete friends_req_reflection_;
  friends_ans_default_instance_.Shutdown();
  delete friends_ans_reflection_;
  play_rank_game_req_default_instance_.Shutdown();
  delete play_rank_game_req_reflection_;
  play_friends_game_req_default_instance_.Shutdown();
  delete play_friends_game_req_reflection_;
  matching_complete_ans_default_instance_.Shutdown();
  delete matching_complete_ans_reflection_;
  error_msg_default_instance_.Shutdown();
  delete error_msg_reflection_;
}

void protobuf_InitDefaults_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  user_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  join_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  join_req_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  logout_ntf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  friends_req_default_instance_.DefaultConstruct();
  friends_ans_default_instance_.DefaultConstruct();
  play_rank_game_req_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  play_friends_game_req_default_instance_.DefaultConstruct();
  matching_complete_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  error_msg_default_instance_.DefaultConstruct();
  user_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  join_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  join_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  logout_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  friends_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  friends_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  play_rank_game_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  play_friends_game_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  matching_complete_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  error_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_packet_2eproto_once_);
void protobuf_InitDefaults_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_packet_2eproto_once_,
                 &protobuf_InitDefaults_packet_2eproto_impl);
}
void protobuf_AddDesc_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_packet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\014channel_serv\"u\n\tuser_inf"
    "o\022$\n\006rating\030\001 \002(\0162\024.channel_serv.RATING\022"
    "\026\n\016battle_history\030\002 \002(\005\022\013\n\003win\030\003 \002(\005\022\014\n\004"
    "lose\030\004 \002(\005\022\017\n\007user_id\030\005 \002(\t\"M\n\010join_ans\022"
    "(\n\007my_info\030\001 \002(\0132\027.channel_serv.user_inf"
    "o\022\027\n\017friends_id_list\030\002 \003(\t\"\031\n\010join_req\022\r"
    "\n\005token\030\001 \002(\t\"\033\n\nlogout_ntf\022\r\n\005token\030\001 \002"
    "(\t\"s\n\013friends_req\022,\n\003req\030\001 \002(\0162\037.channel"
    "_serv.friends_req.F_REQ\022\017\n\007user_id\030\002 \002(\t"
    "\"%\n\005F_REQ\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\022\n\n\006SEARCH\020\003\""
    "P\n\013friends_ans\0221\n\020user_information\030\001 \002(\013"
    "2\027.channel_serv.user_info\022\016\n\006online\030\002 \002("
    "\010\">\n\022play_rank_game_req\022(\n\007my_info\030\001 \002(\013"
    "2\027.channel_serv.user_info\"\235\001\n\025play_frien"
    "ds_game_req\0229\n\007flag_id\030\001 \002(\0162(.channel_s"
    "erv.play_friends_game_req.FLAG\022\017\n\007send_i"
    "d\030\002 \002(\t\022\017\n\007recv_id\030\003 \002(\t\"\'\n\004FLAG\022\t\n\005APPL"
    "Y\020\000\022\n\n\006ACCEPT\020\001\022\010\n\004DENY\020\002\"^\n\025matching_co"
    "mplete_ans\022\023\n\013room_number\030\001 \002(\005\0220\n\017oppon"
    "ent_player\030\002 \002(\0132\027.channel_serv.user_inf"
    "o\"\"\n\terror_msg\022\025\n\rerror_message\030\001 \002(\t*\246\001"
    "\n\nMESSAGE_ID\022\017\n\013FRIENDS_REQ\020\000\022\017\n\013FRIENDS"
    "_ANS\020\001\022\021\n\rPLAY_RANK_REQ\020\002\022\024\n\020PLAY_FRIEND"
    "S_REQ\020\003\022\022\n\016MATCH_COMPLETE\020\004\022\r\n\tERROR_MSG"
    "\020\005\022\014\n\010JOIN_REQ\020\006\022\014\n\010JOIN_ANS\020\007\022\016\n\nLOGOUT"
    "_NTF\020\010*[\n\006RATING\022\n\n\006BRONZE\020\000\022\n\n\006SLIVER\020\001"
    "\022\010\n\004GOLD\020\002\022\014\n\010PLATINUM\020\003\022\013\n\007DIAMOND\020\004\022\n\n"
    "\006MASTER\020\005\022\010\n\004CHAL\020\006", 1099);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_packet_2eproto_once_);
void protobuf_AddDesc_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_packet_2eproto_once_,
                 &protobuf_AddDesc_packet_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;
const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MESSAGE_ID_descriptor_;
}
bool MESSAGE_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RATING_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RATING_descriptor_;
}
bool RATING_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info::kRatingFieldNumber;
const int user_info::kBattleHistoryFieldNumber;
const int user_info::kWinFieldNumber;
const int user_info::kLoseFieldNumber;
const int user_info::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info::user_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.user_info)
}

void user_info::InitAsDefaultInstance() {
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.user_info)
}

void user_info::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rating_, 0, reinterpret_cast<char*>(&lose_) -
    reinterpret_cast<char*>(&rating_) + sizeof(lose_));
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:channel_serv.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<user_info> user_info_default_instance_;

user_info* user_info::New(::google::protobuf::Arena* arena) const {
  user_info* n = new user_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_info::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.user_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(user_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<user_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(rating_, lose_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.RATING rating = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_serv::RATING_IsValid(value)) {
            set_rating(static_cast< ::channel_serv::RATING >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battle_history;
        break;
      }

      // required int32 battle_history = 2;
      case 2: {
        if (tag == 16) {
         parse_battle_history:
          set_has_battle_history();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_history_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // required int32 win = 3;
      case 3: {
        if (tag == 24) {
         parse_win:
          set_has_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lose;
        break;
      }

      // required int32 lose = 4;
      case 4: {
        if (tag == 32) {
         parse_lose:
          set_has_lose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_id;
        break;
      }

      // required string user_id = 5;
      case 5: {
        if (tag == 42) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.user_info.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.user_info)
  // required .channel_serv.RATING rating = 1;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rating(), output);
  }

  // required int32 battle_history = 2;
  if (has_battle_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_history(), output);
  }

  // required int32 win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win(), output);
  }

  // required int32 lose = 4;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lose(), output);
  }

  // required string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.user_info.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.user_info)
}

::google::protobuf::uint8* user_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.user_info)
  // required .channel_serv.RATING rating = 1;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rating(), target);
  }

  // required int32 battle_history = 2;
  if (has_battle_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_history(), target);
  }

  // required int32 win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win(), target);
  }

  // required int32 lose = 4;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lose(), target);
  }

  // required string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.user_info.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.user_info)
  return target;
}

size_t user_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_serv.user_info)
  size_t total_size = 0;

  if (has_rating()) {
    // required .channel_serv.RATING rating = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rating());
  }

  if (has_battle_history()) {
    // required int32 battle_history = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_history());
  }

  if (has_win()) {
    // required int32 win = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  if (has_lose()) {
    // required int32 lose = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose());
  }

  if (has_user_id()) {
    // required string user_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  return total_size;
}
size_t user_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.user_info)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .channel_serv.RATING rating = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rating());

    // required int32 battle_history = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_history());

    // required int32 win = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());

    // required int32 lose = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose());

    // required string user_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.user_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.user_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.user_info)
    UnsafeMergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.user_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void user_info::UnsafeMergeFrom(const user_info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_battle_history()) {
      set_battle_history(from.battle_history());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.user_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void user_info::Swap(user_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info::InternalSwap(user_info* other) {
  std::swap(rating_, other->rating_);
  std::swap(battle_history_, other->battle_history_);
  std::swap(win_, other->win_);
  std::swap(lose_, other->lose_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info

// required .channel_serv.RATING rating = 1;
bool user_info::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void user_info::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
void user_info::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
void user_info::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
::channel_serv::RATING user_info::rating() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.rating)
  return static_cast< ::channel_serv::RATING >(rating_);
}
void user_info::set_rating(::channel_serv::RATING value) {
  assert(::channel_serv::RATING_IsValid(value));
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.rating)
}

// required int32 battle_history = 2;
bool user_info::has_battle_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void user_info::set_has_battle_history() {
  _has_bits_[0] |= 0x00000002u;
}
void user_info::clear_has_battle_history() {
  _has_bits_[0] &= ~0x00000002u;
}
void user_info::clear_battle_history() {
  battle_history_ = 0;
  clear_has_battle_history();
}
::google::protobuf::int32 user_info::battle_history() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.battle_history)
  return battle_history_;
}
void user_info::set_battle_history(::google::protobuf::int32 value) {
  set_has_battle_history();
  battle_history_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.battle_history)
}

// required int32 win = 3;
bool user_info::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void user_info::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
void user_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
void user_info::clear_win() {
  win_ = 0;
  clear_has_win();
}
::google::protobuf::int32 user_info::win() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.win)
  return win_;
}
void user_info::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.win)
}

// required int32 lose = 4;
bool user_info::has_lose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void user_info::set_has_lose() {
  _has_bits_[0] |= 0x00000008u;
}
void user_info::clear_has_lose() {
  _has_bits_[0] &= ~0x00000008u;
}
void user_info::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
::google::protobuf::int32 user_info::lose() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.lose)
  return lose_;
}
void user_info::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.lose)
}

// required string user_id = 5;
bool user_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void user_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void user_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void user_info::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& user_info::user_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_info::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.user_info.user_id)
}
void user_info::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.user_info.user_id)
}
void user_info::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.user_info.user_id)
}
::std::string* user_info::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.user_info.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_info::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_serv.user_info.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_info::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.user_info.user_id)
}

inline const user_info* user_info::internal_default_instance() {
  return &user_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int join_ans::kMyInfoFieldNumber;
const int join_ans::kFriendsIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

join_ans::join_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.join_ans)
}

void join_ans::InitAsDefaultInstance() {
  my_info_ = const_cast< ::channel_serv::user_info*>(
      ::channel_serv::user_info::internal_default_instance());
}

join_ans::join_ans(const join_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.join_ans)
}

void join_ans::SharedCtor() {
  _cached_size_ = 0;
  my_info_ = NULL;
}

join_ans::~join_ans() {
  // @@protoc_insertion_point(destructor:channel_serv.join_ans)
  SharedDtor();
}

void join_ans::SharedDtor() {
  if (this != &join_ans_default_instance_.get()) {
    delete my_info_;
  }
}

void join_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* join_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return join_ans_descriptor_;
}

const join_ans& join_ans::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<join_ans> join_ans_default_instance_;

join_ans* join_ans::New(::google::protobuf::Arena* arena) const {
  join_ans* n = new join_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void join_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.join_ans)
  if (has_my_info()) {
    if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  }
  friends_id_list_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool join_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.join_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.user_info my_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends_id_list;
        break;
      }

      // repeated string friends_id_list = 2;
      case 2: {
        if (tag == 18) {
         parse_friends_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends_id_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friends_id_list(this->friends_id_list_size() - 1).data(),
            this->friends_id_list(this->friends_id_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.join_ans.friends_id_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.join_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.join_ans)
  return false;
#undef DO_
}

void join_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.join_ans)
  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->my_info_, output);
  }

  // repeated string friends_id_list = 2;
  for (int i = 0; i < this->friends_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_id_list(i).data(), this->friends_id_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.join_ans.friends_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friends_id_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.join_ans)
}

::google::protobuf::uint8* join_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.join_ans)
  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->my_info_, false, target);
  }

  // repeated string friends_id_list = 2;
  for (int i = 0; i < this->friends_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_id_list(i).data(), this->friends_id_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.join_ans.friends_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->friends_id_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.join_ans)
  return target;
}

size_t join_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.join_ans)
  size_t total_size = 0;

  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->my_info_);
  }
  // repeated string friends_id_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->friends_id_list_size());
  for (int i = 0; i < this->friends_id_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_id_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void join_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.join_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const join_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const join_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.join_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.join_ans)
    UnsafeMergeFrom(*source);
  }
}

void join_ans::MergeFrom(const join_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.join_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void join_ans::UnsafeMergeFrom(const join_ans& from) {
  GOOGLE_DCHECK(&from != this);
  friends_id_list_.UnsafeMergeFrom(from.friends_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_info()) {
      mutable_my_info()->::channel_serv::user_info::MergeFrom(from.my_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void join_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.join_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_ans::CopyFrom(const join_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.join_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool join_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_my_info()) {
    if (!this->my_info_->IsInitialized()) return false;
  }
  return true;
}

void join_ans::Swap(join_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void join_ans::InternalSwap(join_ans* other) {
  std::swap(my_info_, other->my_info_);
  friends_id_list_.UnsafeArenaSwap(&other->friends_id_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata join_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = join_ans_descriptor_;
  metadata.reflection = join_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// join_ans

// required .channel_serv.user_info my_info = 1;
bool join_ans::has_my_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void join_ans::set_has_my_info() {
  _has_bits_[0] |= 0x00000001u;
}
void join_ans::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void join_ans::clear_my_info() {
  if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  clear_has_my_info();
}
const ::channel_serv::user_info& join_ans::my_info() const {
  // @@protoc_insertion_point(field_get:channel_serv.join_ans.my_info)
  return my_info_ != NULL ? *my_info_
                         : *::channel_serv::user_info::internal_default_instance();
}
::channel_serv::user_info* join_ans::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) {
    my_info_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.join_ans.my_info)
  return my_info_;
}
::channel_serv::user_info* join_ans::release_my_info() {
  // @@protoc_insertion_point(field_release:channel_serv.join_ans.my_info)
  clear_has_my_info();
  ::channel_serv::user_info* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
void join_ans::set_allocated_my_info(::channel_serv::user_info* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.join_ans.my_info)
}

// repeated string friends_id_list = 2;
int join_ans::friends_id_list_size() const {
  return friends_id_list_.size();
}
void join_ans::clear_friends_id_list() {
  friends_id_list_.Clear();
}
const ::std::string& join_ans::friends_id_list(int index) const {
  // @@protoc_insertion_point(field_get:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Get(index);
}
::std::string* join_ans::mutable_friends_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Mutable(index);
}
void join_ans::set_friends_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channel_serv.join_ans.friends_id_list)
  friends_id_list_.Mutable(index)->assign(value);
}
void join_ans::set_friends_id_list(int index, const char* value) {
  friends_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_serv.join_ans.friends_id_list)
}
void join_ans::set_friends_id_list(int index, const char* value, size_t size) {
  friends_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_serv.join_ans.friends_id_list)
}
::std::string* join_ans::add_friends_id_list() {
  // @@protoc_insertion_point(field_add_mutable:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Add();
}
void join_ans::add_friends_id_list(const ::std::string& value) {
  friends_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channel_serv.join_ans.friends_id_list)
}
void join_ans::add_friends_id_list(const char* value) {
  friends_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channel_serv.join_ans.friends_id_list)
}
void join_ans::add_friends_id_list(const char* value, size_t size) {
  friends_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channel_serv.join_ans.friends_id_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
join_ans::friends_id_list() const {
  // @@protoc_insertion_point(field_list:channel_serv.join_ans.friends_id_list)
  return friends_id_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
join_ans::mutable_friends_id_list() {
  // @@protoc_insertion_point(field_mutable_list:channel_serv.join_ans.friends_id_list)
  return &friends_id_list_;
}

inline const join_ans* join_ans::internal_default_instance() {
  return &join_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int join_req::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

join_req::join_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.join_req)
}

void join_req::InitAsDefaultInstance() {
}

join_req::join_req(const join_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.join_req)
}

void join_req::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

join_req::~join_req() {
  // @@protoc_insertion_point(destructor:channel_serv.join_req)
  SharedDtor();
}

void join_req::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void join_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* join_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return join_req_descriptor_;
}

const join_req& join_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<join_req> join_req_default_instance_;

join_req* join_req::New(::google::protobuf::Arena* arena) const {
  join_req* n = new join_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void join_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.join_req)
  if (has_token()) {
    token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool join_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.join_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.join_req.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.join_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.join_req)
  return false;
#undef DO_
}

void join_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.join_req)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.join_req.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.join_req)
}

::google::protobuf::uint8* join_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.join_req)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.join_req.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.join_req)
  return target;
}

size_t join_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.join_req)
  size_t total_size = 0;

  // required string token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void join_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.join_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const join_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const join_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.join_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.join_req)
    UnsafeMergeFrom(*source);
  }
}

void join_req::MergeFrom(const join_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.join_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void join_req::UnsafeMergeFrom(const join_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void join_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.join_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_req::CopyFrom(const join_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.join_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool join_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void join_req::Swap(join_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void join_req::InternalSwap(join_req* other) {
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata join_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = join_req_descriptor_;
  metadata.reflection = join_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// join_req

// required string token = 1;
bool join_req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void join_req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void join_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void join_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& join_req::token() const {
  // @@protoc_insertion_point(field_get:channel_serv.join_req.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void join_req::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.join_req.token)
}
void join_req::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.join_req.token)
}
void join_req::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.join_req.token)
}
::std::string* join_req::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_serv.join_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* join_req::release_token() {
  // @@protoc_insertion_point(field_release:channel_serv.join_req.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void join_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.join_req.token)
}

inline const join_req* join_req::internal_default_instance() {
  return &join_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logout_ntf::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout_ntf::logout_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.logout_ntf)
}

void logout_ntf::InitAsDefaultInstance() {
}

logout_ntf::logout_ntf(const logout_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.logout_ntf)
}

void logout_ntf::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

logout_ntf::~logout_ntf() {
  // @@protoc_insertion_point(destructor:channel_serv.logout_ntf)
  SharedDtor();
}

void logout_ntf::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void logout_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logout_ntf_descriptor_;
}

const logout_ntf& logout_ntf::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<logout_ntf> logout_ntf_default_instance_;

logout_ntf* logout_ntf::New(::google::protobuf::Arena* arena) const {
  logout_ntf* n = new logout_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void logout_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.logout_ntf)
  if (has_token()) {
    token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool logout_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.logout_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.logout_ntf.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.logout_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.logout_ntf)
  return false;
#undef DO_
}

void logout_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.logout_ntf)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.logout_ntf.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.logout_ntf)
}

::google::protobuf::uint8* logout_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.logout_ntf)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.logout_ntf.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.logout_ntf)
  return target;
}

size_t logout_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.logout_ntf)
  size_t total_size = 0;

  // required string token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.logout_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const logout_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logout_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.logout_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.logout_ntf)
    UnsafeMergeFrom(*source);
  }
}

void logout_ntf::MergeFrom(const logout_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.logout_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void logout_ntf::UnsafeMergeFrom(const logout_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void logout_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.logout_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_ntf::CopyFrom(const logout_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.logout_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool logout_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void logout_ntf::Swap(logout_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout_ntf::InternalSwap(logout_ntf* other) {
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata logout_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logout_ntf_descriptor_;
  metadata.reflection = logout_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// logout_ntf

// required string token = 1;
bool logout_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void logout_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void logout_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void logout_ntf::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& logout_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_serv.logout_ntf.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void logout_ntf::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.logout_ntf.token)
}
void logout_ntf::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.logout_ntf.token)
}
void logout_ntf::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.logout_ntf.token)
}
::std::string* logout_ntf::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_serv.logout_ntf.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* logout_ntf::release_token() {
  // @@protoc_insertion_point(field_release:channel_serv.logout_ntf.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void logout_ntf::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.logout_ntf.token)
}

inline const logout_ntf* logout_ntf::internal_default_instance() {
  return &logout_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* friends_req_F_REQ_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friends_req_F_REQ_descriptor_;
}
bool friends_req_F_REQ_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const friends_req_F_REQ friends_req::ADD;
const friends_req_F_REQ friends_req::DEL;
const friends_req_F_REQ friends_req::SEARCH;
const friends_req_F_REQ friends_req::F_REQ_MIN;
const friends_req_F_REQ friends_req::F_REQ_MAX;
const int friends_req::F_REQ_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int friends_req::kReqFieldNumber;
const int friends_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

friends_req::friends_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.friends_req)
}

void friends_req::InitAsDefaultInstance() {
}

friends_req::friends_req(const friends_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.friends_req)
}

void friends_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_ = 1;
}

friends_req::~friends_req() {
  // @@protoc_insertion_point(destructor:channel_serv.friends_req)
  SharedDtor();
}

void friends_req::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void friends_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friends_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friends_req_descriptor_;
}

const friends_req& friends_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<friends_req> friends_req_default_instance_;

friends_req* friends_req::New(::google::protobuf::Arena* arena) const {
  friends_req* n = new friends_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void friends_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.friends_req)
  if (_has_bits_[0 / 32] & 3u) {
    req_ = 1;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool friends_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.friends_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.friends_req.F_REQ req = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_serv::friends_req_F_REQ_IsValid(value)) {
            set_req(static_cast< ::channel_serv::friends_req_F_REQ >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.friends_req.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.friends_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.friends_req)
  return false;
#undef DO_
}

void friends_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.friends_req)
  // required .channel_serv.friends_req.F_REQ req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.friends_req.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.friends_req)
}

::google::protobuf::uint8* friends_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.friends_req)
  // required .channel_serv.friends_req.F_REQ req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req(), target);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.friends_req.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.friends_req)
  return target;
}

size_t friends_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_serv.friends_req)
  size_t total_size = 0;

  if (has_req()) {
    // required .channel_serv.friends_req.F_REQ req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());
  }

  if (has_user_id()) {
    // required string user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  return total_size;
}
size_t friends_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.friends_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_serv.friends_req.F_REQ req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());

    // required string user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friends_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.friends_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const friends_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const friends_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.friends_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.friends_req)
    UnsafeMergeFrom(*source);
  }
}

void friends_req::MergeFrom(const friends_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.friends_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void friends_req::UnsafeMergeFrom(const friends_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void friends_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.friends_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friends_req::CopyFrom(const friends_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.friends_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool friends_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friends_req::Swap(friends_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void friends_req::InternalSwap(friends_req* other) {
  std::swap(req_, other->req_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata friends_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friends_req_descriptor_;
  metadata.reflection = friends_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// friends_req

// required .channel_serv.friends_req.F_REQ req = 1;
bool friends_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void friends_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
void friends_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
void friends_req::clear_req() {
  req_ = 1;
  clear_has_req();
}
::channel_serv::friends_req_F_REQ friends_req::req() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_req.req)
  return static_cast< ::channel_serv::friends_req_F_REQ >(req_);
}
void friends_req::set_req(::channel_serv::friends_req_F_REQ value) {
  assert(::channel_serv::friends_req_F_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.friends_req.req)
}

// required string user_id = 2;
bool friends_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void friends_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void friends_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void friends_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& friends_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friends_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.friends_req.user_id)
}
void friends_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.friends_req.user_id)
}
void friends_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.friends_req.user_id)
}
::std::string* friends_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.friends_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friends_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_serv.friends_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friends_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.friends_req.user_id)
}

inline const friends_req* friends_req::internal_default_instance() {
  return &friends_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int friends_ans::kUserInformationFieldNumber;
const int friends_ans::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

friends_ans::friends_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.friends_ans)
}

void friends_ans::InitAsDefaultInstance() {
  user_information_ = const_cast< ::channel_serv::user_info*>(
      ::channel_serv::user_info::internal_default_instance());
}

friends_ans::friends_ans(const friends_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.friends_ans)
}

void friends_ans::SharedCtor() {
  _cached_size_ = 0;
  user_information_ = NULL;
  online_ = false;
}

friends_ans::~friends_ans() {
  // @@protoc_insertion_point(destructor:channel_serv.friends_ans)
  SharedDtor();
}

void friends_ans::SharedDtor() {
  if (this != &friends_ans_default_instance_.get()) {
    delete user_information_;
  }
}

void friends_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friends_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friends_ans_descriptor_;
}

const friends_ans& friends_ans::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<friends_ans> friends_ans_default_instance_;

friends_ans* friends_ans::New(::google::protobuf::Arena* arena) const {
  friends_ans* n = new friends_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void friends_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.friends_ans)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_information()) {
      if (user_information_ != NULL) user_information_->::channel_serv::user_info::Clear();
    }
    online_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool friends_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.friends_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.user_info user_information = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_information()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // required bool online = 2;
      case 2: {
        if (tag == 16) {
         parse_online:
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.friends_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.friends_ans)
  return false;
#undef DO_
}

void friends_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.friends_ans)
  // required .channel_serv.user_info user_information = 1;
  if (has_user_information()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_information_, output);
  }

  // required bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.friends_ans)
}

::google::protobuf::uint8* friends_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.friends_ans)
  // required .channel_serv.user_info user_information = 1;
  if (has_user_information()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_information_, false, target);
  }

  // required bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.friends_ans)
  return target;
}

size_t friends_ans::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_serv.friends_ans)
  size_t total_size = 0;

  if (has_user_information()) {
    // required .channel_serv.user_info user_information = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_information_);
  }

  if (has_online()) {
    // required bool online = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t friends_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.friends_ans)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_serv.user_info user_information = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_information_);

    // required bool online = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friends_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.friends_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const friends_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const friends_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.friends_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.friends_ans)
    UnsafeMergeFrom(*source);
  }
}

void friends_ans::MergeFrom(const friends_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.friends_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void friends_ans::UnsafeMergeFrom(const friends_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_information()) {
      mutable_user_information()->::channel_serv::user_info::MergeFrom(from.user_information());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void friends_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.friends_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friends_ans::CopyFrom(const friends_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.friends_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool friends_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_information()) {
    if (!this->user_information_->IsInitialized()) return false;
  }
  return true;
}

void friends_ans::Swap(friends_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void friends_ans::InternalSwap(friends_ans* other) {
  std::swap(user_information_, other->user_information_);
  std::swap(online_, other->online_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata friends_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friends_ans_descriptor_;
  metadata.reflection = friends_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// friends_ans

// required .channel_serv.user_info user_information = 1;
bool friends_ans::has_user_information() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void friends_ans::set_has_user_information() {
  _has_bits_[0] |= 0x00000001u;
}
void friends_ans::clear_has_user_information() {
  _has_bits_[0] &= ~0x00000001u;
}
void friends_ans::clear_user_information() {
  if (user_information_ != NULL) user_information_->::channel_serv::user_info::Clear();
  clear_has_user_information();
}
const ::channel_serv::user_info& friends_ans::user_information() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_ans.user_information)
  return user_information_ != NULL ? *user_information_
                         : *::channel_serv::user_info::internal_default_instance();
}
::channel_serv::user_info* friends_ans::mutable_user_information() {
  set_has_user_information();
  if (user_information_ == NULL) {
    user_information_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.friends_ans.user_information)
  return user_information_;
}
::channel_serv::user_info* friends_ans::release_user_information() {
  // @@protoc_insertion_point(field_release:channel_serv.friends_ans.user_information)
  clear_has_user_information();
  ::channel_serv::user_info* temp = user_information_;
  user_information_ = NULL;
  return temp;
}
void friends_ans::set_allocated_user_information(::channel_serv::user_info* user_information) {
  delete user_information_;
  user_information_ = user_information;
  if (user_information) {
    set_has_user_information();
  } else {
    clear_has_user_information();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.friends_ans.user_information)
}

// required bool online = 2;
bool friends_ans::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void friends_ans::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
void friends_ans::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
void friends_ans::clear_online() {
  online_ = false;
  clear_has_online();
}
bool friends_ans::online() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_ans.online)
  return online_;
}
void friends_ans::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.friends_ans.online)
}

inline const friends_ans* friends_ans::internal_default_instance() {
  return &friends_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play_rank_game_req::kMyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play_rank_game_req::play_rank_game_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.play_rank_game_req)
}

void play_rank_game_req::InitAsDefaultInstance() {
  my_info_ = const_cast< ::channel_serv::user_info*>(
      ::channel_serv::user_info::internal_default_instance());
}

play_rank_game_req::play_rank_game_req(const play_rank_game_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.play_rank_game_req)
}

void play_rank_game_req::SharedCtor() {
  _cached_size_ = 0;
  my_info_ = NULL;
}

play_rank_game_req::~play_rank_game_req() {
  // @@protoc_insertion_point(destructor:channel_serv.play_rank_game_req)
  SharedDtor();
}

void play_rank_game_req::SharedDtor() {
  if (this != &play_rank_game_req_default_instance_.get()) {
    delete my_info_;
  }
}

void play_rank_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* play_rank_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_rank_game_req_descriptor_;
}

const play_rank_game_req& play_rank_game_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<play_rank_game_req> play_rank_game_req_default_instance_;

play_rank_game_req* play_rank_game_req::New(::google::protobuf::Arena* arena) const {
  play_rank_game_req* n = new play_rank_game_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void play_rank_game_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.play_rank_game_req)
  if (has_my_info()) {
    if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool play_rank_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.play_rank_game_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.user_info my_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.play_rank_game_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.play_rank_game_req)
  return false;
#undef DO_
}

void play_rank_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.play_rank_game_req)
  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->my_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.play_rank_game_req)
}

::google::protobuf::uint8* play_rank_game_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.play_rank_game_req)
  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->my_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.play_rank_game_req)
  return target;
}

size_t play_rank_game_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.play_rank_game_req)
  size_t total_size = 0;

  // required .channel_serv.user_info my_info = 1;
  if (has_my_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->my_info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void play_rank_game_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.play_rank_game_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const play_rank_game_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const play_rank_game_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.play_rank_game_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.play_rank_game_req)
    UnsafeMergeFrom(*source);
  }
}

void play_rank_game_req::MergeFrom(const play_rank_game_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.play_rank_game_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void play_rank_game_req::UnsafeMergeFrom(const play_rank_game_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_info()) {
      mutable_my_info()->::channel_serv::user_info::MergeFrom(from.my_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void play_rank_game_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.play_rank_game_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_rank_game_req::CopyFrom(const play_rank_game_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.play_rank_game_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool play_rank_game_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_my_info()) {
    if (!this->my_info_->IsInitialized()) return false;
  }
  return true;
}

void play_rank_game_req::Swap(play_rank_game_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play_rank_game_req::InternalSwap(play_rank_game_req* other) {
  std::swap(my_info_, other->my_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata play_rank_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = play_rank_game_req_descriptor_;
  metadata.reflection = play_rank_game_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// play_rank_game_req

// required .channel_serv.user_info my_info = 1;
bool play_rank_game_req::has_my_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void play_rank_game_req::set_has_my_info() {
  _has_bits_[0] |= 0x00000001u;
}
void play_rank_game_req::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void play_rank_game_req::clear_my_info() {
  if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  clear_has_my_info();
}
const ::channel_serv::user_info& play_rank_game_req::my_info() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_rank_game_req.my_info)
  return my_info_ != NULL ? *my_info_
                         : *::channel_serv::user_info::internal_default_instance();
}
::channel_serv::user_info* play_rank_game_req::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) {
    my_info_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.play_rank_game_req.my_info)
  return my_info_;
}
::channel_serv::user_info* play_rank_game_req::release_my_info() {
  // @@protoc_insertion_point(field_release:channel_serv.play_rank_game_req.my_info)
  clear_has_my_info();
  ::channel_serv::user_info* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
void play_rank_game_req::set_allocated_my_info(::channel_serv::user_info* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.play_rank_game_req.my_info)
}

inline const play_rank_game_req* play_rank_game_req::internal_default_instance() {
  return &play_rank_game_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* play_friends_game_req_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_friends_game_req_FLAG_descriptor_;
}
bool play_friends_game_req_FLAG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const play_friends_game_req_FLAG play_friends_game_req::APPLY;
const play_friends_game_req_FLAG play_friends_game_req::ACCEPT;
const play_friends_game_req_FLAG play_friends_game_req::DENY;
const play_friends_game_req_FLAG play_friends_game_req::FLAG_MIN;
const play_friends_game_req_FLAG play_friends_game_req::FLAG_MAX;
const int play_friends_game_req::FLAG_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play_friends_game_req::kFlagIdFieldNumber;
const int play_friends_game_req::kSendIdFieldNumber;
const int play_friends_game_req::kRecvIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play_friends_game_req::play_friends_game_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.play_friends_game_req)
}

void play_friends_game_req::InitAsDefaultInstance() {
}

play_friends_game_req::play_friends_game_req(const play_friends_game_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.play_friends_game_req)
}

void play_friends_game_req::SharedCtor() {
  _cached_size_ = 0;
  send_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_id_ = 0;
}

play_friends_game_req::~play_friends_game_req() {
  // @@protoc_insertion_point(destructor:channel_serv.play_friends_game_req)
  SharedDtor();
}

void play_friends_game_req::SharedDtor() {
  send_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void play_friends_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* play_friends_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return play_friends_game_req_descriptor_;
}

const play_friends_game_req& play_friends_game_req::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<play_friends_game_req> play_friends_game_req_default_instance_;

play_friends_game_req* play_friends_game_req::New(::google::protobuf::Arena* arena) const {
  play_friends_game_req* n = new play_friends_game_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void play_friends_game_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.play_friends_game_req)
  if (_has_bits_[0 / 32] & 7u) {
    flag_id_ = 0;
    if (has_send_id()) {
      send_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_recv_id()) {
      recv_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool play_friends_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.play_friends_game_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_serv::play_friends_game_req_FLAG_IsValid(value)) {
            set_flag_id(static_cast< ::channel_serv::play_friends_game_req_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_send_id;
        break;
      }

      // required string send_id = 2;
      case 2: {
        if (tag == 18) {
         parse_send_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->send_id().data(), this->send_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.play_friends_game_req.send_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recv_id;
        break;
      }

      // required string recv_id = 3;
      case 3: {
        if (tag == 26) {
         parse_recv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recv_id().data(), this->recv_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.play_friends_game_req.recv_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.play_friends_game_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.play_friends_game_req)
  return false;
#undef DO_
}

void play_friends_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.play_friends_game_req)
  // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag_id(), output);
  }

  // required string send_id = 2;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_id().data(), this->send_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.play_friends_game_req.send_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->send_id(), output);
  }

  // required string recv_id = 3;
  if (has_recv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recv_id().data(), this->recv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.play_friends_game_req.recv_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->recv_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.play_friends_game_req)
}

::google::protobuf::uint8* play_friends_game_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.play_friends_game_req)
  // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flag_id(), target);
  }

  // required string send_id = 2;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_id().data(), this->send_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.play_friends_game_req.send_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->send_id(), target);
  }

  // required string recv_id = 3;
  if (has_recv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recv_id().data(), this->recv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.play_friends_game_req.recv_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recv_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.play_friends_game_req)
  return target;
}

size_t play_friends_game_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_serv.play_friends_game_req)
  size_t total_size = 0;

  if (has_flag_id()) {
    // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag_id());
  }

  if (has_send_id()) {
    // required string send_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_id());
  }

  if (has_recv_id()) {
    // required string recv_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_id());
  }

  return total_size;
}
size_t play_friends_game_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.play_friends_game_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag_id());

    // required string send_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_id());

    // required string recv_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void play_friends_game_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.play_friends_game_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const play_friends_game_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const play_friends_game_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.play_friends_game_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.play_friends_game_req)
    UnsafeMergeFrom(*source);
  }
}

void play_friends_game_req::MergeFrom(const play_friends_game_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.play_friends_game_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void play_friends_game_req::UnsafeMergeFrom(const play_friends_game_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_send_id()) {
      set_has_send_id();
      send_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_id_);
    }
    if (from.has_recv_id()) {
      set_has_recv_id();
      recv_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void play_friends_game_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.play_friends_game_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_friends_game_req::CopyFrom(const play_friends_game_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.play_friends_game_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool play_friends_game_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void play_friends_game_req::Swap(play_friends_game_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play_friends_game_req::InternalSwap(play_friends_game_req* other) {
  std::swap(flag_id_, other->flag_id_);
  send_id_.Swap(&other->send_id_);
  recv_id_.Swap(&other->recv_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata play_friends_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = play_friends_game_req_descriptor_;
  metadata.reflection = play_friends_game_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// play_friends_game_req

// required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
bool play_friends_game_req::has_flag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void play_friends_game_req::set_has_flag_id() {
  _has_bits_[0] |= 0x00000001u;
}
void play_friends_game_req::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void play_friends_game_req::clear_flag_id() {
  flag_id_ = 0;
  clear_has_flag_id();
}
::channel_serv::play_friends_game_req_FLAG play_friends_game_req::flag_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_friends_game_req.flag_id)
  return static_cast< ::channel_serv::play_friends_game_req_FLAG >(flag_id_);
}
void play_friends_game_req::set_flag_id(::channel_serv::play_friends_game_req_FLAG value) {
  assert(::channel_serv::play_friends_game_req_FLAG_IsValid(value));
  set_has_flag_id();
  flag_id_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.play_friends_game_req.flag_id)
}

// required string send_id = 2;
bool play_friends_game_req::has_send_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void play_friends_game_req::set_has_send_id() {
  _has_bits_[0] |= 0x00000002u;
}
void play_friends_game_req::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void play_friends_game_req::clear_send_id() {
  send_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_id();
}
const ::std::string& play_friends_game_req::send_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_friends_game_req.send_id)
  return send_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_friends_game_req::set_send_id(const ::std::string& value) {
  set_has_send_id();
  send_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.play_friends_game_req.send_id)
}
void play_friends_game_req::set_send_id(const char* value) {
  set_has_send_id();
  send_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.play_friends_game_req.send_id)
}
void play_friends_game_req::set_send_id(const char* value, size_t size) {
  set_has_send_id();
  send_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.play_friends_game_req.send_id)
}
::std::string* play_friends_game_req::mutable_send_id() {
  set_has_send_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.play_friends_game_req.send_id)
  return send_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* play_friends_game_req::release_send_id() {
  // @@protoc_insertion_point(field_release:channel_serv.play_friends_game_req.send_id)
  clear_has_send_id();
  return send_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_friends_game_req::set_allocated_send_id(::std::string* send_id) {
  if (send_id != NULL) {
    set_has_send_id();
  } else {
    clear_has_send_id();
  }
  send_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.play_friends_game_req.send_id)
}

// required string recv_id = 3;
bool play_friends_game_req::has_recv_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void play_friends_game_req::set_has_recv_id() {
  _has_bits_[0] |= 0x00000004u;
}
void play_friends_game_req::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void play_friends_game_req::clear_recv_id() {
  recv_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_id();
}
const ::std::string& play_friends_game_req::recv_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_friends_game_req.recv_id)
  return recv_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_friends_game_req::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.play_friends_game_req.recv_id)
}
void play_friends_game_req::set_recv_id(const char* value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.play_friends_game_req.recv_id)
}
void play_friends_game_req::set_recv_id(const char* value, size_t size) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.play_friends_game_req.recv_id)
}
::std::string* play_friends_game_req::mutable_recv_id() {
  set_has_recv_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.play_friends_game_req.recv_id)
  return recv_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* play_friends_game_req::release_recv_id() {
  // @@protoc_insertion_point(field_release:channel_serv.play_friends_game_req.recv_id)
  clear_has_recv_id();
  return recv_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void play_friends_game_req::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id != NULL) {
    set_has_recv_id();
  } else {
    clear_has_recv_id();
  }
  recv_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.play_friends_game_req.recv_id)
}

inline const play_friends_game_req* play_friends_game_req::internal_default_instance() {
  return &play_friends_game_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matching_complete_ans::kRoomNumberFieldNumber;
const int matching_complete_ans::kOpponentPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matching_complete_ans::matching_complete_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.matching_complete_ans)
}

void matching_complete_ans::InitAsDefaultInstance() {
  opponent_player_ = const_cast< ::channel_serv::user_info*>(
      ::channel_serv::user_info::internal_default_instance());
}

matching_complete_ans::matching_complete_ans(const matching_complete_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.matching_complete_ans)
}

void matching_complete_ans::SharedCtor() {
  _cached_size_ = 0;
  opponent_player_ = NULL;
  room_number_ = 0;
}

matching_complete_ans::~matching_complete_ans() {
  // @@protoc_insertion_point(destructor:channel_serv.matching_complete_ans)
  SharedDtor();
}

void matching_complete_ans::SharedDtor() {
  if (this != &matching_complete_ans_default_instance_.get()) {
    delete opponent_player_;
  }
}

void matching_complete_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matching_complete_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matching_complete_ans_descriptor_;
}

const matching_complete_ans& matching_complete_ans::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<matching_complete_ans> matching_complete_ans_default_instance_;

matching_complete_ans* matching_complete_ans::New(::google::protobuf::Arena* arena) const {
  matching_complete_ans* n = new matching_complete_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void matching_complete_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.matching_complete_ans)
  if (_has_bits_[0 / 32] & 3u) {
    room_number_ = 0;
    if (has_opponent_player()) {
      if (opponent_player_ != NULL) opponent_player_->::channel_serv::user_info::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool matching_complete_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.matching_complete_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_number = 1;
      case 1: {
        if (tag == 8) {
          set_has_room_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opponent_player;
        break;
      }

      // required .channel_serv.user_info opponent_player = 2;
      case 2: {
        if (tag == 18) {
         parse_opponent_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.matching_complete_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.matching_complete_ans)
  return false;
#undef DO_
}

void matching_complete_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.matching_complete_ans)
  // required int32 room_number = 1;
  if (has_room_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_number(), output);
  }

  // required .channel_serv.user_info opponent_player = 2;
  if (has_opponent_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->opponent_player_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.matching_complete_ans)
}

::google::protobuf::uint8* matching_complete_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.matching_complete_ans)
  // required int32 room_number = 1;
  if (has_room_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_number(), target);
  }

  // required .channel_serv.user_info opponent_player = 2;
  if (has_opponent_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->opponent_player_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.matching_complete_ans)
  return target;
}

size_t matching_complete_ans::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_serv.matching_complete_ans)
  size_t total_size = 0;

  if (has_room_number()) {
    // required int32 room_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_number());
  }

  if (has_opponent_player()) {
    // required .channel_serv.user_info opponent_player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->opponent_player_);
  }

  return total_size;
}
size_t matching_complete_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.matching_complete_ans)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 room_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_number());

    // required .channel_serv.user_info opponent_player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->opponent_player_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matching_complete_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.matching_complete_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const matching_complete_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const matching_complete_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.matching_complete_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.matching_complete_ans)
    UnsafeMergeFrom(*source);
  }
}

void matching_complete_ans::MergeFrom(const matching_complete_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.matching_complete_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void matching_complete_ans::UnsafeMergeFrom(const matching_complete_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_number()) {
      set_room_number(from.room_number());
    }
    if (from.has_opponent_player()) {
      mutable_opponent_player()->::channel_serv::user_info::MergeFrom(from.opponent_player());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void matching_complete_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.matching_complete_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matching_complete_ans::CopyFrom(const matching_complete_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.matching_complete_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool matching_complete_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_opponent_player()) {
    if (!this->opponent_player_->IsInitialized()) return false;
  }
  return true;
}

void matching_complete_ans::Swap(matching_complete_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matching_complete_ans::InternalSwap(matching_complete_ans* other) {
  std::swap(room_number_, other->room_number_);
  std::swap(opponent_player_, other->opponent_player_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata matching_complete_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matching_complete_ans_descriptor_;
  metadata.reflection = matching_complete_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// matching_complete_ans

// required int32 room_number = 1;
bool matching_complete_ans::has_room_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void matching_complete_ans::set_has_room_number() {
  _has_bits_[0] |= 0x00000001u;
}
void matching_complete_ans::clear_has_room_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void matching_complete_ans::clear_room_number() {
  room_number_ = 0;
  clear_has_room_number();
}
::google::protobuf::int32 matching_complete_ans::room_number() const {
  // @@protoc_insertion_point(field_get:channel_serv.matching_complete_ans.room_number)
  return room_number_;
}
void matching_complete_ans::set_room_number(::google::protobuf::int32 value) {
  set_has_room_number();
  room_number_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.matching_complete_ans.room_number)
}

// required .channel_serv.user_info opponent_player = 2;
bool matching_complete_ans::has_opponent_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void matching_complete_ans::set_has_opponent_player() {
  _has_bits_[0] |= 0x00000002u;
}
void matching_complete_ans::clear_has_opponent_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void matching_complete_ans::clear_opponent_player() {
  if (opponent_player_ != NULL) opponent_player_->::channel_serv::user_info::Clear();
  clear_has_opponent_player();
}
const ::channel_serv::user_info& matching_complete_ans::opponent_player() const {
  // @@protoc_insertion_point(field_get:channel_serv.matching_complete_ans.opponent_player)
  return opponent_player_ != NULL ? *opponent_player_
                         : *::channel_serv::user_info::internal_default_instance();
}
::channel_serv::user_info* matching_complete_ans::mutable_opponent_player() {
  set_has_opponent_player();
  if (opponent_player_ == NULL) {
    opponent_player_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.matching_complete_ans.opponent_player)
  return opponent_player_;
}
::channel_serv::user_info* matching_complete_ans::release_opponent_player() {
  // @@protoc_insertion_point(field_release:channel_serv.matching_complete_ans.opponent_player)
  clear_has_opponent_player();
  ::channel_serv::user_info* temp = opponent_player_;
  opponent_player_ = NULL;
  return temp;
}
void matching_complete_ans::set_allocated_opponent_player(::channel_serv::user_info* opponent_player) {
  delete opponent_player_;
  opponent_player_ = opponent_player;
  if (opponent_player) {
    set_has_opponent_player();
  } else {
    clear_has_opponent_player();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.matching_complete_ans.opponent_player)
}

inline const matching_complete_ans* matching_complete_ans::internal_default_instance() {
  return &matching_complete_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error_msg::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error_msg::error_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_serv.error_msg)
}

void error_msg::InitAsDefaultInstance() {
}

error_msg::error_msg(const error_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_serv.error_msg)
}

void error_msg::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

error_msg::~error_msg() {
  // @@protoc_insertion_point(destructor:channel_serv.error_msg)
  SharedDtor();
}

void error_msg::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return error_msg_descriptor_;
}

const error_msg& error_msg::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<error_msg> error_msg_default_instance_;

error_msg* error_msg::New(::google::protobuf::Arena* arena) const {
  error_msg* n = new error_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_serv.error_msg)
  if (has_error_message()) {
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool error_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_serv.error_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_serv.error_msg.error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_serv.error_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_serv.error_msg)
  return false;
#undef DO_
}

void error_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_serv.error_msg)
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.error_msg.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_serv.error_msg)
}

::google::protobuf::uint8* error_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_serv.error_msg)
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_serv.error_msg.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_serv.error_msg)
  return target;
}

size_t error_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_serv.error_msg)
  size_t total_size = 0;

  // required string error_message = 1;
  if (has_error_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_serv.error_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const error_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_serv.error_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_serv.error_msg)
    UnsafeMergeFrom(*source);
  }
}

void error_msg::MergeFrom(const error_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_serv.error_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void error_msg::UnsafeMergeFrom(const error_msg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_message()) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void error_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_serv.error_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error_msg::CopyFrom(const error_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_serv.error_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool error_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void error_msg::Swap(error_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error_msg::InternalSwap(error_msg* other) {
  error_message_.Swap(&other->error_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = error_msg_descriptor_;
  metadata.reflection = error_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error_msg

// required string error_message = 1;
bool error_msg::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void error_msg::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void error_msg::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void error_msg::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& error_msg::error_message() const {
  // @@protoc_insertion_point(field_get:channel_serv.error_msg.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_msg::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.error_msg.error_message)
}
void error_msg::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.error_msg.error_message)
}
void error_msg::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.error_msg.error_message)
}
::std::string* error_msg::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:channel_serv.error_msg.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error_msg::release_error_message() {
  // @@protoc_insertion_point(field_release:channel_serv.error_msg.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_msg::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.error_msg.error_message)
}

inline const error_msg* error_msg::internal_default_instance() {
  return &error_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_serv

// @@protoc_insertion_point(global_scope)
