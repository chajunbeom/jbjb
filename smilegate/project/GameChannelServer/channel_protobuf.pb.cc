// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_protobuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace channel_server {

namespace {

const ::google::protobuf::Descriptor* basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_join_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_join_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_join_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_join_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_logout_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_logout_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_logout_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_logout_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_friends_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_friends_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_friends_req_req_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* packet_friends_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_friends_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_friends_ans_ans_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* packet_play_rank_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_play_rank_game_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_play_rank_game_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_play_rank_game_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_play_friends_game_rel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_play_friends_game_rel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_play_friends_game_rel_req_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* packet_matching_complete_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_matching_complete_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_matching_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_matching_confirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_error_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_error_message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rating_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5fprotobuf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_channel_5fprotobuf_2eproto() {
  protobuf_AddDesc_channel_5fprotobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_protobuf.proto");
  GOOGLE_CHECK(file != NULL);
  basic_info_descriptor_ = file->message_type(0);
  static const int basic_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_info, id_),
  };
  basic_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      basic_info_descriptor_,
      basic_info::internal_default_instance(),
      basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_info, _has_bits_),
      -1,
      -1,
      sizeof(basic_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_info, _internal_metadata_));
  game_history_descriptor_ = file->message_type(1);
  static const int game_history_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, rating_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, total_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, lose_),
  };
  game_history_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      game_history_descriptor_,
      game_history::internal_default_instance(),
      game_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, _has_bits_),
      -1,
      -1,
      sizeof(game_history),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_history, _internal_metadata_));
  user_info_descriptor_ = file->message_type(2);
  static const int user_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, game_history__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, basic_info__),
  };
  user_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_info_descriptor_,
      user_info::internal_default_instance(),
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_),
      -1,
      -1,
      sizeof(user_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _internal_metadata_));
  packet_join_ans_descriptor_ = file->message_type(3);
  static const int packet_join_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_ans, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_ans, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_ans, friends_list_),
  };
  packet_join_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_join_ans_descriptor_,
      packet_join_ans::internal_default_instance(),
      packet_join_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_join_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_ans, _internal_metadata_));
  packet_join_req_descriptor_ = file->message_type(4);
  static const int packet_join_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_req, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_req, id_),
  };
  packet_join_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_join_req_descriptor_,
      packet_join_req::internal_default_instance(),
      packet_join_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_join_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_join_req, _internal_metadata_));
  packet_logout_req_descriptor_ = file->message_type(5);
  static const int packet_logout_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, none_),
  };
  packet_logout_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_logout_req_descriptor_,
      packet_logout_req::internal_default_instance(),
      packet_logout_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_logout_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, _internal_metadata_));
  packet_logout_ans_descriptor_ = file->message_type(6);
  static const int packet_logout_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, none_),
  };
  packet_logout_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_logout_ans_descriptor_,
      packet_logout_ans::internal_default_instance(),
      packet_logout_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_logout_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, _internal_metadata_));
  packet_friends_req_descriptor_ = file->message_type(7);
  static const int packet_friends_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_req, target_info_),
  };
  packet_friends_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_friends_req_descriptor_,
      packet_friends_req::internal_default_instance(),
      packet_friends_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_friends_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_req, _internal_metadata_));
  packet_friends_req_req_type_descriptor_ = packet_friends_req_descriptor_->enum_type(0);
  packet_friends_ans_descriptor_ = file->message_type(8);
  static const int packet_friends_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_ans, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_ans, friends_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_ans, online_),
  };
  packet_friends_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_friends_ans_descriptor_,
      packet_friends_ans::internal_default_instance(),
      packet_friends_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_friends_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_friends_ans, _internal_metadata_));
  packet_friends_ans_ans_type_descriptor_ = packet_friends_ans_descriptor_->enum_type(0);
  packet_play_rank_game_req_descriptor_ = file->message_type(9);
  static const int packet_play_rank_game_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_req, none_),
  };
  packet_play_rank_game_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_play_rank_game_req_descriptor_,
      packet_play_rank_game_req::internal_default_instance(),
      packet_play_rank_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_play_rank_game_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_req, _internal_metadata_));
  packet_play_rank_game_ans_descriptor_ = file->message_type(10);
  static const int packet_play_rank_game_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_ans, success_),
  };
  packet_play_rank_game_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_play_rank_game_ans_descriptor_,
      packet_play_rank_game_ans::internal_default_instance(),
      packet_play_rank_game_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_play_rank_game_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_rank_game_ans, _internal_metadata_));
  packet_play_friends_game_rel_descriptor_ = file->message_type(11);
  static const int packet_play_friends_game_rel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_friends_game_rel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_friends_game_rel, target_id_),
  };
  packet_play_friends_game_rel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_play_friends_game_rel_descriptor_,
      packet_play_friends_game_rel::internal_default_instance(),
      packet_play_friends_game_rel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_friends_game_rel, _has_bits_),
      -1,
      -1,
      sizeof(packet_play_friends_game_rel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_play_friends_game_rel, _internal_metadata_));
  packet_play_friends_game_rel_req_type_descriptor_ = packet_play_friends_game_rel_descriptor_->enum_type(0);
  packet_matching_complete_ans_descriptor_ = file->message_type(12);
  static const int packet_matching_complete_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_complete_ans, room_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_complete_ans, opponent_player_),
  };
  packet_matching_complete_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_matching_complete_ans_descriptor_,
      packet_matching_complete_ans::internal_default_instance(),
      packet_matching_complete_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_complete_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_matching_complete_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_complete_ans, _internal_metadata_));
  packet_matching_confirm_descriptor_ = file->message_type(13);
  static const int packet_matching_confirm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_confirm, none_),
  };
  packet_matching_confirm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_matching_confirm_descriptor_,
      packet_matching_confirm::internal_default_instance(),
      packet_matching_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_confirm, _has_bits_),
      -1,
      -1,
      sizeof(packet_matching_confirm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_matching_confirm, _internal_metadata_));
  packet_error_message_descriptor_ = file->message_type(14);
  static const int packet_error_message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_error_message, error_string_),
  };
  packet_error_message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_error_message_descriptor_,
      packet_error_message::internal_default_instance(),
      packet_error_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_error_message, _has_bits_),
      -1,
      -1,
      sizeof(packet_error_message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_error_message, _internal_metadata_));
  message_type_descriptor_ = file->enum_type(0);
  rating_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5fprotobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      basic_info_descriptor_, basic_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      game_history_descriptor_, game_history::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_info_descriptor_, user_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_join_ans_descriptor_, packet_join_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_join_req_descriptor_, packet_join_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_logout_req_descriptor_, packet_logout_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_logout_ans_descriptor_, packet_logout_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_friends_req_descriptor_, packet_friends_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_friends_ans_descriptor_, packet_friends_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_play_rank_game_req_descriptor_, packet_play_rank_game_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_play_rank_game_ans_descriptor_, packet_play_rank_game_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_play_friends_game_rel_descriptor_, packet_play_friends_game_rel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_matching_complete_ans_descriptor_, packet_matching_complete_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_matching_confirm_descriptor_, packet_matching_confirm::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_error_message_descriptor_, packet_error_message::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5fprotobuf_2eproto() {
  basic_info_default_instance_.Shutdown();
  delete basic_info_reflection_;
  game_history_default_instance_.Shutdown();
  delete game_history_reflection_;
  user_info_default_instance_.Shutdown();
  delete user_info_reflection_;
  packet_join_ans_default_instance_.Shutdown();
  delete packet_join_ans_reflection_;
  packet_join_req_default_instance_.Shutdown();
  delete packet_join_req_reflection_;
  packet_logout_req_default_instance_.Shutdown();
  delete packet_logout_req_reflection_;
  packet_logout_ans_default_instance_.Shutdown();
  delete packet_logout_ans_reflection_;
  packet_friends_req_default_instance_.Shutdown();
  delete packet_friends_req_reflection_;
  packet_friends_ans_default_instance_.Shutdown();
  delete packet_friends_ans_reflection_;
  packet_play_rank_game_req_default_instance_.Shutdown();
  delete packet_play_rank_game_req_reflection_;
  packet_play_rank_game_ans_default_instance_.Shutdown();
  delete packet_play_rank_game_ans_reflection_;
  packet_play_friends_game_rel_default_instance_.Shutdown();
  delete packet_play_friends_game_rel_reflection_;
  packet_matching_complete_ans_default_instance_.Shutdown();
  delete packet_matching_complete_ans_reflection_;
  packet_matching_confirm_default_instance_.Shutdown();
  delete packet_matching_confirm_reflection_;
  packet_error_message_default_instance_.Shutdown();
  delete packet_error_message_reflection_;
}

void protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  basic_info_default_instance_.DefaultConstruct();
  game_history_default_instance_.DefaultConstruct();
  user_info_default_instance_.DefaultConstruct();
  packet_join_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_join_req_default_instance_.DefaultConstruct();
  packet_logout_req_default_instance_.DefaultConstruct();
  packet_logout_ans_default_instance_.DefaultConstruct();
  packet_friends_req_default_instance_.DefaultConstruct();
  packet_friends_ans_default_instance_.DefaultConstruct();
  packet_play_rank_game_req_default_instance_.DefaultConstruct();
  packet_play_rank_game_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_play_friends_game_rel_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_matching_complete_ans_default_instance_.DefaultConstruct();
  packet_matching_confirm_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_error_message_default_instance_.DefaultConstruct();
  basic_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  game_history_default_instance_.get_mutable()->InitAsDefaultInstance();
  user_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_join_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_join_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_logout_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_logout_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_friends_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_friends_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_play_rank_game_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_play_rank_game_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_play_friends_game_rel_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_matching_complete_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_matching_confirm_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_error_message_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_channel_5fprotobuf_2eproto_once_);
void protobuf_InitDefaults_channel_5fprotobuf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_channel_5fprotobuf_2eproto_once_,
                 &protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl);
}
void protobuf_AddDesc_channel_5fprotobuf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026channel_protobuf.proto\022\016channel_server"
    "\"\030\n\nbasic_info\022\n\n\002id\030\001 \002(\t\"T\n\014game_histo"
    "ry\022\024\n\014rating_score\030\001 \002(\005\022\023\n\013total_games\030"
    "\002 \002(\005\022\013\n\003win\030\003 \002(\005\022\014\n\004lose\030\004 \002(\005\"q\n\tuser"
    "_info\0223\n\rgame_history_\030\001 \002(\0132\034.channel_s"
    "erver.game_history\022/\n\013basic_info_\030\002 \002(\0132"
    "\032.channel_server.basic_info\"\203\001\n\017packet_j"
    "oin_ans\022\017\n\007success\030\001 \002(\010\022-\n\007history\030\002 \001("
    "\0132\034.channel_server.game_history\0220\n\014frien"
    "ds_list\030\003 \003(\0132\032.channel_server.basic_inf"
    "o\",\n\017packet_join_req\022\r\n\005token\030\001 \002(\t\022\n\n\002i"
    "d\030\002 \002(\t\"\'\n\021packet_logout_req\022\022\n\004none\030\001 \001"
    "(\010:\004true\"\'\n\021packet_logout_ans\022\022\n\004none\030\001 "
    "\001(\010:\004true\"\252\001\n\022packet_friends_req\0229\n\004type"
    "\030\001 \002(\0162+.channel_server.packet_friends_r"
    "eq.req_type\022/\n\013target_info\030\002 \002(\0132\032.chann"
    "el_server.basic_info\"(\n\010req_type\022\007\n\003ADD\020"
    "\001\022\007\n\003DEL\020\002\022\n\n\006SEARCH\020\003\"\377\001\n\022packet_friend"
    "s_ans\0229\n\004type\030\001 \002(\0162+.channel_server.pac"
    "ket_friends_ans.ans_type\022/\n\014friends_info"
    "\030\002 \001(\0132\031.channel_server.user_info\022\016\n\006onl"
    "ine\030\003 \001(\010\"m\n\010ans_type\022\017\n\013ADD_SUCCESS\020\001\022\017"
    "\n\013DEL_SUCCESS\020\003\022\014\n\010ADD_FAIL\020\002\022\014\n\010DEL_FAI"
    "L\020\004\022\022\n\016SEARCH_SUCCESS\020\005\022\017\n\013SEARCH_FAIL\020\006"
    "\"/\n\031packet_play_rank_game_req\022\022\n\004none\030\001 "
    "\001(\010:\004true\",\n\031packet_play_rank_game_ans\022\017"
    "\n\007success\030\001 \002(\010\"\243\001\n\034packet_play_friends_"
    "game_rel\022C\n\004type\030\001 \002(\01625.channel_server."
    "packet_play_friends_game_rel.req_type\022\021\n"
    "\ttarget_id\030\003 \002(\t\"+\n\010req_type\022\t\n\005APPLY\020\000\022"
    "\n\n\006ACCEPT\020\001\022\010\n\004DENY\020\002\"d\n\034packet_matching"
    "_complete_ans\022\020\n\010room_key\030\001 \002(\t\0222\n\017oppon"
    "ent_player\030\002 \002(\0132\031.channel_server.user_i"
    "nfo\"-\n\027packet_matching_confirm\022\022\n\004none\030\001"
    " \001(\010:\004true\",\n\024packet_error_message\022\024\n\014er"
    "ror_string\030\001 \002(\t*\336\001\n\014message_type\022\017\n\013FRI"
    "ENDS_REQ\020\000\022\017\n\013FRIENDS_ANS\020\001\022\021\n\rPLAY_RANK"
    "_REQ\020\002\022\021\n\rPLAY_RANK_ANS\020\003\022\024\n\020PLAY_FRIEND"
    "S_REL\020\004\022\022\n\016MATCH_COMPLETE\020\005\022\021\n\rMATCH_CON"
    "FIRM\020\006\022\r\n\tERROR_MSG\020\007\022\014\n\010JOIN_REQ\020\010\022\014\n\010J"
    "OIN_ANS\020\t\022\016\n\nLOGOUT_REQ\020\n\022\016\n\nLOGOUT_ANS\020"
    "\013*a\n\006rating\022\n\n\006bronze\020\000\022\n\n\006silver\020\001\022\010\n\004g"
    "old\020\002\022\014\n\010platinum\020\003\022\013\n\007diamond\020\004\022\n\n\006mast"
    "er\020\005\022\016\n\nchallenger\020\006", 1740);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_protobuf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5fprotobuf_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_channel_5fprotobuf_2eproto_once_);
void protobuf_AddDesc_channel_5fprotobuf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_channel_5fprotobuf_2eproto_once_,
                 &protobuf_AddDesc_channel_5fprotobuf_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5fprotobuf_2eproto {
  StaticDescriptorInitializer_channel_5fprotobuf_2eproto() {
    protobuf_AddDesc_channel_5fprotobuf_2eproto();
  }
} static_descriptor_initializer_channel_5fprotobuf_2eproto_;
const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rating_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rating_descriptor_;
}
bool rating_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basic_info::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basic_info::basic_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.basic_info)
}

void basic_info::InitAsDefaultInstance() {
}

basic_info::basic_info(const basic_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.basic_info)
}

void basic_info::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

basic_info::~basic_info() {
  // @@protoc_insertion_point(destructor:channel_server.basic_info)
  SharedDtor();
}

void basic_info::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return basic_info_descriptor_;
}

const basic_info& basic_info::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<basic_info> basic_info_default_instance_;

basic_info* basic_info::New(::google::protobuf::Arena* arena) const {
  basic_info* n = new basic_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basic_info::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.basic_info)
  if (has_id()) {
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.basic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.basic_info.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.basic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.basic_info)
  return false;
#undef DO_
}

void basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.basic_info)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.basic_info.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.basic_info)
}

::google::protobuf::uint8* basic_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.basic_info)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.basic_info.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.basic_info)
  return target;
}

size_t basic_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.basic_info)
  size_t total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basic_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.basic_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const basic_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basic_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.basic_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.basic_info)
    UnsafeMergeFrom(*source);
  }
}

void basic_info::MergeFrom(const basic_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.basic_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void basic_info::UnsafeMergeFrom(const basic_info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void basic_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.basic_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basic_info::CopyFrom(const basic_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.basic_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool basic_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void basic_info::Swap(basic_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basic_info::InternalSwap(basic_info* other) {
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = basic_info_descriptor_;
  metadata.reflection = basic_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basic_info

// required string id = 1;
bool basic_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void basic_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void basic_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void basic_info::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& basic_info::id() const {
  // @@protoc_insertion_point(field_get:channel_server.basic_info.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basic_info::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.basic_info.id)
}
void basic_info::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.basic_info.id)
}
void basic_info::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.basic_info.id)
}
::std::string* basic_info::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:channel_server.basic_info.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basic_info::release_id() {
  // @@protoc_insertion_point(field_release:channel_server.basic_info.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basic_info::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.basic_info.id)
}

inline const basic_info* basic_info::internal_default_instance() {
  return &basic_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_history::kRatingScoreFieldNumber;
const int game_history::kTotalGamesFieldNumber;
const int game_history::kWinFieldNumber;
const int game_history::kLoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_history::game_history()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.game_history)
}

void game_history::InitAsDefaultInstance() {
}

game_history::game_history(const game_history& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.game_history)
}

void game_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rating_score_, 0, reinterpret_cast<char*>(&lose_) -
    reinterpret_cast<char*>(&rating_score_) + sizeof(lose_));
}

game_history::~game_history() {
  // @@protoc_insertion_point(destructor:channel_server.game_history)
  SharedDtor();
}

void game_history::SharedDtor() {
}

void game_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_history_descriptor_;
}

const game_history& game_history::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<game_history> game_history_default_instance_;

game_history* game_history::New(::google::protobuf::Arena* arena) const {
  game_history* n = new game_history;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_history::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.game_history)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(game_history, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<game_history*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rating_score_, lose_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool game_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.game_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rating_score = 1;
      case 1: {
        if (tag == 8) {
          set_has_rating_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_games;
        break;
      }

      // required int32 total_games = 2;
      case 2: {
        if (tag == 16) {
         parse_total_games:
          set_has_total_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_games_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // required int32 win = 3;
      case 3: {
        if (tag == 24) {
         parse_win:
          set_has_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lose;
        break;
      }

      // required int32 lose = 4;
      case 4: {
        if (tag == 32) {
         parse_lose:
          set_has_lose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.game_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.game_history)
  return false;
#undef DO_
}

void game_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.game_history)
  // required int32 rating_score = 1;
  if (has_rating_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rating_score(), output);
  }

  // required int32 total_games = 2;
  if (has_total_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_games(), output);
  }

  // required int32 win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win(), output);
  }

  // required int32 lose = 4;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.game_history)
}

::google::protobuf::uint8* game_history::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.game_history)
  // required int32 rating_score = 1;
  if (has_rating_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rating_score(), target);
  }

  // required int32 total_games = 2;
  if (has_total_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_games(), target);
  }

  // required int32 win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win(), target);
  }

  // required int32 lose = 4;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.game_history)
  return target;
}

size_t game_history::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.game_history)
  size_t total_size = 0;

  if (has_rating_score()) {
    // required int32 rating_score = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rating_score());
  }

  if (has_total_games()) {
    // required int32 total_games = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_games());
  }

  if (has_win()) {
    // required int32 win = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  if (has_lose()) {
    // required int32 lose = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose());
  }

  return total_size;
}
size_t game_history::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.game_history)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 rating_score = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rating_score());

    // required int32 total_games = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_games());

    // required int32 win = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());

    // required int32 lose = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_history::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.game_history)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const game_history* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const game_history>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.game_history)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.game_history)
    UnsafeMergeFrom(*source);
  }
}

void game_history::MergeFrom(const game_history& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.game_history)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void game_history::UnsafeMergeFrom(const game_history& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rating_score()) {
      set_rating_score(from.rating_score());
    }
    if (from.has_total_games()) {
      set_total_games(from.total_games());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void game_history::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.game_history)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_history::CopyFrom(const game_history& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.game_history)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool game_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void game_history::Swap(game_history* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_history::InternalSwap(game_history* other) {
  std::swap(rating_score_, other->rating_score_);
  std::swap(total_games_, other->total_games_);
  std::swap(win_, other->win_);
  std::swap(lose_, other->lose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata game_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_history_descriptor_;
  metadata.reflection = game_history_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_history

// required int32 rating_score = 1;
bool game_history::has_rating_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void game_history::set_has_rating_score() {
  _has_bits_[0] |= 0x00000001u;
}
void game_history::clear_has_rating_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void game_history::clear_rating_score() {
  rating_score_ = 0;
  clear_has_rating_score();
}
::google::protobuf::int32 game_history::rating_score() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.rating_score)
  return rating_score_;
}
void game_history::set_rating_score(::google::protobuf::int32 value) {
  set_has_rating_score();
  rating_score_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.rating_score)
}

// required int32 total_games = 2;
bool game_history::has_total_games() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void game_history::set_has_total_games() {
  _has_bits_[0] |= 0x00000002u;
}
void game_history::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000002u;
}
void game_history::clear_total_games() {
  total_games_ = 0;
  clear_has_total_games();
}
::google::protobuf::int32 game_history::total_games() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.total_games)
  return total_games_;
}
void game_history::set_total_games(::google::protobuf::int32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.total_games)
}

// required int32 win = 3;
bool game_history::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void game_history::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
void game_history::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
void game_history::clear_win() {
  win_ = 0;
  clear_has_win();
}
::google::protobuf::int32 game_history::win() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.win)
  return win_;
}
void game_history::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.win)
}

// required int32 lose = 4;
bool game_history::has_lose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void game_history::set_has_lose() {
  _has_bits_[0] |= 0x00000008u;
}
void game_history::clear_has_lose() {
  _has_bits_[0] &= ~0x00000008u;
}
void game_history::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
::google::protobuf::int32 game_history::lose() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.lose)
  return lose_;
}
void game_history::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.lose)
}

inline const game_history* game_history::internal_default_instance() {
  return &game_history_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info::kGameHistoryFieldNumber;
const int user_info::kBasicInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info::user_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.user_info)
}

void user_info::InitAsDefaultInstance() {
  game_history__ = const_cast< ::channel_server::game_history*>(
      ::channel_server::game_history::internal_default_instance());
  basic_info__ = const_cast< ::channel_server::basic_info*>(
      ::channel_server::basic_info::internal_default_instance());
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.user_info)
}

void user_info::SharedCtor() {
  _cached_size_ = 0;
  game_history__ = NULL;
  basic_info__ = NULL;
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:channel_server.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  if (this != &user_info_default_instance_.get()) {
    delete game_history__;
    delete basic_info__;
  }
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<user_info> user_info_default_instance_;

user_info* user_info::New(::google::protobuf::Arena* arena) const {
  user_info* n = new user_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_info::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.user_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_game_history_()) {
      if (game_history__ != NULL) game_history__->::channel_server::game_history::Clear();
    }
    if (has_basic_info_()) {
      if (basic_info__ != NULL) basic_info__->::channel_server::basic_info::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.game_history game_history_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_history_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic_info_;
        break;
      }

      // required .channel_server.basic_info basic_info_ = 2;
      case 2: {
        if (tag == 18) {
         parse_basic_info_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.user_info)
  // required .channel_server.game_history game_history_ = 1;
  if (has_game_history_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->game_history__, output);
  }

  // required .channel_server.basic_info basic_info_ = 2;
  if (has_basic_info_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basic_info__, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.user_info)
}

::google::protobuf::uint8* user_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.user_info)
  // required .channel_server.game_history game_history_ = 1;
  if (has_game_history_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->game_history__, false, target);
  }

  // required .channel_server.basic_info basic_info_ = 2;
  if (has_basic_info_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basic_info__, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.user_info)
  return target;
}

size_t user_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.user_info)
  size_t total_size = 0;

  if (has_game_history_()) {
    // required .channel_server.game_history game_history_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_history__);
  }

  if (has_basic_info_()) {
    // required .channel_server.basic_info basic_info_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_info__);
  }

  return total_size;
}
size_t user_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.user_info)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_server.game_history game_history_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_history__);

    // required .channel_server.basic_info basic_info_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_info__);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.user_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.user_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.user_info)
    UnsafeMergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.user_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void user_info::UnsafeMergeFrom(const user_info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_history_()) {
      mutable_game_history_()->::channel_server::game_history::MergeFrom(from.game_history_());
    }
    if (from.has_basic_info_()) {
      mutable_basic_info_()->::channel_server::basic_info::MergeFrom(from.basic_info_());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.user_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game_history_()) {
    if (!this->game_history__->IsInitialized()) return false;
  }
  if (has_basic_info_()) {
    if (!this->basic_info__->IsInitialized()) return false;
  }
  return true;
}

void user_info::Swap(user_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info::InternalSwap(user_info* other) {
  std::swap(game_history__, other->game_history__);
  std::swap(basic_info__, other->basic_info__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info

// required .channel_server.game_history game_history_ = 1;
bool user_info::has_game_history_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void user_info::set_has_game_history_() {
  _has_bits_[0] |= 0x00000001u;
}
void user_info::clear_has_game_history_() {
  _has_bits_[0] &= ~0x00000001u;
}
void user_info::clear_game_history_() {
  if (game_history__ != NULL) game_history__->::channel_server::game_history::Clear();
  clear_has_game_history_();
}
const ::channel_server::game_history& user_info::game_history_() const {
  // @@protoc_insertion_point(field_get:channel_server.user_info.game_history_)
  return game_history__ != NULL ? *game_history__
                         : *::channel_server::game_history::internal_default_instance();
}
::channel_server::game_history* user_info::mutable_game_history_() {
  set_has_game_history_();
  if (game_history__ == NULL) {
    game_history__ = new ::channel_server::game_history;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.user_info.game_history_)
  return game_history__;
}
::channel_server::game_history* user_info::release_game_history_() {
  // @@protoc_insertion_point(field_release:channel_server.user_info.game_history_)
  clear_has_game_history_();
  ::channel_server::game_history* temp = game_history__;
  game_history__ = NULL;
  return temp;
}
void user_info::set_allocated_game_history_(::channel_server::game_history* game_history_) {
  delete game_history__;
  game_history__ = game_history_;
  if (game_history_) {
    set_has_game_history_();
  } else {
    clear_has_game_history_();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.user_info.game_history_)
}

// required .channel_server.basic_info basic_info_ = 2;
bool user_info::has_basic_info_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void user_info::set_has_basic_info_() {
  _has_bits_[0] |= 0x00000002u;
}
void user_info::clear_has_basic_info_() {
  _has_bits_[0] &= ~0x00000002u;
}
void user_info::clear_basic_info_() {
  if (basic_info__ != NULL) basic_info__->::channel_server::basic_info::Clear();
  clear_has_basic_info_();
}
const ::channel_server::basic_info& user_info::basic_info_() const {
  // @@protoc_insertion_point(field_get:channel_server.user_info.basic_info_)
  return basic_info__ != NULL ? *basic_info__
                         : *::channel_server::basic_info::internal_default_instance();
}
::channel_server::basic_info* user_info::mutable_basic_info_() {
  set_has_basic_info_();
  if (basic_info__ == NULL) {
    basic_info__ = new ::channel_server::basic_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.user_info.basic_info_)
  return basic_info__;
}
::channel_server::basic_info* user_info::release_basic_info_() {
  // @@protoc_insertion_point(field_release:channel_server.user_info.basic_info_)
  clear_has_basic_info_();
  ::channel_server::basic_info* temp = basic_info__;
  basic_info__ = NULL;
  return temp;
}
void user_info::set_allocated_basic_info_(::channel_server::basic_info* basic_info_) {
  delete basic_info__;
  basic_info__ = basic_info_;
  if (basic_info_) {
    set_has_basic_info_();
  } else {
    clear_has_basic_info_();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.user_info.basic_info_)
}

inline const user_info* user_info::internal_default_instance() {
  return &user_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_join_ans::kSuccessFieldNumber;
const int packet_join_ans::kHistoryFieldNumber;
const int packet_join_ans::kFriendsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_join_ans::packet_join_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_join_ans)
}

void packet_join_ans::InitAsDefaultInstance() {
  history_ = const_cast< ::channel_server::game_history*>(
      ::channel_server::game_history::internal_default_instance());
}

packet_join_ans::packet_join_ans(const packet_join_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_join_ans)
}

void packet_join_ans::SharedCtor() {
  _cached_size_ = 0;
  history_ = NULL;
  success_ = false;
}

packet_join_ans::~packet_join_ans() {
  // @@protoc_insertion_point(destructor:channel_server.packet_join_ans)
  SharedDtor();
}

void packet_join_ans::SharedDtor() {
  if (this != &packet_join_ans_default_instance_.get()) {
    delete history_;
  }
}

void packet_join_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_join_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_join_ans_descriptor_;
}

const packet_join_ans& packet_join_ans::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_join_ans> packet_join_ans_default_instance_;

packet_join_ans* packet_join_ans::New(::google::protobuf::Arena* arena) const {
  packet_join_ans* n = new packet_join_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_join_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_join_ans)
  if (_has_bits_[0 / 32] & 3u) {
    success_ = false;
    if (has_history()) {
      if (history_ != NULL) history_->::channel_server::game_history::Clear();
    }
  }
  friends_list_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_join_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_join_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history;
        break;
      }

      // optional .channel_server.game_history history = 2;
      case 2: {
        if (tag == 18) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friends_list;
        break;
      }

      // repeated .channel_server.basic_info friends_list = 3;
      case 3: {
        if (tag == 26) {
         parse_friends_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_friends_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_join_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_join_ans)
  return false;
#undef DO_
}

void packet_join_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_join_ans)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional .channel_server.game_history history = 2;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->history_, output);
  }

  // repeated .channel_server.basic_info friends_list = 3;
  for (unsigned int i = 0, n = this->friends_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_join_ans)
}

::google::protobuf::uint8* packet_join_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_join_ans)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional .channel_server.game_history history = 2;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->history_, false, target);
  }

  // repeated .channel_server.basic_info friends_list = 3;
  for (unsigned int i = 0, n = this->friends_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->friends_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_join_ans)
  return target;
}

size_t packet_join_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_join_ans)
  size_t total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  // optional .channel_server.game_history history = 2;
  if (has_history()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->history_);
  }

  // repeated .channel_server.basic_info friends_list = 3;
  {
    unsigned int count = this->friends_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends_list(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_join_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_join_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_join_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_join_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_join_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_join_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_join_ans::MergeFrom(const packet_join_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_join_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_join_ans::UnsafeMergeFrom(const packet_join_ans& from) {
  GOOGLE_DCHECK(&from != this);
  friends_list_.MergeFrom(from.friends_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_history()) {
      mutable_history()->::channel_server::game_history::MergeFrom(from.history());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_join_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_join_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_join_ans::CopyFrom(const packet_join_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_join_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_join_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_history()) {
    if (!this->history_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->friends_list())) return false;
  return true;
}

void packet_join_ans::Swap(packet_join_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_join_ans::InternalSwap(packet_join_ans* other) {
  std::swap(success_, other->success_);
  std::swap(history_, other->history_);
  friends_list_.UnsafeArenaSwap(&other->friends_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_join_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_join_ans_descriptor_;
  metadata.reflection = packet_join_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_join_ans

// required bool success = 1;
bool packet_join_ans::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_join_ans::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_join_ans::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_join_ans::clear_success() {
  success_ = false;
  clear_has_success();
}
bool packet_join_ans::success() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.success)
  return success_;
}
void packet_join_ans::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_join_ans.success)
}

// optional .channel_server.game_history history = 2;
bool packet_join_ans::has_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_join_ans::set_has_history() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_join_ans::clear_has_history() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_join_ans::clear_history() {
  if (history_ != NULL) history_->::channel_server::game_history::Clear();
  clear_has_history();
}
const ::channel_server::game_history& packet_join_ans::history() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.history)
  return history_ != NULL ? *history_
                         : *::channel_server::game_history::internal_default_instance();
}
::channel_server::game_history* packet_join_ans::mutable_history() {
  set_has_history();
  if (history_ == NULL) {
    history_ = new ::channel_server::game_history;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_ans.history)
  return history_;
}
::channel_server::game_history* packet_join_ans::release_history() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_ans.history)
  clear_has_history();
  ::channel_server::game_history* temp = history_;
  history_ = NULL;
  return temp;
}
void packet_join_ans::set_allocated_history(::channel_server::game_history* history) {
  delete history_;
  history_ = history;
  if (history) {
    set_has_history();
  } else {
    clear_has_history();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_ans.history)
}

// repeated .channel_server.basic_info friends_list = 3;
int packet_join_ans::friends_list_size() const {
  return friends_list_.size();
}
void packet_join_ans::clear_friends_list() {
  friends_list_.Clear();
}
const ::channel_server::basic_info& packet_join_ans::friends_list(int index) const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.friends_list)
  return friends_list_.Get(index);
}
::channel_server::basic_info* packet_join_ans::mutable_friends_list(int index) {
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_ans.friends_list)
  return friends_list_.Mutable(index);
}
::channel_server::basic_info* packet_join_ans::add_friends_list() {
  // @@protoc_insertion_point(field_add:channel_server.packet_join_ans.friends_list)
  return friends_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >*
packet_join_ans::mutable_friends_list() {
  // @@protoc_insertion_point(field_mutable_list:channel_server.packet_join_ans.friends_list)
  return &friends_list_;
}
const ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >&
packet_join_ans::friends_list() const {
  // @@protoc_insertion_point(field_list:channel_server.packet_join_ans.friends_list)
  return friends_list_;
}

inline const packet_join_ans* packet_join_ans::internal_default_instance() {
  return &packet_join_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_join_req::kTokenFieldNumber;
const int packet_join_req::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_join_req::packet_join_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_join_req)
}

void packet_join_req::InitAsDefaultInstance() {
}

packet_join_req::packet_join_req(const packet_join_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_join_req)
}

void packet_join_req::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_join_req::~packet_join_req() {
  // @@protoc_insertion_point(destructor:channel_server.packet_join_req)
  SharedDtor();
}

void packet_join_req::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_join_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_join_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_join_req_descriptor_;
}

const packet_join_req& packet_join_req::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_join_req> packet_join_req_default_instance_;

packet_join_req* packet_join_req::New(::google::protobuf::Arena* arena) const {
  packet_join_req* n = new packet_join_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_join_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_join_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_join_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_join_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.packet_join_req.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.packet_join_req.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_join_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_join_req)
  return false;
#undef DO_
}

void packet_join_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_join_req)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_join_req.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_join_req.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_join_req)
}

::google::protobuf::uint8* packet_join_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_join_req)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_join_req.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_join_req.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_join_req)
  return target;
}

size_t packet_join_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.packet_join_req)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  return total_size;
}
size_t packet_join_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_join_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_join_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_join_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_join_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_join_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_join_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_join_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_join_req::MergeFrom(const packet_join_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_join_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_join_req::UnsafeMergeFrom(const packet_join_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_join_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_join_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_join_req::CopyFrom(const packet_join_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_join_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_join_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_join_req::Swap(packet_join_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_join_req::InternalSwap(packet_join_req* other) {
  token_.Swap(&other->token_);
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_join_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_join_req_descriptor_;
  metadata.reflection = packet_join_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_join_req

// required string token = 1;
bool packet_join_req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_join_req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_join_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_join_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& packet_join_req::token() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_req.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_join_req::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_join_req.token)
}
void packet_join_req::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_join_req.token)
}
void packet_join_req::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_join_req.token)
}
::std::string* packet_join_req::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_join_req::release_token() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_req.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_join_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_req.token)
}

// required string id = 2;
bool packet_join_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_join_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_join_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_join_req::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& packet_join_req::id() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_req.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_join_req::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_join_req.id)
}
void packet_join_req::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_join_req.id)
}
void packet_join_req::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_join_req.id)
}
::std::string* packet_join_req::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_req.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_join_req::release_id() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_req.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_join_req::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_req.id)
}

inline const packet_join_req* packet_join_req::internal_default_instance() {
  return &packet_join_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_logout_req::kNoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_logout_req::packet_logout_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_logout_req)
}

void packet_logout_req::InitAsDefaultInstance() {
}

packet_logout_req::packet_logout_req(const packet_logout_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_logout_req)
}

void packet_logout_req::SharedCtor() {
  _cached_size_ = 0;
  none_ = true;
}

packet_logout_req::~packet_logout_req() {
  // @@protoc_insertion_point(destructor:channel_server.packet_logout_req)
  SharedDtor();
}

void packet_logout_req::SharedDtor() {
}

void packet_logout_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_logout_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_logout_req_descriptor_;
}

const packet_logout_req& packet_logout_req::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_logout_req> packet_logout_req_default_instance_;

packet_logout_req* packet_logout_req::New(::google::protobuf::Arena* arena) const {
  packet_logout_req* n = new packet_logout_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_logout_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_logout_req)
  none_ = true;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_logout_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_logout_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool none = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_none();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &none_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_logout_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_logout_req)
  return false;
#undef DO_
}

void packet_logout_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_logout_req)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->none(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_logout_req)
}

::google::protobuf::uint8* packet_logout_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_logout_req)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->none(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_logout_req)
  return target;
}

size_t packet_logout_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_logout_req)
  size_t total_size = 0;

  // optional bool none = 1 [default = true];
  if (has_none()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_logout_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_logout_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_logout_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_logout_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_logout_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_logout_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_logout_req::MergeFrom(const packet_logout_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_logout_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_logout_req::UnsafeMergeFrom(const packet_logout_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_logout_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_logout_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_logout_req::CopyFrom(const packet_logout_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_logout_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_logout_req::IsInitialized() const {

  return true;
}

void packet_logout_req::Swap(packet_logout_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_logout_req::InternalSwap(packet_logout_req* other) {
  std::swap(none_, other->none_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_logout_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_logout_req_descriptor_;
  metadata.reflection = packet_logout_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_logout_req

// optional bool none = 1 [default = true];
bool packet_logout_req::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_logout_req::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_logout_req::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_logout_req::clear_none() {
  none_ = true;
  clear_has_none();
}
bool packet_logout_req::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_logout_req.none)
  return none_;
}
void packet_logout_req::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_logout_req.none)
}

inline const packet_logout_req* packet_logout_req::internal_default_instance() {
  return &packet_logout_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_logout_ans::kNoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_logout_ans::packet_logout_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_logout_ans)
}

void packet_logout_ans::InitAsDefaultInstance() {
}

packet_logout_ans::packet_logout_ans(const packet_logout_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_logout_ans)
}

void packet_logout_ans::SharedCtor() {
  _cached_size_ = 0;
  none_ = true;
}

packet_logout_ans::~packet_logout_ans() {
  // @@protoc_insertion_point(destructor:channel_server.packet_logout_ans)
  SharedDtor();
}

void packet_logout_ans::SharedDtor() {
}

void packet_logout_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_logout_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_logout_ans_descriptor_;
}

const packet_logout_ans& packet_logout_ans::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_logout_ans> packet_logout_ans_default_instance_;

packet_logout_ans* packet_logout_ans::New(::google::protobuf::Arena* arena) const {
  packet_logout_ans* n = new packet_logout_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_logout_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_logout_ans)
  none_ = true;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_logout_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_logout_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool none = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_none();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &none_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_logout_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_logout_ans)
  return false;
#undef DO_
}

void packet_logout_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_logout_ans)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->none(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_logout_ans)
}

::google::protobuf::uint8* packet_logout_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_logout_ans)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->none(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_logout_ans)
  return target;
}

size_t packet_logout_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_logout_ans)
  size_t total_size = 0;

  // optional bool none = 1 [default = true];
  if (has_none()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_logout_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_logout_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_logout_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_logout_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_logout_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_logout_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_logout_ans::MergeFrom(const packet_logout_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_logout_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_logout_ans::UnsafeMergeFrom(const packet_logout_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_logout_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_logout_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_logout_ans::CopyFrom(const packet_logout_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_logout_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_logout_ans::IsInitialized() const {

  return true;
}

void packet_logout_ans::Swap(packet_logout_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_logout_ans::InternalSwap(packet_logout_ans* other) {
  std::swap(none_, other->none_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_logout_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_logout_ans_descriptor_;
  metadata.reflection = packet_logout_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_logout_ans

// optional bool none = 1 [default = true];
bool packet_logout_ans::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_logout_ans::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_logout_ans::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_logout_ans::clear_none() {
  none_ = true;
  clear_has_none();
}
bool packet_logout_ans::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_logout_ans.none)
  return none_;
}
void packet_logout_ans::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_logout_ans.none)
}

inline const packet_logout_ans* packet_logout_ans::internal_default_instance() {
  return &packet_logout_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* packet_friends_req_req_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_friends_req_req_type_descriptor_;
}
bool packet_friends_req_req_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const packet_friends_req_req_type packet_friends_req::ADD;
const packet_friends_req_req_type packet_friends_req::DEL;
const packet_friends_req_req_type packet_friends_req::SEARCH;
const packet_friends_req_req_type packet_friends_req::req_type_MIN;
const packet_friends_req_req_type packet_friends_req::req_type_MAX;
const int packet_friends_req::req_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_friends_req::kTypeFieldNumber;
const int packet_friends_req::kTargetInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_friends_req::packet_friends_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_friends_req)
}

void packet_friends_req::InitAsDefaultInstance() {
  target_info_ = const_cast< ::channel_server::basic_info*>(
      ::channel_server::basic_info::internal_default_instance());
}

packet_friends_req::packet_friends_req(const packet_friends_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_friends_req)
}

void packet_friends_req::SharedCtor() {
  _cached_size_ = 0;
  target_info_ = NULL;
  type_ = 1;
}

packet_friends_req::~packet_friends_req() {
  // @@protoc_insertion_point(destructor:channel_server.packet_friends_req)
  SharedDtor();
}

void packet_friends_req::SharedDtor() {
  if (this != &packet_friends_req_default_instance_.get()) {
    delete target_info_;
  }
}

void packet_friends_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_friends_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_friends_req_descriptor_;
}

const packet_friends_req& packet_friends_req::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_friends_req> packet_friends_req_default_instance_;

packet_friends_req* packet_friends_req::New(::google::protobuf::Arena* arena) const {
  packet_friends_req* n = new packet_friends_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_friends_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_friends_req)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_target_info()) {
      if (target_info_ != NULL) target_info_->::channel_server::basic_info::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_friends_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_friends_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.packet_friends_req.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::packet_friends_req_req_type_IsValid(value)) {
            set_type(static_cast< ::channel_server::packet_friends_req_req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_info;
        break;
      }

      // required .channel_server.basic_info target_info = 2;
      case 2: {
        if (tag == 18) {
         parse_target_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_friends_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_friends_req)
  return false;
#undef DO_
}

void packet_friends_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_friends_req)
  // required .channel_server.packet_friends_req.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .channel_server.basic_info target_info = 2;
  if (has_target_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_friends_req)
}

::google::protobuf::uint8* packet_friends_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_friends_req)
  // required .channel_server.packet_friends_req.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .channel_server.basic_info target_info = 2;
  if (has_target_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->target_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_friends_req)
  return target;
}

size_t packet_friends_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.packet_friends_req)
  size_t total_size = 0;

  if (has_type()) {
    // required .channel_server.packet_friends_req.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_target_info()) {
    // required .channel_server.basic_info target_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_info_);
  }

  return total_size;
}
size_t packet_friends_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_friends_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_server.packet_friends_req.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .channel_server.basic_info target_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_friends_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_friends_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_friends_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_friends_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_friends_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_friends_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_friends_req::MergeFrom(const packet_friends_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_friends_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_friends_req::UnsafeMergeFrom(const packet_friends_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_info()) {
      mutable_target_info()->::channel_server::basic_info::MergeFrom(from.target_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_friends_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_friends_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_friends_req::CopyFrom(const packet_friends_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_friends_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_friends_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target_info()) {
    if (!this->target_info_->IsInitialized()) return false;
  }
  return true;
}

void packet_friends_req::Swap(packet_friends_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_friends_req::InternalSwap(packet_friends_req* other) {
  std::swap(type_, other->type_);
  std::swap(target_info_, other->target_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_friends_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_friends_req_descriptor_;
  metadata.reflection = packet_friends_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_friends_req

// required .channel_server.packet_friends_req.req_type type = 1;
bool packet_friends_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_friends_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_friends_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_friends_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
::channel_server::packet_friends_req_req_type packet_friends_req::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_req.type)
  return static_cast< ::channel_server::packet_friends_req_req_type >(type_);
}
void packet_friends_req::set_type(::channel_server::packet_friends_req_req_type value) {
  assert(::channel_server::packet_friends_req_req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_req.type)
}

// required .channel_server.basic_info target_info = 2;
bool packet_friends_req::has_target_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_friends_req::set_has_target_info() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_friends_req::clear_has_target_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_friends_req::clear_target_info() {
  if (target_info_ != NULL) target_info_->::channel_server::basic_info::Clear();
  clear_has_target_info();
}
const ::channel_server::basic_info& packet_friends_req::target_info() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_req.target_info)
  return target_info_ != NULL ? *target_info_
                         : *::channel_server::basic_info::internal_default_instance();
}
::channel_server::basic_info* packet_friends_req::mutable_target_info() {
  set_has_target_info();
  if (target_info_ == NULL) {
    target_info_ = new ::channel_server::basic_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_friends_req.target_info)
  return target_info_;
}
::channel_server::basic_info* packet_friends_req::release_target_info() {
  // @@protoc_insertion_point(field_release:channel_server.packet_friends_req.target_info)
  clear_has_target_info();
  ::channel_server::basic_info* temp = target_info_;
  target_info_ = NULL;
  return temp;
}
void packet_friends_req::set_allocated_target_info(::channel_server::basic_info* target_info) {
  delete target_info_;
  target_info_ = target_info;
  if (target_info) {
    set_has_target_info();
  } else {
    clear_has_target_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_friends_req.target_info)
}

inline const packet_friends_req* packet_friends_req::internal_default_instance() {
  return &packet_friends_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* packet_friends_ans_ans_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_friends_ans_ans_type_descriptor_;
}
bool packet_friends_ans_ans_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const packet_friends_ans_ans_type packet_friends_ans::ADD_SUCCESS;
const packet_friends_ans_ans_type packet_friends_ans::DEL_SUCCESS;
const packet_friends_ans_ans_type packet_friends_ans::ADD_FAIL;
const packet_friends_ans_ans_type packet_friends_ans::DEL_FAIL;
const packet_friends_ans_ans_type packet_friends_ans::SEARCH_SUCCESS;
const packet_friends_ans_ans_type packet_friends_ans::SEARCH_FAIL;
const packet_friends_ans_ans_type packet_friends_ans::ans_type_MIN;
const packet_friends_ans_ans_type packet_friends_ans::ans_type_MAX;
const int packet_friends_ans::ans_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_friends_ans::kTypeFieldNumber;
const int packet_friends_ans::kFriendsInfoFieldNumber;
const int packet_friends_ans::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_friends_ans::packet_friends_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_friends_ans)
}

void packet_friends_ans::InitAsDefaultInstance() {
  friends_info_ = const_cast< ::channel_server::user_info*>(
      ::channel_server::user_info::internal_default_instance());
}

packet_friends_ans::packet_friends_ans(const packet_friends_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_friends_ans)
}

void packet_friends_ans::SharedCtor() {
  _cached_size_ = 0;
  friends_info_ = NULL;
  online_ = false;
  type_ = 1;
}

packet_friends_ans::~packet_friends_ans() {
  // @@protoc_insertion_point(destructor:channel_server.packet_friends_ans)
  SharedDtor();
}

void packet_friends_ans::SharedDtor() {
  if (this != &packet_friends_ans_default_instance_.get()) {
    delete friends_info_;
  }
}

void packet_friends_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_friends_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_friends_ans_descriptor_;
}

const packet_friends_ans& packet_friends_ans::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_friends_ans> packet_friends_ans_default_instance_;

packet_friends_ans* packet_friends_ans::New(::google::protobuf::Arena* arena) const {
  packet_friends_ans* n = new packet_friends_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_friends_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_friends_ans)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    if (has_friends_info()) {
      if (friends_info_ != NULL) friends_info_->::channel_server::user_info::Clear();
    }
    online_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_friends_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_friends_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.packet_friends_ans.ans_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::packet_friends_ans_ans_type_IsValid(value)) {
            set_type(static_cast< ::channel_server::packet_friends_ans_ans_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends_info;
        break;
      }

      // optional .channel_server.user_info friends_info = 2;
      case 2: {
        if (tag == 18) {
         parse_friends_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (tag == 24) {
         parse_online:
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_friends_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_friends_ans)
  return false;
#undef DO_
}

void packet_friends_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_friends_ans)
  // required .channel_server.packet_friends_ans.ans_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .channel_server.user_info friends_info = 2;
  if (has_friends_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->friends_info_, output);
  }

  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_friends_ans)
}

::google::protobuf::uint8* packet_friends_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_friends_ans)
  // required .channel_server.packet_friends_ans.ans_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .channel_server.user_info friends_info = 2;
  if (has_friends_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->friends_info_, false, target);
  }

  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_friends_ans)
  return target;
}

size_t packet_friends_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_friends_ans)
  size_t total_size = 0;

  // required .channel_server.packet_friends_ans.ans_type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .channel_server.user_info friends_info = 2;
    if (has_friends_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friends_info_);
    }

    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_friends_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_friends_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_friends_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_friends_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_friends_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_friends_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_friends_ans::MergeFrom(const packet_friends_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_friends_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_friends_ans::UnsafeMergeFrom(const packet_friends_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_friends_info()) {
      mutable_friends_info()->::channel_server::user_info::MergeFrom(from.friends_info());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_friends_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_friends_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_friends_ans::CopyFrom(const packet_friends_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_friends_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_friends_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friends_info()) {
    if (!this->friends_info_->IsInitialized()) return false;
  }
  return true;
}

void packet_friends_ans::Swap(packet_friends_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_friends_ans::InternalSwap(packet_friends_ans* other) {
  std::swap(type_, other->type_);
  std::swap(friends_info_, other->friends_info_);
  std::swap(online_, other->online_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_friends_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_friends_ans_descriptor_;
  metadata.reflection = packet_friends_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_friends_ans

// required .channel_server.packet_friends_ans.ans_type type = 1;
bool packet_friends_ans::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_friends_ans::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_friends_ans::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_friends_ans::clear_type() {
  type_ = 1;
  clear_has_type();
}
::channel_server::packet_friends_ans_ans_type packet_friends_ans::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.type)
  return static_cast< ::channel_server::packet_friends_ans_ans_type >(type_);
}
void packet_friends_ans::set_type(::channel_server::packet_friends_ans_ans_type value) {
  assert(::channel_server::packet_friends_ans_ans_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_ans.type)
}

// optional .channel_server.user_info friends_info = 2;
bool packet_friends_ans::has_friends_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_friends_ans::set_has_friends_info() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_friends_ans::clear_has_friends_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_friends_ans::clear_friends_info() {
  if (friends_info_ != NULL) friends_info_->::channel_server::user_info::Clear();
  clear_has_friends_info();
}
const ::channel_server::user_info& packet_friends_ans::friends_info() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.friends_info)
  return friends_info_ != NULL ? *friends_info_
                         : *::channel_server::user_info::internal_default_instance();
}
::channel_server::user_info* packet_friends_ans::mutable_friends_info() {
  set_has_friends_info();
  if (friends_info_ == NULL) {
    friends_info_ = new ::channel_server::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_friends_ans.friends_info)
  return friends_info_;
}
::channel_server::user_info* packet_friends_ans::release_friends_info() {
  // @@protoc_insertion_point(field_release:channel_server.packet_friends_ans.friends_info)
  clear_has_friends_info();
  ::channel_server::user_info* temp = friends_info_;
  friends_info_ = NULL;
  return temp;
}
void packet_friends_ans::set_allocated_friends_info(::channel_server::user_info* friends_info) {
  delete friends_info_;
  friends_info_ = friends_info;
  if (friends_info) {
    set_has_friends_info();
  } else {
    clear_has_friends_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_friends_ans.friends_info)
}

// optional bool online = 3;
bool packet_friends_ans::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_friends_ans::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_friends_ans::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_friends_ans::clear_online() {
  online_ = false;
  clear_has_online();
}
bool packet_friends_ans::online() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.online)
  return online_;
}
void packet_friends_ans::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_ans.online)
}

inline const packet_friends_ans* packet_friends_ans::internal_default_instance() {
  return &packet_friends_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_play_rank_game_req::kNoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_play_rank_game_req::packet_play_rank_game_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_play_rank_game_req)
}

void packet_play_rank_game_req::InitAsDefaultInstance() {
}

packet_play_rank_game_req::packet_play_rank_game_req(const packet_play_rank_game_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_play_rank_game_req)
}

void packet_play_rank_game_req::SharedCtor() {
  _cached_size_ = 0;
  none_ = true;
}

packet_play_rank_game_req::~packet_play_rank_game_req() {
  // @@protoc_insertion_point(destructor:channel_server.packet_play_rank_game_req)
  SharedDtor();
}

void packet_play_rank_game_req::SharedDtor() {
}

void packet_play_rank_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_play_rank_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_play_rank_game_req_descriptor_;
}

const packet_play_rank_game_req& packet_play_rank_game_req::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_play_rank_game_req> packet_play_rank_game_req_default_instance_;

packet_play_rank_game_req* packet_play_rank_game_req::New(::google::protobuf::Arena* arena) const {
  packet_play_rank_game_req* n = new packet_play_rank_game_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_play_rank_game_req::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_play_rank_game_req)
  none_ = true;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_play_rank_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_play_rank_game_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool none = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_none();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &none_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_play_rank_game_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_play_rank_game_req)
  return false;
#undef DO_
}

void packet_play_rank_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_play_rank_game_req)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->none(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_play_rank_game_req)
}

::google::protobuf::uint8* packet_play_rank_game_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_play_rank_game_req)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->none(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_play_rank_game_req)
  return target;
}

size_t packet_play_rank_game_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_play_rank_game_req)
  size_t total_size = 0;

  // optional bool none = 1 [default = true];
  if (has_none()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_play_rank_game_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_play_rank_game_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_play_rank_game_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_play_rank_game_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_play_rank_game_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_play_rank_game_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_play_rank_game_req::MergeFrom(const packet_play_rank_game_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_play_rank_game_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_play_rank_game_req::UnsafeMergeFrom(const packet_play_rank_game_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_play_rank_game_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_play_rank_game_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_play_rank_game_req::CopyFrom(const packet_play_rank_game_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_play_rank_game_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_play_rank_game_req::IsInitialized() const {

  return true;
}

void packet_play_rank_game_req::Swap(packet_play_rank_game_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_play_rank_game_req::InternalSwap(packet_play_rank_game_req* other) {
  std::swap(none_, other->none_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_play_rank_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_play_rank_game_req_descriptor_;
  metadata.reflection = packet_play_rank_game_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_play_rank_game_req

// optional bool none = 1 [default = true];
bool packet_play_rank_game_req::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_play_rank_game_req::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_play_rank_game_req::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_play_rank_game_req::clear_none() {
  none_ = true;
  clear_has_none();
}
bool packet_play_rank_game_req::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_rank_game_req.none)
  return none_;
}
void packet_play_rank_game_req::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_rank_game_req.none)
}

inline const packet_play_rank_game_req* packet_play_rank_game_req::internal_default_instance() {
  return &packet_play_rank_game_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_play_rank_game_ans::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_play_rank_game_ans::packet_play_rank_game_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_play_rank_game_ans)
}

void packet_play_rank_game_ans::InitAsDefaultInstance() {
}

packet_play_rank_game_ans::packet_play_rank_game_ans(const packet_play_rank_game_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_play_rank_game_ans)
}

void packet_play_rank_game_ans::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

packet_play_rank_game_ans::~packet_play_rank_game_ans() {
  // @@protoc_insertion_point(destructor:channel_server.packet_play_rank_game_ans)
  SharedDtor();
}

void packet_play_rank_game_ans::SharedDtor() {
}

void packet_play_rank_game_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_play_rank_game_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_play_rank_game_ans_descriptor_;
}

const packet_play_rank_game_ans& packet_play_rank_game_ans::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_play_rank_game_ans> packet_play_rank_game_ans_default_instance_;

packet_play_rank_game_ans* packet_play_rank_game_ans::New(::google::protobuf::Arena* arena) const {
  packet_play_rank_game_ans* n = new packet_play_rank_game_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_play_rank_game_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_play_rank_game_ans)
  success_ = false;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_play_rank_game_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_play_rank_game_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_play_rank_game_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_play_rank_game_ans)
  return false;
#undef DO_
}

void packet_play_rank_game_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_play_rank_game_ans)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_play_rank_game_ans)
}

::google::protobuf::uint8* packet_play_rank_game_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_play_rank_game_ans)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_play_rank_game_ans)
  return target;
}

size_t packet_play_rank_game_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_play_rank_game_ans)
  size_t total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_play_rank_game_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_play_rank_game_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_play_rank_game_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_play_rank_game_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_play_rank_game_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_play_rank_game_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_play_rank_game_ans::MergeFrom(const packet_play_rank_game_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_play_rank_game_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_play_rank_game_ans::UnsafeMergeFrom(const packet_play_rank_game_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_play_rank_game_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_play_rank_game_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_play_rank_game_ans::CopyFrom(const packet_play_rank_game_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_play_rank_game_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_play_rank_game_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_play_rank_game_ans::Swap(packet_play_rank_game_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_play_rank_game_ans::InternalSwap(packet_play_rank_game_ans* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_play_rank_game_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_play_rank_game_ans_descriptor_;
  metadata.reflection = packet_play_rank_game_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_play_rank_game_ans

// required bool success = 1;
bool packet_play_rank_game_ans::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_play_rank_game_ans::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_play_rank_game_ans::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_play_rank_game_ans::clear_success() {
  success_ = false;
  clear_has_success();
}
bool packet_play_rank_game_ans::success() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_rank_game_ans.success)
  return success_;
}
void packet_play_rank_game_ans::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_rank_game_ans.success)
}

inline const packet_play_rank_game_ans* packet_play_rank_game_ans::internal_default_instance() {
  return &packet_play_rank_game_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* packet_play_friends_game_rel_req_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_play_friends_game_rel_req_type_descriptor_;
}
bool packet_play_friends_game_rel_req_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel::APPLY;
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel::ACCEPT;
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel::DENY;
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel::req_type_MIN;
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel::req_type_MAX;
const int packet_play_friends_game_rel::req_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_play_friends_game_rel::kTypeFieldNumber;
const int packet_play_friends_game_rel::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_play_friends_game_rel::packet_play_friends_game_rel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_play_friends_game_rel)
}

void packet_play_friends_game_rel::InitAsDefaultInstance() {
}

packet_play_friends_game_rel::packet_play_friends_game_rel(const packet_play_friends_game_rel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_play_friends_game_rel)
}

void packet_play_friends_game_rel::SharedCtor() {
  _cached_size_ = 0;
  target_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

packet_play_friends_game_rel::~packet_play_friends_game_rel() {
  // @@protoc_insertion_point(destructor:channel_server.packet_play_friends_game_rel)
  SharedDtor();
}

void packet_play_friends_game_rel::SharedDtor() {
  target_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_play_friends_game_rel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_play_friends_game_rel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_play_friends_game_rel_descriptor_;
}

const packet_play_friends_game_rel& packet_play_friends_game_rel::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_play_friends_game_rel> packet_play_friends_game_rel_default_instance_;

packet_play_friends_game_rel* packet_play_friends_game_rel::New(::google::protobuf::Arena* arena) const {
  packet_play_friends_game_rel* n = new packet_play_friends_game_rel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_play_friends_game_rel::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_play_friends_game_rel)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_target_id()) {
      target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_play_friends_game_rel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_play_friends_game_rel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::channel_server::packet_play_friends_game_rel_req_type_IsValid(value)) {
            set_type(static_cast< ::channel_server::packet_play_friends_game_rel_req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_id;
        break;
      }

      // required string target_id = 3;
      case 3: {
        if (tag == 26) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_id().data(), this->target_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.packet_play_friends_game_rel.target_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_play_friends_game_rel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_play_friends_game_rel)
  return false;
#undef DO_
}

void packet_play_friends_game_rel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_play_friends_game_rel)
  // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_id().data(), this->target_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_play_friends_game_rel.target_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_play_friends_game_rel)
}

::google::protobuf::uint8* packet_play_friends_game_rel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_play_friends_game_rel)
  // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_id().data(), this->target_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_play_friends_game_rel.target_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_play_friends_game_rel)
  return target;
}

size_t packet_play_friends_game_rel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.packet_play_friends_game_rel)
  size_t total_size = 0;

  if (has_type()) {
    // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_target_id()) {
    // required string target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_id());
  }

  return total_size;
}
size_t packet_play_friends_game_rel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_play_friends_game_rel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required string target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_play_friends_game_rel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_play_friends_game_rel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_play_friends_game_rel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_play_friends_game_rel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_play_friends_game_rel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_play_friends_game_rel)
    UnsafeMergeFrom(*source);
  }
}

void packet_play_friends_game_rel::MergeFrom(const packet_play_friends_game_rel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_play_friends_game_rel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_play_friends_game_rel::UnsafeMergeFrom(const packet_play_friends_game_rel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_id()) {
      set_has_target_id();
      target_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_play_friends_game_rel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_play_friends_game_rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_play_friends_game_rel::CopyFrom(const packet_play_friends_game_rel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_play_friends_game_rel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_play_friends_game_rel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_play_friends_game_rel::Swap(packet_play_friends_game_rel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_play_friends_game_rel::InternalSwap(packet_play_friends_game_rel* other) {
  std::swap(type_, other->type_);
  target_id_.Swap(&other->target_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_play_friends_game_rel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_play_friends_game_rel_descriptor_;
  metadata.reflection = packet_play_friends_game_rel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_play_friends_game_rel

// required .channel_server.packet_play_friends_game_rel.req_type type = 1;
bool packet_play_friends_game_rel::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_play_friends_game_rel::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_play_friends_game_rel::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_play_friends_game_rel::clear_type() {
  type_ = 0;
  clear_has_type();
}
::channel_server::packet_play_friends_game_rel_req_type packet_play_friends_game_rel::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_friends_game_rel.type)
  return static_cast< ::channel_server::packet_play_friends_game_rel_req_type >(type_);
}
void packet_play_friends_game_rel::set_type(::channel_server::packet_play_friends_game_rel_req_type value) {
  assert(::channel_server::packet_play_friends_game_rel_req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_friends_game_rel.type)
}

// required string target_id = 3;
bool packet_play_friends_game_rel::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_play_friends_game_rel::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_play_friends_game_rel::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_play_friends_game_rel::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_id();
}
const ::std::string& packet_play_friends_game_rel::target_id() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_friends_game_rel.target_id)
  return target_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_play_friends_game_rel::set_target_id(const ::std::string& value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_play_friends_game_rel.target_id)
}
void packet_play_friends_game_rel::set_target_id(const char* value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_play_friends_game_rel.target_id)
}
void packet_play_friends_game_rel::set_target_id(const char* value, size_t size) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_play_friends_game_rel.target_id)
}
::std::string* packet_play_friends_game_rel::mutable_target_id() {
  set_has_target_id();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_play_friends_game_rel.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_play_friends_game_rel::release_target_id() {
  // @@protoc_insertion_point(field_release:channel_server.packet_play_friends_game_rel.target_id)
  clear_has_target_id();
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_play_friends_game_rel::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_play_friends_game_rel.target_id)
}

inline const packet_play_friends_game_rel* packet_play_friends_game_rel::internal_default_instance() {
  return &packet_play_friends_game_rel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_matching_complete_ans::kRoomKeyFieldNumber;
const int packet_matching_complete_ans::kOpponentPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_matching_complete_ans::packet_matching_complete_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_matching_complete_ans)
}

void packet_matching_complete_ans::InitAsDefaultInstance() {
  opponent_player_ = const_cast< ::channel_server::user_info*>(
      ::channel_server::user_info::internal_default_instance());
}

packet_matching_complete_ans::packet_matching_complete_ans(const packet_matching_complete_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_matching_complete_ans)
}

void packet_matching_complete_ans::SharedCtor() {
  _cached_size_ = 0;
  room_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opponent_player_ = NULL;
}

packet_matching_complete_ans::~packet_matching_complete_ans() {
  // @@protoc_insertion_point(destructor:channel_server.packet_matching_complete_ans)
  SharedDtor();
}

void packet_matching_complete_ans::SharedDtor() {
  room_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &packet_matching_complete_ans_default_instance_.get()) {
    delete opponent_player_;
  }
}

void packet_matching_complete_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_matching_complete_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_matching_complete_ans_descriptor_;
}

const packet_matching_complete_ans& packet_matching_complete_ans::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_matching_complete_ans> packet_matching_complete_ans_default_instance_;

packet_matching_complete_ans* packet_matching_complete_ans::New(::google::protobuf::Arena* arena) const {
  packet_matching_complete_ans* n = new packet_matching_complete_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_matching_complete_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_matching_complete_ans)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_room_key()) {
      room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_opponent_player()) {
      if (opponent_player_ != NULL) opponent_player_->::channel_server::user_info::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_matching_complete_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_matching_complete_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_key().data(), this->room_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.packet_matching_complete_ans.room_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opponent_player;
        break;
      }

      // required .channel_server.user_info opponent_player = 2;
      case 2: {
        if (tag == 18) {
         parse_opponent_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_matching_complete_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_matching_complete_ans)
  return false;
#undef DO_
}

void packet_matching_complete_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_matching_complete_ans)
  // required string room_key = 1;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_matching_complete_ans.room_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_key(), output);
  }

  // required .channel_server.user_info opponent_player = 2;
  if (has_opponent_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->opponent_player_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_matching_complete_ans)
}

::google::protobuf::uint8* packet_matching_complete_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_matching_complete_ans)
  // required string room_key = 1;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_matching_complete_ans.room_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_key(), target);
  }

  // required .channel_server.user_info opponent_player = 2;
  if (has_opponent_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->opponent_player_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_matching_complete_ans)
  return target;
}

size_t packet_matching_complete_ans::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:channel_server.packet_matching_complete_ans)
  size_t total_size = 0;

  if (has_room_key()) {
    // required string room_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());
  }

  if (has_opponent_player()) {
    // required .channel_server.user_info opponent_player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->opponent_player_);
  }

  return total_size;
}
size_t packet_matching_complete_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_matching_complete_ans)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string room_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());

    // required .channel_server.user_info opponent_player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->opponent_player_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_matching_complete_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_matching_complete_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_matching_complete_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_matching_complete_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_matching_complete_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_matching_complete_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_matching_complete_ans::MergeFrom(const packet_matching_complete_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_matching_complete_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_matching_complete_ans::UnsafeMergeFrom(const packet_matching_complete_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_key()) {
      set_has_room_key();
      room_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_key_);
    }
    if (from.has_opponent_player()) {
      mutable_opponent_player()->::channel_server::user_info::MergeFrom(from.opponent_player());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_matching_complete_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_matching_complete_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_matching_complete_ans::CopyFrom(const packet_matching_complete_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_matching_complete_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_matching_complete_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_opponent_player()) {
    if (!this->opponent_player_->IsInitialized()) return false;
  }
  return true;
}

void packet_matching_complete_ans::Swap(packet_matching_complete_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_matching_complete_ans::InternalSwap(packet_matching_complete_ans* other) {
  room_key_.Swap(&other->room_key_);
  std::swap(opponent_player_, other->opponent_player_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_matching_complete_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_matching_complete_ans_descriptor_;
  metadata.reflection = packet_matching_complete_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_matching_complete_ans

// required string room_key = 1;
bool packet_matching_complete_ans::has_room_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_matching_complete_ans::set_has_room_key() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_matching_complete_ans::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_matching_complete_ans::clear_room_key() {
  room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_key();
}
const ::std::string& packet_matching_complete_ans::room_key() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_complete_ans.room_key)
  return room_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_matching_complete_ans::set_room_key(const ::std::string& value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_matching_complete_ans.room_key)
}
void packet_matching_complete_ans::set_room_key(const char* value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_matching_complete_ans.room_key)
}
void packet_matching_complete_ans::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_matching_complete_ans.room_key)
}
::std::string* packet_matching_complete_ans::mutable_room_key() {
  set_has_room_key();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_matching_complete_ans.room_key)
  return room_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_matching_complete_ans::release_room_key() {
  // @@protoc_insertion_point(field_release:channel_server.packet_matching_complete_ans.room_key)
  clear_has_room_key();
  return room_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_matching_complete_ans::set_allocated_room_key(::std::string* room_key) {
  if (room_key != NULL) {
    set_has_room_key();
  } else {
    clear_has_room_key();
  }
  room_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_key);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_matching_complete_ans.room_key)
}

// required .channel_server.user_info opponent_player = 2;
bool packet_matching_complete_ans::has_opponent_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_matching_complete_ans::set_has_opponent_player() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_matching_complete_ans::clear_has_opponent_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_matching_complete_ans::clear_opponent_player() {
  if (opponent_player_ != NULL) opponent_player_->::channel_server::user_info::Clear();
  clear_has_opponent_player();
}
const ::channel_server::user_info& packet_matching_complete_ans::opponent_player() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_complete_ans.opponent_player)
  return opponent_player_ != NULL ? *opponent_player_
                         : *::channel_server::user_info::internal_default_instance();
}
::channel_server::user_info* packet_matching_complete_ans::mutable_opponent_player() {
  set_has_opponent_player();
  if (opponent_player_ == NULL) {
    opponent_player_ = new ::channel_server::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_matching_complete_ans.opponent_player)
  return opponent_player_;
}
::channel_server::user_info* packet_matching_complete_ans::release_opponent_player() {
  // @@protoc_insertion_point(field_release:channel_server.packet_matching_complete_ans.opponent_player)
  clear_has_opponent_player();
  ::channel_server::user_info* temp = opponent_player_;
  opponent_player_ = NULL;
  return temp;
}
void packet_matching_complete_ans::set_allocated_opponent_player(::channel_server::user_info* opponent_player) {
  delete opponent_player_;
  opponent_player_ = opponent_player;
  if (opponent_player) {
    set_has_opponent_player();
  } else {
    clear_has_opponent_player();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_matching_complete_ans.opponent_player)
}

inline const packet_matching_complete_ans* packet_matching_complete_ans::internal_default_instance() {
  return &packet_matching_complete_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_matching_confirm::kNoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_matching_confirm::packet_matching_confirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_matching_confirm)
}

void packet_matching_confirm::InitAsDefaultInstance() {
}

packet_matching_confirm::packet_matching_confirm(const packet_matching_confirm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_matching_confirm)
}

void packet_matching_confirm::SharedCtor() {
  _cached_size_ = 0;
  none_ = true;
}

packet_matching_confirm::~packet_matching_confirm() {
  // @@protoc_insertion_point(destructor:channel_server.packet_matching_confirm)
  SharedDtor();
}

void packet_matching_confirm::SharedDtor() {
}

void packet_matching_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_matching_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_matching_confirm_descriptor_;
}

const packet_matching_confirm& packet_matching_confirm::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_matching_confirm> packet_matching_confirm_default_instance_;

packet_matching_confirm* packet_matching_confirm::New(::google::protobuf::Arena* arena) const {
  packet_matching_confirm* n = new packet_matching_confirm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_matching_confirm::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_matching_confirm)
  none_ = true;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_matching_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_matching_confirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool none = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_none();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &none_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_matching_confirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_matching_confirm)
  return false;
#undef DO_
}

void packet_matching_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_matching_confirm)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->none(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_matching_confirm)
}

::google::protobuf::uint8* packet_matching_confirm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_matching_confirm)
  // optional bool none = 1 [default = true];
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->none(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_matching_confirm)
  return target;
}

size_t packet_matching_confirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_matching_confirm)
  size_t total_size = 0;

  // optional bool none = 1 [default = true];
  if (has_none()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_matching_confirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_matching_confirm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_matching_confirm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_matching_confirm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_matching_confirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_matching_confirm)
    UnsafeMergeFrom(*source);
  }
}

void packet_matching_confirm::MergeFrom(const packet_matching_confirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_matching_confirm)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_matching_confirm::UnsafeMergeFrom(const packet_matching_confirm& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_matching_confirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_matching_confirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_matching_confirm::CopyFrom(const packet_matching_confirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_matching_confirm)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_matching_confirm::IsInitialized() const {

  return true;
}

void packet_matching_confirm::Swap(packet_matching_confirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_matching_confirm::InternalSwap(packet_matching_confirm* other) {
  std::swap(none_, other->none_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_matching_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_matching_confirm_descriptor_;
  metadata.reflection = packet_matching_confirm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_matching_confirm

// optional bool none = 1 [default = true];
bool packet_matching_confirm::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_matching_confirm::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_matching_confirm::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_matching_confirm::clear_none() {
  none_ = true;
  clear_has_none();
}
bool packet_matching_confirm::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_confirm.none)
  return none_;
}
void packet_matching_confirm::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_matching_confirm.none)
}

inline const packet_matching_confirm* packet_matching_confirm::internal_default_instance() {
  return &packet_matching_confirm_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_error_message::kErrorStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_error_message::packet_error_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_server.packet_error_message)
}

void packet_error_message::InitAsDefaultInstance() {
}

packet_error_message::packet_error_message(const packet_error_message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_server.packet_error_message)
}

void packet_error_message::SharedCtor() {
  _cached_size_ = 0;
  error_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_error_message::~packet_error_message() {
  // @@protoc_insertion_point(destructor:channel_server.packet_error_message)
  SharedDtor();
}

void packet_error_message::SharedDtor() {
  error_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_error_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_error_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_error_message_descriptor_;
}

const packet_error_message& packet_error_message::default_instance() {
  protobuf_InitDefaults_channel_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_error_message> packet_error_message_default_instance_;

packet_error_message* packet_error_message::New(::google::protobuf::Arena* arena) const {
  packet_error_message* n = new packet_error_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_error_message::Clear() {
// @@protoc_insertion_point(message_clear_start:channel_server.packet_error_message)
  if (has_error_string()) {
    error_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_error_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_server.packet_error_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_string().data(), this->error_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_server.packet_error_message.error_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_server.packet_error_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_server.packet_error_message)
  return false;
#undef DO_
}

void packet_error_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_server.packet_error_message)
  // required string error_string = 1;
  if (has_error_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_string().data(), this->error_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_error_message.error_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_server.packet_error_message)
}

::google::protobuf::uint8* packet_error_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channel_server.packet_error_message)
  // required string error_string = 1;
  if (has_error_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_string().data(), this->error_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_server.packet_error_message.error_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_server.packet_error_message)
  return target;
}

size_t packet_error_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channel_server.packet_error_message)
  size_t total_size = 0;

  // required string error_string = 1;
  if (has_error_string()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_string());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_error_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channel_server.packet_error_message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_error_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_error_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channel_server.packet_error_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channel_server.packet_error_message)
    UnsafeMergeFrom(*source);
  }
}

void packet_error_message::MergeFrom(const packet_error_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channel_server.packet_error_message)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_error_message::UnsafeMergeFrom(const packet_error_message& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_string()) {
      set_has_error_string();
      error_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_string_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_error_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channel_server.packet_error_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_error_message::CopyFrom(const packet_error_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channel_server.packet_error_message)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_error_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_error_message::Swap(packet_error_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_error_message::InternalSwap(packet_error_message* other) {
  error_string_.Swap(&other->error_string_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_error_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_error_message_descriptor_;
  metadata.reflection = packet_error_message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_error_message

// required string error_string = 1;
bool packet_error_message::has_error_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_error_message::set_has_error_string() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_error_message::clear_has_error_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_error_message::clear_error_string() {
  error_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_string();
}
const ::std::string& packet_error_message::error_string() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_error_message.error_string)
  return error_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_error_message::set_error_string(const ::std::string& value) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_error_message.error_string)
}
void packet_error_message::set_error_string(const char* value) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_error_message.error_string)
}
void packet_error_message::set_error_string(const char* value, size_t size) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_error_message.error_string)
}
::std::string* packet_error_message::mutable_error_string() {
  set_has_error_string();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_error_message.error_string)
  return error_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_error_message::release_error_string() {
  // @@protoc_insertion_point(field_release:channel_server.packet_error_message.error_string)
  clear_has_error_string();
  return error_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_error_message::set_allocated_error_string(::std::string* error_string) {
  if (error_string != NULL) {
    set_has_error_string();
  } else {
    clear_has_error_string();
  }
  error_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_string);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_error_message.error_string)
}

inline const packet_error_message* packet_error_message::internal_default_instance() {
  return &packet_error_message_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_server

// @@protoc_insertion_point(global_scope)
