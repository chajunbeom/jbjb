// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_protobuf.proto

#ifndef PROTOBUF_channel_5fprotobuf_2eproto__INCLUDED
#define PROTOBUF_channel_5fprotobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace channel_server {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channel_5fprotobuf_2eproto();
void protobuf_InitDefaults_channel_5fprotobuf_2eproto();
void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

class basic_info;
class game_history;
class packet_error_message;
class packet_friends_ans;
class packet_friends_req;
class packet_join_ans;
class packet_join_req;
class packet_logout_ans;
class packet_logout_req;
class packet_matching_complete_ans;
class packet_matching_confirm;
class packet_play_friends_game_rel;
class packet_play_rank_game_ans;
class packet_play_rank_game_req;
class user_info;

enum packet_friends_req_req_type {
  packet_friends_req_req_type_ADD = 1,
  packet_friends_req_req_type_DEL = 2,
  packet_friends_req_req_type_SEARCH = 3
};
bool packet_friends_req_req_type_IsValid(int value);
const packet_friends_req_req_type packet_friends_req_req_type_req_type_MIN = packet_friends_req_req_type_ADD;
const packet_friends_req_req_type packet_friends_req_req_type_req_type_MAX = packet_friends_req_req_type_SEARCH;
const int packet_friends_req_req_type_req_type_ARRAYSIZE = packet_friends_req_req_type_req_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* packet_friends_req_req_type_descriptor();
inline const ::std::string& packet_friends_req_req_type_Name(packet_friends_req_req_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    packet_friends_req_req_type_descriptor(), value);
}
inline bool packet_friends_req_req_type_Parse(
    const ::std::string& name, packet_friends_req_req_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<packet_friends_req_req_type>(
    packet_friends_req_req_type_descriptor(), name, value);
}
enum packet_friends_ans_ans_type {
  packet_friends_ans_ans_type_ADD_SUCCESS = 1,
  packet_friends_ans_ans_type_DEL_SUCCESS = 3,
  packet_friends_ans_ans_type_ADD_FAIL = 2,
  packet_friends_ans_ans_type_DEL_FAIL = 4,
  packet_friends_ans_ans_type_SEARCH_SUCCESS = 5,
  packet_friends_ans_ans_type_SEARCH_FAIL = 6
};
bool packet_friends_ans_ans_type_IsValid(int value);
const packet_friends_ans_ans_type packet_friends_ans_ans_type_ans_type_MIN = packet_friends_ans_ans_type_ADD_SUCCESS;
const packet_friends_ans_ans_type packet_friends_ans_ans_type_ans_type_MAX = packet_friends_ans_ans_type_SEARCH_FAIL;
const int packet_friends_ans_ans_type_ans_type_ARRAYSIZE = packet_friends_ans_ans_type_ans_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* packet_friends_ans_ans_type_descriptor();
inline const ::std::string& packet_friends_ans_ans_type_Name(packet_friends_ans_ans_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    packet_friends_ans_ans_type_descriptor(), value);
}
inline bool packet_friends_ans_ans_type_Parse(
    const ::std::string& name, packet_friends_ans_ans_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<packet_friends_ans_ans_type>(
    packet_friends_ans_ans_type_descriptor(), name, value);
}
enum packet_play_friends_game_rel_req_type {
  packet_play_friends_game_rel_req_type_APPLY = 0,
  packet_play_friends_game_rel_req_type_ACCEPT = 1,
  packet_play_friends_game_rel_req_type_DENY = 2
};
bool packet_play_friends_game_rel_req_type_IsValid(int value);
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel_req_type_req_type_MIN = packet_play_friends_game_rel_req_type_APPLY;
const packet_play_friends_game_rel_req_type packet_play_friends_game_rel_req_type_req_type_MAX = packet_play_friends_game_rel_req_type_DENY;
const int packet_play_friends_game_rel_req_type_req_type_ARRAYSIZE = packet_play_friends_game_rel_req_type_req_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* packet_play_friends_game_rel_req_type_descriptor();
inline const ::std::string& packet_play_friends_game_rel_req_type_Name(packet_play_friends_game_rel_req_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    packet_play_friends_game_rel_req_type_descriptor(), value);
}
inline bool packet_play_friends_game_rel_req_type_Parse(
    const ::std::string& name, packet_play_friends_game_rel_req_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<packet_play_friends_game_rel_req_type>(
    packet_play_friends_game_rel_req_type_descriptor(), name, value);
}
enum message_type {
  FRIENDS_REQ = 0,
  FRIENDS_ANS = 1,
  PLAY_RANK_REQ = 2,
  PLAY_RANK_ANS = 3,
  PLAY_FRIENDS_REL = 4,
  MATCH_COMPLETE = 5,
  MATCH_CONFIRM = 6,
  ERROR_MSG = 7,
  JOIN_REQ = 8,
  JOIN_ANS = 9,
  LOGOUT_REQ = 10,
  LOGOUT_ANS = 11
};
bool message_type_IsValid(int value);
const message_type message_type_MIN = FRIENDS_REQ;
const message_type message_type_MAX = LOGOUT_ANS;
const int message_type_ARRAYSIZE = message_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* message_type_descriptor();
inline const ::std::string& message_type_Name(message_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    message_type_descriptor(), value);
}
inline bool message_type_Parse(
    const ::std::string& name, message_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<message_type>(
    message_type_descriptor(), name, value);
}
enum rating {
  bronze = 0,
  silver = 1,
  gold = 2,
  platinum = 3,
  diamond = 4,
  master = 5,
  challenger = 6
};
bool rating_IsValid(int value);
const rating rating_MIN = bronze;
const rating rating_MAX = challenger;
const int rating_ARRAYSIZE = rating_MAX + 1;

const ::google::protobuf::EnumDescriptor* rating_descriptor();
inline const ::std::string& rating_Name(rating value) {
  return ::google::protobuf::internal::NameOfEnum(
    rating_descriptor(), value);
}
inline bool rating_Parse(
    const ::std::string& name, rating* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rating>(
    rating_descriptor(), name, value);
}
// ===================================================================

class basic_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.basic_info) */ {
 public:
  basic_info();
  virtual ~basic_info();

  basic_info(const basic_info& from);

  inline basic_info& operator=(const basic_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basic_info& default_instance();

  static const basic_info* internal_default_instance();

  void Swap(basic_info* other);

  // implements Message ----------------------------------------------

  inline basic_info* New() const { return New(NULL); }

  basic_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const basic_info& from);
  void MergeFrom(const basic_info& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(basic_info* other);
  void UnsafeMergeFrom(const basic_info& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:channel_server.basic_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<basic_info> basic_info_default_instance_;

// -------------------------------------------------------------------

class game_history : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.game_history) */ {
 public:
  game_history();
  virtual ~game_history();

  game_history(const game_history& from);

  inline game_history& operator=(const game_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_history& default_instance();

  static const game_history* internal_default_instance();

  void Swap(game_history* other);

  // implements Message ----------------------------------------------

  inline game_history* New() const { return New(NULL); }

  game_history* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_history& from);
  void MergeFrom(const game_history& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(game_history* other);
  void UnsafeMergeFrom(const game_history& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rating_score = 1;
  bool has_rating_score() const;
  void clear_rating_score();
  static const int kRatingScoreFieldNumber = 1;
  ::google::protobuf::int32 rating_score() const;
  void set_rating_score(::google::protobuf::int32 value);

  // required int32 total_games = 2;
  bool has_total_games() const;
  void clear_total_games();
  static const int kTotalGamesFieldNumber = 2;
  ::google::protobuf::int32 total_games() const;
  void set_total_games(::google::protobuf::int32 value);

  // required int32 win = 3;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 3;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // required int32 lose = 4;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 4;
  ::google::protobuf::int32 lose() const;
  void set_lose(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:channel_server.game_history)
 private:
  inline void set_has_rating_score();
  inline void clear_has_rating_score();
  inline void set_has_total_games();
  inline void clear_has_total_games();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 rating_score_;
  ::google::protobuf::int32 total_games_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<game_history> game_history_default_instance_;

// -------------------------------------------------------------------

class user_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.user_info) */ {
 public:
  user_info();
  virtual ~user_info();

  user_info(const user_info& from);

  inline user_info& operator=(const user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info& default_instance();

  static const user_info* internal_default_instance();

  void Swap(user_info* other);

  // implements Message ----------------------------------------------

  inline user_info* New() const { return New(NULL); }

  user_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info& from);
  void MergeFrom(const user_info& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(user_info* other);
  void UnsafeMergeFrom(const user_info& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .channel_server.game_history game_history_ = 1;
  bool has_game_history_() const;
  void clear_game_history_();
  static const int kGameHistoryFieldNumber = 1;
  const ::channel_server::game_history& game_history_() const;
  ::channel_server::game_history* mutable_game_history_();
  ::channel_server::game_history* release_game_history_();
  void set_allocated_game_history_(::channel_server::game_history* game_history_);

  // required .channel_server.basic_info basic_info_ = 2;
  bool has_basic_info_() const;
  void clear_basic_info_();
  static const int kBasicInfoFieldNumber = 2;
  const ::channel_server::basic_info& basic_info_() const;
  ::channel_server::basic_info* mutable_basic_info_();
  ::channel_server::basic_info* release_basic_info_();
  void set_allocated_basic_info_(::channel_server::basic_info* basic_info_);

  // @@protoc_insertion_point(class_scope:channel_server.user_info)
 private:
  inline void set_has_game_history_();
  inline void clear_has_game_history_();
  inline void set_has_basic_info_();
  inline void clear_has_basic_info_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_server::game_history* game_history__;
  ::channel_server::basic_info* basic_info__;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<user_info> user_info_default_instance_;

// -------------------------------------------------------------------

class packet_join_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_join_ans) */ {
 public:
  packet_join_ans();
  virtual ~packet_join_ans();

  packet_join_ans(const packet_join_ans& from);

  inline packet_join_ans& operator=(const packet_join_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_join_ans& default_instance();

  static const packet_join_ans* internal_default_instance();

  void Swap(packet_join_ans* other);

  // implements Message ----------------------------------------------

  inline packet_join_ans* New() const { return New(NULL); }

  packet_join_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_join_ans& from);
  void MergeFrom(const packet_join_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_join_ans* other);
  void UnsafeMergeFrom(const packet_join_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional .channel_server.game_history history = 2;
  bool has_history() const;
  void clear_history();
  static const int kHistoryFieldNumber = 2;
  const ::channel_server::game_history& history() const;
  ::channel_server::game_history* mutable_history();
  ::channel_server::game_history* release_history();
  void set_allocated_history(::channel_server::game_history* history);

  // repeated .channel_server.basic_info friends_list = 3;
  int friends_list_size() const;
  void clear_friends_list();
  static const int kFriendsListFieldNumber = 3;
  const ::channel_server::basic_info& friends_list(int index) const;
  ::channel_server::basic_info* mutable_friends_list(int index);
  ::channel_server::basic_info* add_friends_list();
  ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >*
      mutable_friends_list();
  const ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >&
      friends_list() const;

  // @@protoc_insertion_point(class_scope:channel_server.packet_join_ans)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_history();
  inline void clear_has_history();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info > friends_list_;
  ::channel_server::game_history* history_;
  bool success_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_join_ans> packet_join_ans_default_instance_;

// -------------------------------------------------------------------

class packet_join_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_join_req) */ {
 public:
  packet_join_req();
  virtual ~packet_join_req();

  packet_join_req(const packet_join_req& from);

  inline packet_join_req& operator=(const packet_join_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_join_req& default_instance();

  static const packet_join_req* internal_default_instance();

  void Swap(packet_join_req* other);

  // implements Message ----------------------------------------------

  inline packet_join_req* New() const { return New(NULL); }

  packet_join_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_join_req& from);
  void MergeFrom(const packet_join_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_join_req* other);
  void UnsafeMergeFrom(const packet_join_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:channel_server.packet_join_req)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_id();
  inline void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_join_req> packet_join_req_default_instance_;

// -------------------------------------------------------------------

class packet_logout_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_logout_req) */ {
 public:
  packet_logout_req();
  virtual ~packet_logout_req();

  packet_logout_req(const packet_logout_req& from);

  inline packet_logout_req& operator=(const packet_logout_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_logout_req& default_instance();

  static const packet_logout_req* internal_default_instance();

  void Swap(packet_logout_req* other);

  // implements Message ----------------------------------------------

  inline packet_logout_req* New() const { return New(NULL); }

  packet_logout_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_logout_req& from);
  void MergeFrom(const packet_logout_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_logout_req* other);
  void UnsafeMergeFrom(const packet_logout_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool none = 1 [default = true];
  bool has_none() const;
  void clear_none();
  static const int kNoneFieldNumber = 1;
  bool none() const;
  void set_none(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_logout_req)
 private:
  inline void set_has_none();
  inline void clear_has_none();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool none_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_logout_req> packet_logout_req_default_instance_;

// -------------------------------------------------------------------

class packet_logout_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_logout_ans) */ {
 public:
  packet_logout_ans();
  virtual ~packet_logout_ans();

  packet_logout_ans(const packet_logout_ans& from);

  inline packet_logout_ans& operator=(const packet_logout_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_logout_ans& default_instance();

  static const packet_logout_ans* internal_default_instance();

  void Swap(packet_logout_ans* other);

  // implements Message ----------------------------------------------

  inline packet_logout_ans* New() const { return New(NULL); }

  packet_logout_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_logout_ans& from);
  void MergeFrom(const packet_logout_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_logout_ans* other);
  void UnsafeMergeFrom(const packet_logout_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool none = 1 [default = true];
  bool has_none() const;
  void clear_none();
  static const int kNoneFieldNumber = 1;
  bool none() const;
  void set_none(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_logout_ans)
 private:
  inline void set_has_none();
  inline void clear_has_none();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool none_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_logout_ans> packet_logout_ans_default_instance_;

// -------------------------------------------------------------------

class packet_friends_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_friends_req) */ {
 public:
  packet_friends_req();
  virtual ~packet_friends_req();

  packet_friends_req(const packet_friends_req& from);

  inline packet_friends_req& operator=(const packet_friends_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_friends_req& default_instance();

  static const packet_friends_req* internal_default_instance();

  void Swap(packet_friends_req* other);

  // implements Message ----------------------------------------------

  inline packet_friends_req* New() const { return New(NULL); }

  packet_friends_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_friends_req& from);
  void MergeFrom(const packet_friends_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_friends_req* other);
  void UnsafeMergeFrom(const packet_friends_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef packet_friends_req_req_type req_type;
  static const req_type ADD =
    packet_friends_req_req_type_ADD;
  static const req_type DEL =
    packet_friends_req_req_type_DEL;
  static const req_type SEARCH =
    packet_friends_req_req_type_SEARCH;
  static inline bool req_type_IsValid(int value) {
    return packet_friends_req_req_type_IsValid(value);
  }
  static const req_type req_type_MIN =
    packet_friends_req_req_type_req_type_MIN;
  static const req_type req_type_MAX =
    packet_friends_req_req_type_req_type_MAX;
  static const int req_type_ARRAYSIZE =
    packet_friends_req_req_type_req_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  req_type_descriptor() {
    return packet_friends_req_req_type_descriptor();
  }
  static inline const ::std::string& req_type_Name(req_type value) {
    return packet_friends_req_req_type_Name(value);
  }
  static inline bool req_type_Parse(const ::std::string& name,
      req_type* value) {
    return packet_friends_req_req_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.packet_friends_req.req_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::channel_server::packet_friends_req_req_type type() const;
  void set_type(::channel_server::packet_friends_req_req_type value);

  // required .channel_server.basic_info target_info = 2;
  bool has_target_info() const;
  void clear_target_info();
  static const int kTargetInfoFieldNumber = 2;
  const ::channel_server::basic_info& target_info() const;
  ::channel_server::basic_info* mutable_target_info();
  ::channel_server::basic_info* release_target_info();
  void set_allocated_target_info(::channel_server::basic_info* target_info);

  // @@protoc_insertion_point(class_scope:channel_server.packet_friends_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_info();
  inline void clear_has_target_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_server::basic_info* target_info_;
  int type_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_friends_req> packet_friends_req_default_instance_;

// -------------------------------------------------------------------

class packet_friends_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_friends_ans) */ {
 public:
  packet_friends_ans();
  virtual ~packet_friends_ans();

  packet_friends_ans(const packet_friends_ans& from);

  inline packet_friends_ans& operator=(const packet_friends_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_friends_ans& default_instance();

  static const packet_friends_ans* internal_default_instance();

  void Swap(packet_friends_ans* other);

  // implements Message ----------------------------------------------

  inline packet_friends_ans* New() const { return New(NULL); }

  packet_friends_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_friends_ans& from);
  void MergeFrom(const packet_friends_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_friends_ans* other);
  void UnsafeMergeFrom(const packet_friends_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef packet_friends_ans_ans_type ans_type;
  static const ans_type ADD_SUCCESS =
    packet_friends_ans_ans_type_ADD_SUCCESS;
  static const ans_type DEL_SUCCESS =
    packet_friends_ans_ans_type_DEL_SUCCESS;
  static const ans_type ADD_FAIL =
    packet_friends_ans_ans_type_ADD_FAIL;
  static const ans_type DEL_FAIL =
    packet_friends_ans_ans_type_DEL_FAIL;
  static const ans_type SEARCH_SUCCESS =
    packet_friends_ans_ans_type_SEARCH_SUCCESS;
  static const ans_type SEARCH_FAIL =
    packet_friends_ans_ans_type_SEARCH_FAIL;
  static inline bool ans_type_IsValid(int value) {
    return packet_friends_ans_ans_type_IsValid(value);
  }
  static const ans_type ans_type_MIN =
    packet_friends_ans_ans_type_ans_type_MIN;
  static const ans_type ans_type_MAX =
    packet_friends_ans_ans_type_ans_type_MAX;
  static const int ans_type_ARRAYSIZE =
    packet_friends_ans_ans_type_ans_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ans_type_descriptor() {
    return packet_friends_ans_ans_type_descriptor();
  }
  static inline const ::std::string& ans_type_Name(ans_type value) {
    return packet_friends_ans_ans_type_Name(value);
  }
  static inline bool ans_type_Parse(const ::std::string& name,
      ans_type* value) {
    return packet_friends_ans_ans_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.packet_friends_ans.ans_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::channel_server::packet_friends_ans_ans_type type() const;
  void set_type(::channel_server::packet_friends_ans_ans_type value);

  // optional .channel_server.user_info friends_info = 2;
  bool has_friends_info() const;
  void clear_friends_info();
  static const int kFriendsInfoFieldNumber = 2;
  const ::channel_server::user_info& friends_info() const;
  ::channel_server::user_info* mutable_friends_info();
  ::channel_server::user_info* release_friends_info();
  void set_allocated_friends_info(::channel_server::user_info* friends_info);

  // optional bool online = 3;
  bool has_online() const;
  void clear_online();
  static const int kOnlineFieldNumber = 3;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_friends_ans)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_friends_info();
  inline void clear_has_friends_info();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_server::user_info* friends_info_;
  bool online_;
  int type_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_friends_ans> packet_friends_ans_default_instance_;

// -------------------------------------------------------------------

class packet_play_rank_game_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_play_rank_game_req) */ {
 public:
  packet_play_rank_game_req();
  virtual ~packet_play_rank_game_req();

  packet_play_rank_game_req(const packet_play_rank_game_req& from);

  inline packet_play_rank_game_req& operator=(const packet_play_rank_game_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_play_rank_game_req& default_instance();

  static const packet_play_rank_game_req* internal_default_instance();

  void Swap(packet_play_rank_game_req* other);

  // implements Message ----------------------------------------------

  inline packet_play_rank_game_req* New() const { return New(NULL); }

  packet_play_rank_game_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_play_rank_game_req& from);
  void MergeFrom(const packet_play_rank_game_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_play_rank_game_req* other);
  void UnsafeMergeFrom(const packet_play_rank_game_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool none = 1 [default = true];
  bool has_none() const;
  void clear_none();
  static const int kNoneFieldNumber = 1;
  bool none() const;
  void set_none(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_play_rank_game_req)
 private:
  inline void set_has_none();
  inline void clear_has_none();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool none_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_play_rank_game_req> packet_play_rank_game_req_default_instance_;

// -------------------------------------------------------------------

class packet_play_rank_game_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_play_rank_game_ans) */ {
 public:
  packet_play_rank_game_ans();
  virtual ~packet_play_rank_game_ans();

  packet_play_rank_game_ans(const packet_play_rank_game_ans& from);

  inline packet_play_rank_game_ans& operator=(const packet_play_rank_game_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_play_rank_game_ans& default_instance();

  static const packet_play_rank_game_ans* internal_default_instance();

  void Swap(packet_play_rank_game_ans* other);

  // implements Message ----------------------------------------------

  inline packet_play_rank_game_ans* New() const { return New(NULL); }

  packet_play_rank_game_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_play_rank_game_ans& from);
  void MergeFrom(const packet_play_rank_game_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_play_rank_game_ans* other);
  void UnsafeMergeFrom(const packet_play_rank_game_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_play_rank_game_ans)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_play_rank_game_ans> packet_play_rank_game_ans_default_instance_;

// -------------------------------------------------------------------

class packet_play_friends_game_rel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_play_friends_game_rel) */ {
 public:
  packet_play_friends_game_rel();
  virtual ~packet_play_friends_game_rel();

  packet_play_friends_game_rel(const packet_play_friends_game_rel& from);

  inline packet_play_friends_game_rel& operator=(const packet_play_friends_game_rel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_play_friends_game_rel& default_instance();

  static const packet_play_friends_game_rel* internal_default_instance();

  void Swap(packet_play_friends_game_rel* other);

  // implements Message ----------------------------------------------

  inline packet_play_friends_game_rel* New() const { return New(NULL); }

  packet_play_friends_game_rel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_play_friends_game_rel& from);
  void MergeFrom(const packet_play_friends_game_rel& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_play_friends_game_rel* other);
  void UnsafeMergeFrom(const packet_play_friends_game_rel& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef packet_play_friends_game_rel_req_type req_type;
  static const req_type APPLY =
    packet_play_friends_game_rel_req_type_APPLY;
  static const req_type ACCEPT =
    packet_play_friends_game_rel_req_type_ACCEPT;
  static const req_type DENY =
    packet_play_friends_game_rel_req_type_DENY;
  static inline bool req_type_IsValid(int value) {
    return packet_play_friends_game_rel_req_type_IsValid(value);
  }
  static const req_type req_type_MIN =
    packet_play_friends_game_rel_req_type_req_type_MIN;
  static const req_type req_type_MAX =
    packet_play_friends_game_rel_req_type_req_type_MAX;
  static const int req_type_ARRAYSIZE =
    packet_play_friends_game_rel_req_type_req_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  req_type_descriptor() {
    return packet_play_friends_game_rel_req_type_descriptor();
  }
  static inline const ::std::string& req_type_Name(req_type value) {
    return packet_play_friends_game_rel_req_type_Name(value);
  }
  static inline bool req_type_Parse(const ::std::string& name,
      req_type* value) {
    return packet_play_friends_game_rel_req_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_server.packet_play_friends_game_rel.req_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::channel_server::packet_play_friends_game_rel_req_type type() const;
  void set_type(::channel_server::packet_play_friends_game_rel_req_type value);

  // required string target_id = 3;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  const ::std::string& target_id() const;
  void set_target_id(const ::std::string& value);
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  ::std::string* mutable_target_id();
  ::std::string* release_target_id();
  void set_allocated_target_id(::std::string* target_id);

  // @@protoc_insertion_point(class_scope:channel_server.packet_play_friends_game_rel)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr target_id_;
  int type_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_play_friends_game_rel> packet_play_friends_game_rel_default_instance_;

// -------------------------------------------------------------------

class packet_matching_complete_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_matching_complete_ans) */ {
 public:
  packet_matching_complete_ans();
  virtual ~packet_matching_complete_ans();

  packet_matching_complete_ans(const packet_matching_complete_ans& from);

  inline packet_matching_complete_ans& operator=(const packet_matching_complete_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_matching_complete_ans& default_instance();

  static const packet_matching_complete_ans* internal_default_instance();

  void Swap(packet_matching_complete_ans* other);

  // implements Message ----------------------------------------------

  inline packet_matching_complete_ans* New() const { return New(NULL); }

  packet_matching_complete_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_matching_complete_ans& from);
  void MergeFrom(const packet_matching_complete_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_matching_complete_ans* other);
  void UnsafeMergeFrom(const packet_matching_complete_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_key = 1;
  bool has_room_key() const;
  void clear_room_key();
  static const int kRoomKeyFieldNumber = 1;
  const ::std::string& room_key() const;
  void set_room_key(const ::std::string& value);
  void set_room_key(const char* value);
  void set_room_key(const char* value, size_t size);
  ::std::string* mutable_room_key();
  ::std::string* release_room_key();
  void set_allocated_room_key(::std::string* room_key);

  // required .channel_server.user_info opponent_player = 2;
  bool has_opponent_player() const;
  void clear_opponent_player();
  static const int kOpponentPlayerFieldNumber = 2;
  const ::channel_server::user_info& opponent_player() const;
  ::channel_server::user_info* mutable_opponent_player();
  ::channel_server::user_info* release_opponent_player();
  void set_allocated_opponent_player(::channel_server::user_info* opponent_player);

  // @@protoc_insertion_point(class_scope:channel_server.packet_matching_complete_ans)
 private:
  inline void set_has_room_key();
  inline void clear_has_room_key();
  inline void set_has_opponent_player();
  inline void clear_has_opponent_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr room_key_;
  ::channel_server::user_info* opponent_player_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_matching_complete_ans> packet_matching_complete_ans_default_instance_;

// -------------------------------------------------------------------

class packet_matching_confirm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_matching_confirm) */ {
 public:
  packet_matching_confirm();
  virtual ~packet_matching_confirm();

  packet_matching_confirm(const packet_matching_confirm& from);

  inline packet_matching_confirm& operator=(const packet_matching_confirm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_matching_confirm& default_instance();

  static const packet_matching_confirm* internal_default_instance();

  void Swap(packet_matching_confirm* other);

  // implements Message ----------------------------------------------

  inline packet_matching_confirm* New() const { return New(NULL); }

  packet_matching_confirm* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_matching_confirm& from);
  void MergeFrom(const packet_matching_confirm& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_matching_confirm* other);
  void UnsafeMergeFrom(const packet_matching_confirm& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool none = 1 [default = true];
  bool has_none() const;
  void clear_none();
  static const int kNoneFieldNumber = 1;
  bool none() const;
  void set_none(bool value);

  // @@protoc_insertion_point(class_scope:channel_server.packet_matching_confirm)
 private:
  inline void set_has_none();
  inline void clear_has_none();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool none_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_matching_confirm> packet_matching_confirm_default_instance_;

// -------------------------------------------------------------------

class packet_error_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_server.packet_error_message) */ {
 public:
  packet_error_message();
  virtual ~packet_error_message();

  packet_error_message(const packet_error_message& from);

  inline packet_error_message& operator=(const packet_error_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_error_message& default_instance();

  static const packet_error_message* internal_default_instance();

  void Swap(packet_error_message* other);

  // implements Message ----------------------------------------------

  inline packet_error_message* New() const { return New(NULL); }

  packet_error_message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_error_message& from);
  void MergeFrom(const packet_error_message& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_error_message* other);
  void UnsafeMergeFrom(const packet_error_message& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_string = 1;
  bool has_error_string() const;
  void clear_error_string();
  static const int kErrorStringFieldNumber = 1;
  const ::std::string& error_string() const;
  void set_error_string(const ::std::string& value);
  void set_error_string(const char* value);
  void set_error_string(const char* value, size_t size);
  ::std::string* mutable_error_string();
  ::std::string* release_error_string();
  void set_allocated_error_string(::std::string* error_string);

  // @@protoc_insertion_point(class_scope:channel_server.packet_error_message)
 private:
  inline void set_has_error_string();
  inline void clear_has_error_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_string_;
  friend void  protobuf_InitDefaults_channel_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_channel_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_channel_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_channel_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_error_message> packet_error_message_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// basic_info

// required string id = 1;
inline bool basic_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void basic_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void basic_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void basic_info::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& basic_info::id() const {
  // @@protoc_insertion_point(field_get:channel_server.basic_info.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basic_info::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.basic_info.id)
}
inline void basic_info::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.basic_info.id)
}
inline void basic_info::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.basic_info.id)
}
inline ::std::string* basic_info::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:channel_server.basic_info.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basic_info::release_id() {
  // @@protoc_insertion_point(field_release:channel_server.basic_info.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basic_info::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.basic_info.id)
}

inline const basic_info* basic_info::internal_default_instance() {
  return &basic_info_default_instance_.get();
}
// -------------------------------------------------------------------

// game_history

// required int32 rating_score = 1;
inline bool game_history::has_rating_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_history::set_has_rating_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_history::clear_has_rating_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_history::clear_rating_score() {
  rating_score_ = 0;
  clear_has_rating_score();
}
inline ::google::protobuf::int32 game_history::rating_score() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.rating_score)
  return rating_score_;
}
inline void game_history::set_rating_score(::google::protobuf::int32 value) {
  set_has_rating_score();
  rating_score_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.rating_score)
}

// required int32 total_games = 2;
inline bool game_history::has_total_games() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_history::set_has_total_games() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_history::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_history::clear_total_games() {
  total_games_ = 0;
  clear_has_total_games();
}
inline ::google::protobuf::int32 game_history::total_games() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.total_games)
  return total_games_;
}
inline void game_history::set_total_games(::google::protobuf::int32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.total_games)
}

// required int32 win = 3;
inline bool game_history::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_history::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_history::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_history::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 game_history::win() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.win)
  return win_;
}
inline void game_history::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.win)
}

// required int32 lose = 4;
inline bool game_history::has_lose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_history::set_has_lose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_history::clear_has_lose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_history::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 game_history::lose() const {
  // @@protoc_insertion_point(field_get:channel_server.game_history.lose)
  return lose_;
}
inline void game_history::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:channel_server.game_history.lose)
}

inline const game_history* game_history::internal_default_instance() {
  return &game_history_default_instance_.get();
}
// -------------------------------------------------------------------

// user_info

// required .channel_server.game_history game_history_ = 1;
inline bool user_info::has_game_history_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_info::set_has_game_history_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_info::clear_has_game_history_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_info::clear_game_history_() {
  if (game_history__ != NULL) game_history__->::channel_server::game_history::Clear();
  clear_has_game_history_();
}
inline const ::channel_server::game_history& user_info::game_history_() const {
  // @@protoc_insertion_point(field_get:channel_server.user_info.game_history_)
  return game_history__ != NULL ? *game_history__
                         : *::channel_server::game_history::internal_default_instance();
}
inline ::channel_server::game_history* user_info::mutable_game_history_() {
  set_has_game_history_();
  if (game_history__ == NULL) {
    game_history__ = new ::channel_server::game_history;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.user_info.game_history_)
  return game_history__;
}
inline ::channel_server::game_history* user_info::release_game_history_() {
  // @@protoc_insertion_point(field_release:channel_server.user_info.game_history_)
  clear_has_game_history_();
  ::channel_server::game_history* temp = game_history__;
  game_history__ = NULL;
  return temp;
}
inline void user_info::set_allocated_game_history_(::channel_server::game_history* game_history_) {
  delete game_history__;
  game_history__ = game_history_;
  if (game_history_) {
    set_has_game_history_();
  } else {
    clear_has_game_history_();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.user_info.game_history_)
}

// required .channel_server.basic_info basic_info_ = 2;
inline bool user_info::has_basic_info_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info::set_has_basic_info_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info::clear_has_basic_info_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info::clear_basic_info_() {
  if (basic_info__ != NULL) basic_info__->::channel_server::basic_info::Clear();
  clear_has_basic_info_();
}
inline const ::channel_server::basic_info& user_info::basic_info_() const {
  // @@protoc_insertion_point(field_get:channel_server.user_info.basic_info_)
  return basic_info__ != NULL ? *basic_info__
                         : *::channel_server::basic_info::internal_default_instance();
}
inline ::channel_server::basic_info* user_info::mutable_basic_info_() {
  set_has_basic_info_();
  if (basic_info__ == NULL) {
    basic_info__ = new ::channel_server::basic_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.user_info.basic_info_)
  return basic_info__;
}
inline ::channel_server::basic_info* user_info::release_basic_info_() {
  // @@protoc_insertion_point(field_release:channel_server.user_info.basic_info_)
  clear_has_basic_info_();
  ::channel_server::basic_info* temp = basic_info__;
  basic_info__ = NULL;
  return temp;
}
inline void user_info::set_allocated_basic_info_(::channel_server::basic_info* basic_info_) {
  delete basic_info__;
  basic_info__ = basic_info_;
  if (basic_info_) {
    set_has_basic_info_();
  } else {
    clear_has_basic_info_();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.user_info.basic_info_)
}

inline const user_info* user_info::internal_default_instance() {
  return &user_info_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_join_ans

// required bool success = 1;
inline bool packet_join_ans::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_join_ans::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_join_ans::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_join_ans::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool packet_join_ans::success() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.success)
  return success_;
}
inline void packet_join_ans::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_join_ans.success)
}

// optional .channel_server.game_history history = 2;
inline bool packet_join_ans::has_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_join_ans::set_has_history() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_join_ans::clear_has_history() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_join_ans::clear_history() {
  if (history_ != NULL) history_->::channel_server::game_history::Clear();
  clear_has_history();
}
inline const ::channel_server::game_history& packet_join_ans::history() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.history)
  return history_ != NULL ? *history_
                         : *::channel_server::game_history::internal_default_instance();
}
inline ::channel_server::game_history* packet_join_ans::mutable_history() {
  set_has_history();
  if (history_ == NULL) {
    history_ = new ::channel_server::game_history;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_ans.history)
  return history_;
}
inline ::channel_server::game_history* packet_join_ans::release_history() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_ans.history)
  clear_has_history();
  ::channel_server::game_history* temp = history_;
  history_ = NULL;
  return temp;
}
inline void packet_join_ans::set_allocated_history(::channel_server::game_history* history) {
  delete history_;
  history_ = history;
  if (history) {
    set_has_history();
  } else {
    clear_has_history();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_ans.history)
}

// repeated .channel_server.basic_info friends_list = 3;
inline int packet_join_ans::friends_list_size() const {
  return friends_list_.size();
}
inline void packet_join_ans::clear_friends_list() {
  friends_list_.Clear();
}
inline const ::channel_server::basic_info& packet_join_ans::friends_list(int index) const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_ans.friends_list)
  return friends_list_.Get(index);
}
inline ::channel_server::basic_info* packet_join_ans::mutable_friends_list(int index) {
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_ans.friends_list)
  return friends_list_.Mutable(index);
}
inline ::channel_server::basic_info* packet_join_ans::add_friends_list() {
  // @@protoc_insertion_point(field_add:channel_server.packet_join_ans.friends_list)
  return friends_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >*
packet_join_ans::mutable_friends_list() {
  // @@protoc_insertion_point(field_mutable_list:channel_server.packet_join_ans.friends_list)
  return &friends_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channel_server::basic_info >&
packet_join_ans::friends_list() const {
  // @@protoc_insertion_point(field_list:channel_server.packet_join_ans.friends_list)
  return friends_list_;
}

inline const packet_join_ans* packet_join_ans::internal_default_instance() {
  return &packet_join_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_join_req

// required string token = 1;
inline bool packet_join_req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_join_req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_join_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_join_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& packet_join_req::token() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_req.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_join_req::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_join_req.token)
}
inline void packet_join_req::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_join_req.token)
}
inline void packet_join_req::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_join_req.token)
}
inline ::std::string* packet_join_req::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_join_req::release_token() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_req.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_join_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_req.token)
}

// required string id = 2;
inline bool packet_join_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_join_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_join_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_join_req::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& packet_join_req::id() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_join_req.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_join_req::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_join_req.id)
}
inline void packet_join_req::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_join_req.id)
}
inline void packet_join_req::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_join_req.id)
}
inline ::std::string* packet_join_req::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_join_req.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_join_req::release_id() {
  // @@protoc_insertion_point(field_release:channel_server.packet_join_req.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_join_req::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_join_req.id)
}

inline const packet_join_req* packet_join_req::internal_default_instance() {
  return &packet_join_req_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_logout_req

// optional bool none = 1 [default = true];
inline bool packet_logout_req::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_logout_req::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_logout_req::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_logout_req::clear_none() {
  none_ = true;
  clear_has_none();
}
inline bool packet_logout_req::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_logout_req.none)
  return none_;
}
inline void packet_logout_req::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_logout_req.none)
}

inline const packet_logout_req* packet_logout_req::internal_default_instance() {
  return &packet_logout_req_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_logout_ans

// optional bool none = 1 [default = true];
inline bool packet_logout_ans::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_logout_ans::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_logout_ans::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_logout_ans::clear_none() {
  none_ = true;
  clear_has_none();
}
inline bool packet_logout_ans::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_logout_ans.none)
  return none_;
}
inline void packet_logout_ans::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_logout_ans.none)
}

inline const packet_logout_ans* packet_logout_ans::internal_default_instance() {
  return &packet_logout_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_friends_req

// required .channel_server.packet_friends_req.req_type type = 1;
inline bool packet_friends_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_friends_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_friends_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_friends_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::channel_server::packet_friends_req_req_type packet_friends_req::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_req.type)
  return static_cast< ::channel_server::packet_friends_req_req_type >(type_);
}
inline void packet_friends_req::set_type(::channel_server::packet_friends_req_req_type value) {
  assert(::channel_server::packet_friends_req_req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_req.type)
}

// required .channel_server.basic_info target_info = 2;
inline bool packet_friends_req::has_target_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_friends_req::set_has_target_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_friends_req::clear_has_target_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_friends_req::clear_target_info() {
  if (target_info_ != NULL) target_info_->::channel_server::basic_info::Clear();
  clear_has_target_info();
}
inline const ::channel_server::basic_info& packet_friends_req::target_info() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_req.target_info)
  return target_info_ != NULL ? *target_info_
                         : *::channel_server::basic_info::internal_default_instance();
}
inline ::channel_server::basic_info* packet_friends_req::mutable_target_info() {
  set_has_target_info();
  if (target_info_ == NULL) {
    target_info_ = new ::channel_server::basic_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_friends_req.target_info)
  return target_info_;
}
inline ::channel_server::basic_info* packet_friends_req::release_target_info() {
  // @@protoc_insertion_point(field_release:channel_server.packet_friends_req.target_info)
  clear_has_target_info();
  ::channel_server::basic_info* temp = target_info_;
  target_info_ = NULL;
  return temp;
}
inline void packet_friends_req::set_allocated_target_info(::channel_server::basic_info* target_info) {
  delete target_info_;
  target_info_ = target_info;
  if (target_info) {
    set_has_target_info();
  } else {
    clear_has_target_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_friends_req.target_info)
}

inline const packet_friends_req* packet_friends_req::internal_default_instance() {
  return &packet_friends_req_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_friends_ans

// required .channel_server.packet_friends_ans.ans_type type = 1;
inline bool packet_friends_ans::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_friends_ans::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_friends_ans::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_friends_ans::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::channel_server::packet_friends_ans_ans_type packet_friends_ans::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.type)
  return static_cast< ::channel_server::packet_friends_ans_ans_type >(type_);
}
inline void packet_friends_ans::set_type(::channel_server::packet_friends_ans_ans_type value) {
  assert(::channel_server::packet_friends_ans_ans_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_ans.type)
}

// optional .channel_server.user_info friends_info = 2;
inline bool packet_friends_ans::has_friends_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_friends_ans::set_has_friends_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_friends_ans::clear_has_friends_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_friends_ans::clear_friends_info() {
  if (friends_info_ != NULL) friends_info_->::channel_server::user_info::Clear();
  clear_has_friends_info();
}
inline const ::channel_server::user_info& packet_friends_ans::friends_info() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.friends_info)
  return friends_info_ != NULL ? *friends_info_
                         : *::channel_server::user_info::internal_default_instance();
}
inline ::channel_server::user_info* packet_friends_ans::mutable_friends_info() {
  set_has_friends_info();
  if (friends_info_ == NULL) {
    friends_info_ = new ::channel_server::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_friends_ans.friends_info)
  return friends_info_;
}
inline ::channel_server::user_info* packet_friends_ans::release_friends_info() {
  // @@protoc_insertion_point(field_release:channel_server.packet_friends_ans.friends_info)
  clear_has_friends_info();
  ::channel_server::user_info* temp = friends_info_;
  friends_info_ = NULL;
  return temp;
}
inline void packet_friends_ans::set_allocated_friends_info(::channel_server::user_info* friends_info) {
  delete friends_info_;
  friends_info_ = friends_info;
  if (friends_info) {
    set_has_friends_info();
  } else {
    clear_has_friends_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_friends_ans.friends_info)
}

// optional bool online = 3;
inline bool packet_friends_ans::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_friends_ans::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_friends_ans::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_friends_ans::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool packet_friends_ans::online() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_friends_ans.online)
  return online_;
}
inline void packet_friends_ans::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_friends_ans.online)
}

inline const packet_friends_ans* packet_friends_ans::internal_default_instance() {
  return &packet_friends_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_play_rank_game_req

// optional bool none = 1 [default = true];
inline bool packet_play_rank_game_req::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_play_rank_game_req::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_play_rank_game_req::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_play_rank_game_req::clear_none() {
  none_ = true;
  clear_has_none();
}
inline bool packet_play_rank_game_req::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_rank_game_req.none)
  return none_;
}
inline void packet_play_rank_game_req::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_rank_game_req.none)
}

inline const packet_play_rank_game_req* packet_play_rank_game_req::internal_default_instance() {
  return &packet_play_rank_game_req_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_play_rank_game_ans

// required bool success = 1;
inline bool packet_play_rank_game_ans::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_play_rank_game_ans::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_play_rank_game_ans::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_play_rank_game_ans::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool packet_play_rank_game_ans::success() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_rank_game_ans.success)
  return success_;
}
inline void packet_play_rank_game_ans::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_rank_game_ans.success)
}

inline const packet_play_rank_game_ans* packet_play_rank_game_ans::internal_default_instance() {
  return &packet_play_rank_game_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_play_friends_game_rel

// required .channel_server.packet_play_friends_game_rel.req_type type = 1;
inline bool packet_play_friends_game_rel::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_play_friends_game_rel::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_play_friends_game_rel::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_play_friends_game_rel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::channel_server::packet_play_friends_game_rel_req_type packet_play_friends_game_rel::type() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_friends_game_rel.type)
  return static_cast< ::channel_server::packet_play_friends_game_rel_req_type >(type_);
}
inline void packet_play_friends_game_rel::set_type(::channel_server::packet_play_friends_game_rel_req_type value) {
  assert(::channel_server::packet_play_friends_game_rel_req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_play_friends_game_rel.type)
}

// required string target_id = 3;
inline bool packet_play_friends_game_rel::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_play_friends_game_rel::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_play_friends_game_rel::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_play_friends_game_rel::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_id();
}
inline const ::std::string& packet_play_friends_game_rel::target_id() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_play_friends_game_rel.target_id)
  return target_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_play_friends_game_rel::set_target_id(const ::std::string& value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_play_friends_game_rel.target_id)
}
inline void packet_play_friends_game_rel::set_target_id(const char* value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_play_friends_game_rel.target_id)
}
inline void packet_play_friends_game_rel::set_target_id(const char* value, size_t size) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_play_friends_game_rel.target_id)
}
inline ::std::string* packet_play_friends_game_rel::mutable_target_id() {
  set_has_target_id();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_play_friends_game_rel.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_play_friends_game_rel::release_target_id() {
  // @@protoc_insertion_point(field_release:channel_server.packet_play_friends_game_rel.target_id)
  clear_has_target_id();
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_play_friends_game_rel::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_play_friends_game_rel.target_id)
}

inline const packet_play_friends_game_rel* packet_play_friends_game_rel::internal_default_instance() {
  return &packet_play_friends_game_rel_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_matching_complete_ans

// required string room_key = 1;
inline bool packet_matching_complete_ans::has_room_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_matching_complete_ans::set_has_room_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_matching_complete_ans::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_matching_complete_ans::clear_room_key() {
  room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_key();
}
inline const ::std::string& packet_matching_complete_ans::room_key() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_complete_ans.room_key)
  return room_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_matching_complete_ans::set_room_key(const ::std::string& value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_matching_complete_ans.room_key)
}
inline void packet_matching_complete_ans::set_room_key(const char* value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_matching_complete_ans.room_key)
}
inline void packet_matching_complete_ans::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_matching_complete_ans.room_key)
}
inline ::std::string* packet_matching_complete_ans::mutable_room_key() {
  set_has_room_key();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_matching_complete_ans.room_key)
  return room_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_matching_complete_ans::release_room_key() {
  // @@protoc_insertion_point(field_release:channel_server.packet_matching_complete_ans.room_key)
  clear_has_room_key();
  return room_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_matching_complete_ans::set_allocated_room_key(::std::string* room_key) {
  if (room_key != NULL) {
    set_has_room_key();
  } else {
    clear_has_room_key();
  }
  room_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_key);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_matching_complete_ans.room_key)
}

// required .channel_server.user_info opponent_player = 2;
inline bool packet_matching_complete_ans::has_opponent_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_matching_complete_ans::set_has_opponent_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_matching_complete_ans::clear_has_opponent_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_matching_complete_ans::clear_opponent_player() {
  if (opponent_player_ != NULL) opponent_player_->::channel_server::user_info::Clear();
  clear_has_opponent_player();
}
inline const ::channel_server::user_info& packet_matching_complete_ans::opponent_player() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_complete_ans.opponent_player)
  return opponent_player_ != NULL ? *opponent_player_
                         : *::channel_server::user_info::internal_default_instance();
}
inline ::channel_server::user_info* packet_matching_complete_ans::mutable_opponent_player() {
  set_has_opponent_player();
  if (opponent_player_ == NULL) {
    opponent_player_ = new ::channel_server::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_server.packet_matching_complete_ans.opponent_player)
  return opponent_player_;
}
inline ::channel_server::user_info* packet_matching_complete_ans::release_opponent_player() {
  // @@protoc_insertion_point(field_release:channel_server.packet_matching_complete_ans.opponent_player)
  clear_has_opponent_player();
  ::channel_server::user_info* temp = opponent_player_;
  opponent_player_ = NULL;
  return temp;
}
inline void packet_matching_complete_ans::set_allocated_opponent_player(::channel_server::user_info* opponent_player) {
  delete opponent_player_;
  opponent_player_ = opponent_player;
  if (opponent_player) {
    set_has_opponent_player();
  } else {
    clear_has_opponent_player();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_matching_complete_ans.opponent_player)
}

inline const packet_matching_complete_ans* packet_matching_complete_ans::internal_default_instance() {
  return &packet_matching_complete_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_matching_confirm

// optional bool none = 1 [default = true];
inline bool packet_matching_confirm::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_matching_confirm::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_matching_confirm::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_matching_confirm::clear_none() {
  none_ = true;
  clear_has_none();
}
inline bool packet_matching_confirm::none() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_matching_confirm.none)
  return none_;
}
inline void packet_matching_confirm::set_none(bool value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:channel_server.packet_matching_confirm.none)
}

inline const packet_matching_confirm* packet_matching_confirm::internal_default_instance() {
  return &packet_matching_confirm_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_error_message

// required string error_string = 1;
inline bool packet_error_message::has_error_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_error_message::set_has_error_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_error_message::clear_has_error_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_error_message::clear_error_string() {
  error_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_string();
}
inline const ::std::string& packet_error_message::error_string() const {
  // @@protoc_insertion_point(field_get:channel_server.packet_error_message.error_string)
  return error_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_error_message::set_error_string(const ::std::string& value) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_server.packet_error_message.error_string)
}
inline void packet_error_message::set_error_string(const char* value) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_server.packet_error_message.error_string)
}
inline void packet_error_message::set_error_string(const char* value, size_t size) {
  set_has_error_string();
  error_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_server.packet_error_message.error_string)
}
inline ::std::string* packet_error_message::mutable_error_string() {
  set_has_error_string();
  // @@protoc_insertion_point(field_mutable:channel_server.packet_error_message.error_string)
  return error_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_error_message::release_error_string() {
  // @@protoc_insertion_point(field_release:channel_server.packet_error_message.error_string)
  clear_has_error_string();
  return error_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_error_message::set_allocated_error_string(::std::string* error_string) {
  if (error_string != NULL) {
    set_has_error_string();
  } else {
    clear_has_error_string();
  }
  error_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_string);
  // @@protoc_insertion_point(field_set_allocated:channel_server.packet_error_message.error_string)
}

inline const packet_error_message* packet_error_message::internal_default_instance() {
  return &packet_error_message_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::channel_server::packet_friends_req_req_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::packet_friends_req_req_type>() {
  return ::channel_server::packet_friends_req_req_type_descriptor();
}
template <> struct is_proto_enum< ::channel_server::packet_friends_ans_ans_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::packet_friends_ans_ans_type>() {
  return ::channel_server::packet_friends_ans_ans_type_descriptor();
}
template <> struct is_proto_enum< ::channel_server::packet_play_friends_game_rel_req_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::packet_play_friends_game_rel_req_type>() {
  return ::channel_server::packet_play_friends_game_rel_req_type_descriptor();
}
template <> struct is_proto_enum< ::channel_server::message_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::message_type>() {
  return ::channel_server::message_type_descriptor();
}
template <> struct is_proto_enum< ::channel_server::rating> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_server::rating>() {
  return ::channel_server::rating_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channel_5fprotobuf_2eproto__INCLUDED
