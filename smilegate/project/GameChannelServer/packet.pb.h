// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace channel_serv {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_packet_2eproto();
void protobuf_InitDefaults_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class error_msg;
class friends_ans;
class friends_req;
class join_ans;
class join_req;
class logout_ntf;
class matching_complete_ans;
class play_friends_game_req;
class play_rank_game_req;
class user_info;

enum friends_req_F_REQ {
  friends_req_F_REQ_ADD = 1,
  friends_req_F_REQ_DEL = 2,
  friends_req_F_REQ_SEARCH = 3
};
bool friends_req_F_REQ_IsValid(int value);
const friends_req_F_REQ friends_req_F_REQ_F_REQ_MIN = friends_req_F_REQ_ADD;
const friends_req_F_REQ friends_req_F_REQ_F_REQ_MAX = friends_req_F_REQ_SEARCH;
const int friends_req_F_REQ_F_REQ_ARRAYSIZE = friends_req_F_REQ_F_REQ_MAX + 1;

const ::google::protobuf::EnumDescriptor* friends_req_F_REQ_descriptor();
inline const ::std::string& friends_req_F_REQ_Name(friends_req_F_REQ value) {
  return ::google::protobuf::internal::NameOfEnum(
    friends_req_F_REQ_descriptor(), value);
}
inline bool friends_req_F_REQ_Parse(
    const ::std::string& name, friends_req_F_REQ* value) {
  return ::google::protobuf::internal::ParseNamedEnum<friends_req_F_REQ>(
    friends_req_F_REQ_descriptor(), name, value);
}
enum play_friends_game_req_FLAG {
  play_friends_game_req_FLAG_APPLY = 0,
  play_friends_game_req_FLAG_ACCEPT = 1,
  play_friends_game_req_FLAG_DENY = 2
};
bool play_friends_game_req_FLAG_IsValid(int value);
const play_friends_game_req_FLAG play_friends_game_req_FLAG_FLAG_MIN = play_friends_game_req_FLAG_APPLY;
const play_friends_game_req_FLAG play_friends_game_req_FLAG_FLAG_MAX = play_friends_game_req_FLAG_DENY;
const int play_friends_game_req_FLAG_FLAG_ARRAYSIZE = play_friends_game_req_FLAG_FLAG_MAX + 1;

const ::google::protobuf::EnumDescriptor* play_friends_game_req_FLAG_descriptor();
inline const ::std::string& play_friends_game_req_FLAG_Name(play_friends_game_req_FLAG value) {
  return ::google::protobuf::internal::NameOfEnum(
    play_friends_game_req_FLAG_descriptor(), value);
}
inline bool play_friends_game_req_FLAG_Parse(
    const ::std::string& name, play_friends_game_req_FLAG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<play_friends_game_req_FLAG>(
    play_friends_game_req_FLAG_descriptor(), name, value);
}
enum MESSAGE_ID {
  FRIENDS_REQ = 0,
  FRIENDS_ANS = 1,
  PLAY_RANK_REQ = 2,
  PLAY_FRIENDS_REQ = 3,
  MATCH_COMPLETE = 4,
  ERROR_MSG = 5,
  JOIN_REQ = 6,
  JOIN_ANS = 7,
  LOGOUT_NTF = 8
};
bool MESSAGE_ID_IsValid(int value);
const MESSAGE_ID MESSAGE_ID_MIN = FRIENDS_REQ;
const MESSAGE_ID MESSAGE_ID_MAX = LOGOUT_NTF;
const int MESSAGE_ID_ARRAYSIZE = MESSAGE_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_ID_descriptor();
inline const ::std::string& MESSAGE_ID_Name(MESSAGE_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_ID_descriptor(), value);
}
inline bool MESSAGE_ID_Parse(
    const ::std::string& name, MESSAGE_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_ID>(
    MESSAGE_ID_descriptor(), name, value);
}
enum RATING {
  BRONZE = 0,
  SILVER = 1,
  GOLD = 2,
  PLATINUM = 3,
  DIAMOND = 4,
  MASTER = 5,
  CHAL = 6
};
bool RATING_IsValid(int value);
const RATING RATING_MIN = BRONZE;
const RATING RATING_MAX = CHAL;
const int RATING_ARRAYSIZE = RATING_MAX + 1;

const ::google::protobuf::EnumDescriptor* RATING_descriptor();
inline const ::std::string& RATING_Name(RATING value) {
  return ::google::protobuf::internal::NameOfEnum(
    RATING_descriptor(), value);
}
inline bool RATING_Parse(
    const ::std::string& name, RATING* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RATING>(
    RATING_descriptor(), name, value);
}
// ===================================================================

class user_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.user_info) */ {
 public:
  user_info();
  virtual ~user_info();

  user_info(const user_info& from);

  inline user_info& operator=(const user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info& default_instance();

  static const user_info* internal_default_instance();

  void Swap(user_info* other);

  // implements Message ----------------------------------------------

  inline user_info* New() const { return New(NULL); }

  user_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info& from);
  void MergeFrom(const user_info& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(user_info* other);
  void UnsafeMergeFrom(const user_info& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .channel_serv.RATING rating = 1;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 1;
  ::channel_serv::RATING rating() const;
  void set_rating(::channel_serv::RATING value);

  // required int32 battle_history = 2;
  bool has_battle_history() const;
  void clear_battle_history();
  static const int kBattleHistoryFieldNumber = 2;
  ::google::protobuf::int32 battle_history() const;
  void set_battle_history(::google::protobuf::int32 value);

  // required int32 win = 3;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 3;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // required int32 lose = 4;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 4;
  ::google::protobuf::int32 lose() const;
  void set_lose(::google::protobuf::int32 value);

  // required string user_id = 5;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:channel_serv.user_info)
 private:
  inline void set_has_rating();
  inline void clear_has_rating();
  inline void set_has_battle_history();
  inline void clear_has_battle_history();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  int rating_;
  ::google::protobuf::int32 battle_history_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<user_info> user_info_default_instance_;

// -------------------------------------------------------------------

class join_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.join_ans) */ {
 public:
  join_ans();
  virtual ~join_ans();

  join_ans(const join_ans& from);

  inline join_ans& operator=(const join_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join_ans& default_instance();

  static const join_ans* internal_default_instance();

  void Swap(join_ans* other);

  // implements Message ----------------------------------------------

  inline join_ans* New() const { return New(NULL); }

  join_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join_ans& from);
  void MergeFrom(const join_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(join_ans* other);
  void UnsafeMergeFrom(const join_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .channel_serv.user_info my_info = 1;
  bool has_my_info() const;
  void clear_my_info();
  static const int kMyInfoFieldNumber = 1;
  const ::channel_serv::user_info& my_info() const;
  ::channel_serv::user_info* mutable_my_info();
  ::channel_serv::user_info* release_my_info();
  void set_allocated_my_info(::channel_serv::user_info* my_info);

  // repeated string friends_id_list = 2;
  int friends_id_list_size() const;
  void clear_friends_id_list();
  static const int kFriendsIdListFieldNumber = 2;
  const ::std::string& friends_id_list(int index) const;
  ::std::string* mutable_friends_id_list(int index);
  void set_friends_id_list(int index, const ::std::string& value);
  void set_friends_id_list(int index, const char* value);
  void set_friends_id_list(int index, const char* value, size_t size);
  ::std::string* add_friends_id_list();
  void add_friends_id_list(const ::std::string& value);
  void add_friends_id_list(const char* value);
  void add_friends_id_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& friends_id_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends_id_list();

  // @@protoc_insertion_point(class_scope:channel_serv.join_ans)
 private:
  inline void set_has_my_info();
  inline void clear_has_my_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_id_list_;
  ::channel_serv::user_info* my_info_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<join_ans> join_ans_default_instance_;

// -------------------------------------------------------------------

class join_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.join_req) */ {
 public:
  join_req();
  virtual ~join_req();

  join_req(const join_req& from);

  inline join_req& operator=(const join_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join_req& default_instance();

  static const join_req* internal_default_instance();

  void Swap(join_req* other);

  // implements Message ----------------------------------------------

  inline join_req* New() const { return New(NULL); }

  join_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join_req& from);
  void MergeFrom(const join_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(join_req* other);
  void UnsafeMergeFrom(const join_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:channel_serv.join_req)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<join_req> join_req_default_instance_;

// -------------------------------------------------------------------

class logout_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.logout_ntf) */ {
 public:
  logout_ntf();
  virtual ~logout_ntf();

  logout_ntf(const logout_ntf& from);

  inline logout_ntf& operator=(const logout_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_ntf& default_instance();

  static const logout_ntf* internal_default_instance();

  void Swap(logout_ntf* other);

  // implements Message ----------------------------------------------

  inline logout_ntf* New() const { return New(NULL); }

  logout_ntf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logout_ntf& from);
  void MergeFrom(const logout_ntf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(logout_ntf* other);
  void UnsafeMergeFrom(const logout_ntf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:channel_serv.logout_ntf)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<logout_ntf> logout_ntf_default_instance_;

// -------------------------------------------------------------------

class friends_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.friends_req) */ {
 public:
  friends_req();
  virtual ~friends_req();

  friends_req(const friends_req& from);

  inline friends_req& operator=(const friends_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friends_req& default_instance();

  static const friends_req* internal_default_instance();

  void Swap(friends_req* other);

  // implements Message ----------------------------------------------

  inline friends_req* New() const { return New(NULL); }

  friends_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friends_req& from);
  void MergeFrom(const friends_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(friends_req* other);
  void UnsafeMergeFrom(const friends_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef friends_req_F_REQ F_REQ;
  static const F_REQ ADD =
    friends_req_F_REQ_ADD;
  static const F_REQ DEL =
    friends_req_F_REQ_DEL;
  static const F_REQ SEARCH =
    friends_req_F_REQ_SEARCH;
  static inline bool F_REQ_IsValid(int value) {
    return friends_req_F_REQ_IsValid(value);
  }
  static const F_REQ F_REQ_MIN =
    friends_req_F_REQ_F_REQ_MIN;
  static const F_REQ F_REQ_MAX =
    friends_req_F_REQ_F_REQ_MAX;
  static const int F_REQ_ARRAYSIZE =
    friends_req_F_REQ_F_REQ_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  F_REQ_descriptor() {
    return friends_req_F_REQ_descriptor();
  }
  static inline const ::std::string& F_REQ_Name(F_REQ value) {
    return friends_req_F_REQ_Name(value);
  }
  static inline bool F_REQ_Parse(const ::std::string& name,
      F_REQ* value) {
    return friends_req_F_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_serv.friends_req.F_REQ req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  ::channel_serv::friends_req_F_REQ req() const;
  void set_req(::channel_serv::friends_req_F_REQ value);

  // required string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional bool on_off = 3;
  bool has_on_off() const;
  void clear_on_off();
  static const int kOnOffFieldNumber = 3;
  bool on_off() const;
  void set_on_off(bool value);

  // @@protoc_insertion_point(class_scope:channel_serv.friends_req)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_on_off();
  inline void clear_has_on_off();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  bool on_off_;
  int req_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<friends_req> friends_req_default_instance_;

// -------------------------------------------------------------------

class friends_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.friends_ans) */ {
 public:
  friends_ans();
  virtual ~friends_ans();

  friends_ans(const friends_ans& from);

  inline friends_ans& operator=(const friends_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friends_ans& default_instance();

  static const friends_ans* internal_default_instance();

  void Swap(friends_ans* other);

  // implements Message ----------------------------------------------

  inline friends_ans* New() const { return New(NULL); }

  friends_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friends_ans& from);
  void MergeFrom(const friends_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(friends_ans* other);
  void UnsafeMergeFrom(const friends_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .channel_serv.user_info user_information = 1;
  bool has_user_information() const;
  void clear_user_information();
  static const int kUserInformationFieldNumber = 1;
  const ::channel_serv::user_info& user_information() const;
  ::channel_serv::user_info* mutable_user_information();
  ::channel_serv::user_info* release_user_information();
  void set_allocated_user_information(::channel_serv::user_info* user_information);

  // required bool online = 2;
  bool has_online() const;
  void clear_online();
  static const int kOnlineFieldNumber = 2;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:channel_serv.friends_ans)
 private:
  inline void set_has_user_information();
  inline void clear_has_user_information();
  inline void set_has_online();
  inline void clear_has_online();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_serv::user_info* user_information_;
  bool online_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<friends_ans> friends_ans_default_instance_;

// -------------------------------------------------------------------

class play_rank_game_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.play_rank_game_req) */ {
 public:
  play_rank_game_req();
  virtual ~play_rank_game_req();

  play_rank_game_req(const play_rank_game_req& from);

  inline play_rank_game_req& operator=(const play_rank_game_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const play_rank_game_req& default_instance();

  static const play_rank_game_req* internal_default_instance();

  void Swap(play_rank_game_req* other);

  // implements Message ----------------------------------------------

  inline play_rank_game_req* New() const { return New(NULL); }

  play_rank_game_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const play_rank_game_req& from);
  void MergeFrom(const play_rank_game_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(play_rank_game_req* other);
  void UnsafeMergeFrom(const play_rank_game_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .channel_serv.user_info my_info = 1;
  bool has_my_info() const;
  void clear_my_info();
  static const int kMyInfoFieldNumber = 1;
  const ::channel_serv::user_info& my_info() const;
  ::channel_serv::user_info* mutable_my_info();
  ::channel_serv::user_info* release_my_info();
  void set_allocated_my_info(::channel_serv::user_info* my_info);

  // @@protoc_insertion_point(class_scope:channel_serv.play_rank_game_req)
 private:
  inline void set_has_my_info();
  inline void clear_has_my_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_serv::user_info* my_info_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<play_rank_game_req> play_rank_game_req_default_instance_;

// -------------------------------------------------------------------

class play_friends_game_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.play_friends_game_req) */ {
 public:
  play_friends_game_req();
  virtual ~play_friends_game_req();

  play_friends_game_req(const play_friends_game_req& from);

  inline play_friends_game_req& operator=(const play_friends_game_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const play_friends_game_req& default_instance();

  static const play_friends_game_req* internal_default_instance();

  void Swap(play_friends_game_req* other);

  // implements Message ----------------------------------------------

  inline play_friends_game_req* New() const { return New(NULL); }

  play_friends_game_req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const play_friends_game_req& from);
  void MergeFrom(const play_friends_game_req& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(play_friends_game_req* other);
  void UnsafeMergeFrom(const play_friends_game_req& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef play_friends_game_req_FLAG FLAG;
  static const FLAG APPLY =
    play_friends_game_req_FLAG_APPLY;
  static const FLAG ACCEPT =
    play_friends_game_req_FLAG_ACCEPT;
  static const FLAG DENY =
    play_friends_game_req_FLAG_DENY;
  static inline bool FLAG_IsValid(int value) {
    return play_friends_game_req_FLAG_IsValid(value);
  }
  static const FLAG FLAG_MIN =
    play_friends_game_req_FLAG_FLAG_MIN;
  static const FLAG FLAG_MAX =
    play_friends_game_req_FLAG_FLAG_MAX;
  static const int FLAG_ARRAYSIZE =
    play_friends_game_req_FLAG_FLAG_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FLAG_descriptor() {
    return play_friends_game_req_FLAG_descriptor();
  }
  static inline const ::std::string& FLAG_Name(FLAG value) {
    return play_friends_game_req_FLAG_Name(value);
  }
  static inline bool FLAG_Parse(const ::std::string& name,
      FLAG* value) {
    return play_friends_game_req_FLAG_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
  bool has_flag_id() const;
  void clear_flag_id();
  static const int kFlagIdFieldNumber = 1;
  ::channel_serv::play_friends_game_req_FLAG flag_id() const;
  void set_flag_id(::channel_serv::play_friends_game_req_FLAG value);

  // required string recv_id = 3;
  bool has_recv_id() const;
  void clear_recv_id();
  static const int kRecvIdFieldNumber = 3;
  const ::std::string& recv_id() const;
  void set_recv_id(const ::std::string& value);
  void set_recv_id(const char* value);
  void set_recv_id(const char* value, size_t size);
  ::std::string* mutable_recv_id();
  ::std::string* release_recv_id();
  void set_allocated_recv_id(::std::string* recv_id);

  // @@protoc_insertion_point(class_scope:channel_serv.play_friends_game_req)
 private:
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_recv_id();
  inline void clear_has_recv_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr recv_id_;
  int flag_id_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<play_friends_game_req> play_friends_game_req_default_instance_;

// -------------------------------------------------------------------

class matching_complete_ans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.matching_complete_ans) */ {
 public:
  matching_complete_ans();
  virtual ~matching_complete_ans();

  matching_complete_ans(const matching_complete_ans& from);

  inline matching_complete_ans& operator=(const matching_complete_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matching_complete_ans& default_instance();

  static const matching_complete_ans* internal_default_instance();

  void Swap(matching_complete_ans* other);

  // implements Message ----------------------------------------------

  inline matching_complete_ans* New() const { return New(NULL); }

  matching_complete_ans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matching_complete_ans& from);
  void MergeFrom(const matching_complete_ans& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(matching_complete_ans* other);
  void UnsafeMergeFrom(const matching_complete_ans& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_number = 1;
  bool has_room_number() const;
  void clear_room_number();
  static const int kRoomNumberFieldNumber = 1;
  ::google::protobuf::int32 room_number() const;
  void set_room_number(::google::protobuf::int32 value);

  // required .channel_serv.user_info opponent_player = 2;
  bool has_opponent_player() const;
  void clear_opponent_player();
  static const int kOpponentPlayerFieldNumber = 2;
  const ::channel_serv::user_info& opponent_player() const;
  ::channel_serv::user_info* mutable_opponent_player();
  ::channel_serv::user_info* release_opponent_player();
  void set_allocated_opponent_player(::channel_serv::user_info* opponent_player);

  // @@protoc_insertion_point(class_scope:channel_serv.matching_complete_ans)
 private:
  inline void set_has_room_number();
  inline void clear_has_room_number();
  inline void set_has_opponent_player();
  inline void clear_has_opponent_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::channel_serv::user_info* opponent_player_;
  ::google::protobuf::int32 room_number_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<matching_complete_ans> matching_complete_ans_default_instance_;

// -------------------------------------------------------------------

class error_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channel_serv.error_msg) */ {
 public:
  error_msg();
  virtual ~error_msg();

  error_msg(const error_msg& from);

  inline error_msg& operator=(const error_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const error_msg& default_instance();

  static const error_msg* internal_default_instance();

  void Swap(error_msg* other);

  // implements Message ----------------------------------------------

  inline error_msg* New() const { return New(NULL); }

  error_msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const error_msg& from);
  void MergeFrom(const error_msg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(error_msg* other);
  void UnsafeMergeFrom(const error_msg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_message = 1;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:channel_serv.error_msg)
 private:
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  friend void  protobuf_InitDefaults_packet_2eproto_impl();
  friend void  protobuf_AddDesc_packet_2eproto_impl();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<error_msg> error_msg_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info

// required .channel_serv.RATING rating = 1;
inline bool user_info::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_info::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_info::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_info::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline ::channel_serv::RATING user_info::rating() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.rating)
  return static_cast< ::channel_serv::RATING >(rating_);
}
inline void user_info::set_rating(::channel_serv::RATING value) {
  assert(::channel_serv::RATING_IsValid(value));
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.rating)
}

// required int32 battle_history = 2;
inline bool user_info::has_battle_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info::set_has_battle_history() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info::clear_has_battle_history() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info::clear_battle_history() {
  battle_history_ = 0;
  clear_has_battle_history();
}
inline ::google::protobuf::int32 user_info::battle_history() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.battle_history)
  return battle_history_;
}
inline void user_info::set_battle_history(::google::protobuf::int32 value) {
  set_has_battle_history();
  battle_history_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.battle_history)
}

// required int32 win = 3;
inline bool user_info::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_info::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_info::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 user_info::win() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.win)
  return win_;
}
inline void user_info::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.win)
}

// required int32 lose = 4;
inline bool user_info::has_lose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_info::set_has_lose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_info::clear_has_lose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_info::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 user_info::lose() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.lose)
  return lose_;
}
inline void user_info::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.user_info.lose)
}

// required string user_id = 5;
inline bool user_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_info::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& user_info::user_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.user_info.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.user_info.user_id)
}
inline void user_info::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.user_info.user_id)
}
inline void user_info::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.user_info.user_id)
}
inline ::std::string* user_info::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.user_info.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_serv.user_info.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.user_info.user_id)
}

inline const user_info* user_info::internal_default_instance() {
  return &user_info_default_instance_.get();
}
// -------------------------------------------------------------------

// join_ans

// required .channel_serv.user_info my_info = 1;
inline bool join_ans::has_my_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join_ans::set_has_my_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join_ans::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join_ans::clear_my_info() {
  if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  clear_has_my_info();
}
inline const ::channel_serv::user_info& join_ans::my_info() const {
  // @@protoc_insertion_point(field_get:channel_serv.join_ans.my_info)
  return my_info_ != NULL ? *my_info_
                         : *::channel_serv::user_info::internal_default_instance();
}
inline ::channel_serv::user_info* join_ans::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) {
    my_info_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.join_ans.my_info)
  return my_info_;
}
inline ::channel_serv::user_info* join_ans::release_my_info() {
  // @@protoc_insertion_point(field_release:channel_serv.join_ans.my_info)
  clear_has_my_info();
  ::channel_serv::user_info* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
inline void join_ans::set_allocated_my_info(::channel_serv::user_info* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.join_ans.my_info)
}

// repeated string friends_id_list = 2;
inline int join_ans::friends_id_list_size() const {
  return friends_id_list_.size();
}
inline void join_ans::clear_friends_id_list() {
  friends_id_list_.Clear();
}
inline const ::std::string& join_ans::friends_id_list(int index) const {
  // @@protoc_insertion_point(field_get:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Get(index);
}
inline ::std::string* join_ans::mutable_friends_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Mutable(index);
}
inline void join_ans::set_friends_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channel_serv.join_ans.friends_id_list)
  friends_id_list_.Mutable(index)->assign(value);
}
inline void join_ans::set_friends_id_list(int index, const char* value) {
  friends_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_serv.join_ans.friends_id_list)
}
inline void join_ans::set_friends_id_list(int index, const char* value, size_t size) {
  friends_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_serv.join_ans.friends_id_list)
}
inline ::std::string* join_ans::add_friends_id_list() {
  // @@protoc_insertion_point(field_add_mutable:channel_serv.join_ans.friends_id_list)
  return friends_id_list_.Add();
}
inline void join_ans::add_friends_id_list(const ::std::string& value) {
  friends_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channel_serv.join_ans.friends_id_list)
}
inline void join_ans::add_friends_id_list(const char* value) {
  friends_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channel_serv.join_ans.friends_id_list)
}
inline void join_ans::add_friends_id_list(const char* value, size_t size) {
  friends_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channel_serv.join_ans.friends_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
join_ans::friends_id_list() const {
  // @@protoc_insertion_point(field_list:channel_serv.join_ans.friends_id_list)
  return friends_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
join_ans::mutable_friends_id_list() {
  // @@protoc_insertion_point(field_mutable_list:channel_serv.join_ans.friends_id_list)
  return &friends_id_list_;
}

inline const join_ans* join_ans::internal_default_instance() {
  return &join_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// join_req

// required string token = 1;
inline bool join_req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join_req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& join_req::token() const {
  // @@protoc_insertion_point(field_get:channel_serv.join_req.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void join_req::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.join_req.token)
}
inline void join_req::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.join_req.token)
}
inline void join_req::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.join_req.token)
}
inline ::std::string* join_req::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_serv.join_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* join_req::release_token() {
  // @@protoc_insertion_point(field_release:channel_serv.join_req.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void join_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.join_req.token)
}

inline const join_req* join_req::internal_default_instance() {
  return &join_req_default_instance_.get();
}
// -------------------------------------------------------------------

// logout_ntf

// required string token = 1;
inline bool logout_ntf::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logout_ntf::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logout_ntf::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logout_ntf::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& logout_ntf::token() const {
  // @@protoc_insertion_point(field_get:channel_serv.logout_ntf.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void logout_ntf::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.logout_ntf.token)
}
inline void logout_ntf::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.logout_ntf.token)
}
inline void logout_ntf::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.logout_ntf.token)
}
inline ::std::string* logout_ntf::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:channel_serv.logout_ntf.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* logout_ntf::release_token() {
  // @@protoc_insertion_point(field_release:channel_serv.logout_ntf.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void logout_ntf::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.logout_ntf.token)
}

inline const logout_ntf* logout_ntf::internal_default_instance() {
  return &logout_ntf_default_instance_.get();
}
// -------------------------------------------------------------------

// friends_req

// required .channel_serv.friends_req.F_REQ req = 1;
inline bool friends_req::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friends_req::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friends_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friends_req::clear_req() {
  req_ = 1;
  clear_has_req();
}
inline ::channel_serv::friends_req_F_REQ friends_req::req() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_req.req)
  return static_cast< ::channel_serv::friends_req_F_REQ >(req_);
}
inline void friends_req::set_req(::channel_serv::friends_req_F_REQ value) {
  assert(::channel_serv::friends_req_F_REQ_IsValid(value));
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.friends_req.req)
}

// required string user_id = 2;
inline bool friends_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friends_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friends_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friends_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& friends_req::user_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friends_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.friends_req.user_id)
}
inline void friends_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.friends_req.user_id)
}
inline void friends_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.friends_req.user_id)
}
inline ::std::string* friends_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.friends_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friends_req::release_user_id() {
  // @@protoc_insertion_point(field_release:channel_serv.friends_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friends_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.friends_req.user_id)
}

// optional bool on_off = 3;
inline bool friends_req::has_on_off() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friends_req::set_has_on_off() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friends_req::clear_has_on_off() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friends_req::clear_on_off() {
  on_off_ = false;
  clear_has_on_off();
}
inline bool friends_req::on_off() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_req.on_off)
  return on_off_;
}
inline void friends_req::set_on_off(bool value) {
  set_has_on_off();
  on_off_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.friends_req.on_off)
}

inline const friends_req* friends_req::internal_default_instance() {
  return &friends_req_default_instance_.get();
}
// -------------------------------------------------------------------

// friends_ans

// required .channel_serv.user_info user_information = 1;
inline bool friends_ans::has_user_information() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friends_ans::set_has_user_information() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friends_ans::clear_has_user_information() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friends_ans::clear_user_information() {
  if (user_information_ != NULL) user_information_->::channel_serv::user_info::Clear();
  clear_has_user_information();
}
inline const ::channel_serv::user_info& friends_ans::user_information() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_ans.user_information)
  return user_information_ != NULL ? *user_information_
                         : *::channel_serv::user_info::internal_default_instance();
}
inline ::channel_serv::user_info* friends_ans::mutable_user_information() {
  set_has_user_information();
  if (user_information_ == NULL) {
    user_information_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.friends_ans.user_information)
  return user_information_;
}
inline ::channel_serv::user_info* friends_ans::release_user_information() {
  // @@protoc_insertion_point(field_release:channel_serv.friends_ans.user_information)
  clear_has_user_information();
  ::channel_serv::user_info* temp = user_information_;
  user_information_ = NULL;
  return temp;
}
inline void friends_ans::set_allocated_user_information(::channel_serv::user_info* user_information) {
  delete user_information_;
  user_information_ = user_information;
  if (user_information) {
    set_has_user_information();
  } else {
    clear_has_user_information();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.friends_ans.user_information)
}

// required bool online = 2;
inline bool friends_ans::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friends_ans::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friends_ans::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friends_ans::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool friends_ans::online() const {
  // @@protoc_insertion_point(field_get:channel_serv.friends_ans.online)
  return online_;
}
inline void friends_ans::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.friends_ans.online)
}

inline const friends_ans* friends_ans::internal_default_instance() {
  return &friends_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// play_rank_game_req

// required .channel_serv.user_info my_info = 1;
inline bool play_rank_game_req::has_my_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void play_rank_game_req::set_has_my_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void play_rank_game_req::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void play_rank_game_req::clear_my_info() {
  if (my_info_ != NULL) my_info_->::channel_serv::user_info::Clear();
  clear_has_my_info();
}
inline const ::channel_serv::user_info& play_rank_game_req::my_info() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_rank_game_req.my_info)
  return my_info_ != NULL ? *my_info_
                         : *::channel_serv::user_info::internal_default_instance();
}
inline ::channel_serv::user_info* play_rank_game_req::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) {
    my_info_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.play_rank_game_req.my_info)
  return my_info_;
}
inline ::channel_serv::user_info* play_rank_game_req::release_my_info() {
  // @@protoc_insertion_point(field_release:channel_serv.play_rank_game_req.my_info)
  clear_has_my_info();
  ::channel_serv::user_info* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
inline void play_rank_game_req::set_allocated_my_info(::channel_serv::user_info* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.play_rank_game_req.my_info)
}

inline const play_rank_game_req* play_rank_game_req::internal_default_instance() {
  return &play_rank_game_req_default_instance_.get();
}
// -------------------------------------------------------------------

// play_friends_game_req

// required .channel_serv.play_friends_game_req.FLAG flag_id = 1;
inline bool play_friends_game_req::has_flag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void play_friends_game_req::set_has_flag_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void play_friends_game_req::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void play_friends_game_req::clear_flag_id() {
  flag_id_ = 0;
  clear_has_flag_id();
}
inline ::channel_serv::play_friends_game_req_FLAG play_friends_game_req::flag_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_friends_game_req.flag_id)
  return static_cast< ::channel_serv::play_friends_game_req_FLAG >(flag_id_);
}
inline void play_friends_game_req::set_flag_id(::channel_serv::play_friends_game_req_FLAG value) {
  assert(::channel_serv::play_friends_game_req_FLAG_IsValid(value));
  set_has_flag_id();
  flag_id_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.play_friends_game_req.flag_id)
}

// required string recv_id = 3;
inline bool play_friends_game_req::has_recv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void play_friends_game_req::set_has_recv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void play_friends_game_req::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void play_friends_game_req::clear_recv_id() {
  recv_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_id();
}
inline const ::std::string& play_friends_game_req::recv_id() const {
  // @@protoc_insertion_point(field_get:channel_serv.play_friends_game_req.recv_id)
  return recv_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_friends_game_req::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.play_friends_game_req.recv_id)
}
inline void play_friends_game_req::set_recv_id(const char* value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.play_friends_game_req.recv_id)
}
inline void play_friends_game_req::set_recv_id(const char* value, size_t size) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.play_friends_game_req.recv_id)
}
inline ::std::string* play_friends_game_req::mutable_recv_id() {
  set_has_recv_id();
  // @@protoc_insertion_point(field_mutable:channel_serv.play_friends_game_req.recv_id)
  return recv_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* play_friends_game_req::release_recv_id() {
  // @@protoc_insertion_point(field_release:channel_serv.play_friends_game_req.recv_id)
  clear_has_recv_id();
  return recv_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play_friends_game_req::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id != NULL) {
    set_has_recv_id();
  } else {
    clear_has_recv_id();
  }
  recv_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_id);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.play_friends_game_req.recv_id)
}

inline const play_friends_game_req* play_friends_game_req::internal_default_instance() {
  return &play_friends_game_req_default_instance_.get();
}
// -------------------------------------------------------------------

// matching_complete_ans

// required int32 room_number = 1;
inline bool matching_complete_ans::has_room_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void matching_complete_ans::set_has_room_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void matching_complete_ans::clear_has_room_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void matching_complete_ans::clear_room_number() {
  room_number_ = 0;
  clear_has_room_number();
}
inline ::google::protobuf::int32 matching_complete_ans::room_number() const {
  // @@protoc_insertion_point(field_get:channel_serv.matching_complete_ans.room_number)
  return room_number_;
}
inline void matching_complete_ans::set_room_number(::google::protobuf::int32 value) {
  set_has_room_number();
  room_number_ = value;
  // @@protoc_insertion_point(field_set:channel_serv.matching_complete_ans.room_number)
}

// required .channel_serv.user_info opponent_player = 2;
inline bool matching_complete_ans::has_opponent_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void matching_complete_ans::set_has_opponent_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void matching_complete_ans::clear_has_opponent_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void matching_complete_ans::clear_opponent_player() {
  if (opponent_player_ != NULL) opponent_player_->::channel_serv::user_info::Clear();
  clear_has_opponent_player();
}
inline const ::channel_serv::user_info& matching_complete_ans::opponent_player() const {
  // @@protoc_insertion_point(field_get:channel_serv.matching_complete_ans.opponent_player)
  return opponent_player_ != NULL ? *opponent_player_
                         : *::channel_serv::user_info::internal_default_instance();
}
inline ::channel_serv::user_info* matching_complete_ans::mutable_opponent_player() {
  set_has_opponent_player();
  if (opponent_player_ == NULL) {
    opponent_player_ = new ::channel_serv::user_info;
  }
  // @@protoc_insertion_point(field_mutable:channel_serv.matching_complete_ans.opponent_player)
  return opponent_player_;
}
inline ::channel_serv::user_info* matching_complete_ans::release_opponent_player() {
  // @@protoc_insertion_point(field_release:channel_serv.matching_complete_ans.opponent_player)
  clear_has_opponent_player();
  ::channel_serv::user_info* temp = opponent_player_;
  opponent_player_ = NULL;
  return temp;
}
inline void matching_complete_ans::set_allocated_opponent_player(::channel_serv::user_info* opponent_player) {
  delete opponent_player_;
  opponent_player_ = opponent_player;
  if (opponent_player) {
    set_has_opponent_player();
  } else {
    clear_has_opponent_player();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_serv.matching_complete_ans.opponent_player)
}

inline const matching_complete_ans* matching_complete_ans::internal_default_instance() {
  return &matching_complete_ans_default_instance_.get();
}
// -------------------------------------------------------------------

// error_msg

// required string error_message = 1;
inline bool error_msg::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void error_msg::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void error_msg::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void error_msg::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& error_msg::error_message() const {
  // @@protoc_insertion_point(field_get:channel_serv.error_msg.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error_msg::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channel_serv.error_msg.error_message)
}
inline void error_msg::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channel_serv.error_msg.error_message)
}
inline void error_msg::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channel_serv.error_msg.error_message)
}
inline ::std::string* error_msg::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:channel_serv.error_msg.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error_msg::release_error_message() {
  // @@protoc_insertion_point(field_release:channel_serv.error_msg.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error_msg::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:channel_serv.error_msg.error_message)
}

inline const error_msg* error_msg::internal_default_instance() {
  return &error_msg_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_serv

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::channel_serv::friends_req_F_REQ> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_serv::friends_req_F_REQ>() {
  return ::channel_serv::friends_req_F_REQ_descriptor();
}
template <> struct is_proto_enum< ::channel_serv::play_friends_game_req_FLAG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_serv::play_friends_game_req_FLAG>() {
  return ::channel_serv::play_friends_game_req_FLAG_descriptor();
}
template <> struct is_proto_enum< ::channel_serv::MESSAGE_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_serv::MESSAGE_ID>() {
  return ::channel_serv::MESSAGE_ID_descriptor();
}
template <> struct is_proto_enum< ::channel_serv::RATING> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel_serv::RATING>() {
  return ::channel_serv::RATING_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
